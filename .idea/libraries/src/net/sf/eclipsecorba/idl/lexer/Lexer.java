/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.lexer;

import java.io.*;
import java.util.*;
import net.sf.eclipsecorba.idl.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 81:
                        {
                            Token token = new81(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 82:
                        {
                            Token token = new82(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 83:
                        {
                            Token token = new83(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 84:
                        {
                            Token token = new84(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 85:
                        {
                            Token token = new85(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TAbstract(text, line, pos); }
    Token new1(String text, int line, int pos) { return new TAny(text, line, pos); }
    Token new2(String text, int line, int pos) { return new TAttribute(text, line, pos); }
    Token new3(String text, int line, int pos) { return new TBoolean(text, line, pos); }
    Token new4(String text, int line, int pos) { return new TCase(text, line, pos); }
    Token new5(String text, int line, int pos) { return new TChar(text, line, pos); }
    Token new6(String text, int line, int pos) { return new TConst(text, line, pos); }
    Token new7(String text, int line, int pos) { return new TContext(text, line, pos); }
    Token new8(String text, int line, int pos) { return new TCustom(text, line, pos); }
    Token new9(String text, int line, int pos) { return new TDefault(text, line, pos); }
    Token new10(String text, int line, int pos) { return new TDouble(text, line, pos); }
    Token new11(String text, int line, int pos) { return new TEnum(text, line, pos); }
    Token new12(String text, int line, int pos) { return new TException(text, line, pos); }
    Token new13(String text, int line, int pos) { return new TFactory(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TFalse(text, line, pos); }
    Token new15(String text, int line, int pos) { return new TFixed(text, line, pos); }
    Token new16(String text, int line, int pos) { return new TFloat(text, line, pos); }
    Token new17(String text, int line, int pos) { return new TIn(text, line, pos); }
    Token new18(String text, int line, int pos) { return new TInout(text, line, pos); }
    Token new19(String text, int line, int pos) { return new TInterface(text, line, pos); }
    Token new20(String text, int line, int pos) { return new TLocal(text, line, pos); }
    Token new21(String text, int line, int pos) { return new TLong(text, line, pos); }
    Token new22(String text, int line, int pos) { return new TModule(text, line, pos); }
    Token new23(String text, int line, int pos) { return new TNative(text, line, pos); }
    Token new24(String text, int line, int pos) { return new TOctet(text, line, pos); }
    Token new25(String text, int line, int pos) { return new TOneway(text, line, pos); }
    Token new26(String text, int line, int pos) { return new TOut(text, line, pos); }
    Token new27(String text, int line, int pos) { return new TPrivate(text, line, pos); }
    Token new28(String text, int line, int pos) { return new TPublic(text, line, pos); }
    Token new29(String text, int line, int pos) { return new TRaises(text, line, pos); }
    Token new30(String text, int line, int pos) { return new TReadonly(text, line, pos); }
    Token new31(String text, int line, int pos) { return new TSequence(text, line, pos); }
    Token new32(String text, int line, int pos) { return new TShort(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TString(text, line, pos); }
    Token new34(String text, int line, int pos) { return new TStruct(text, line, pos); }
    Token new35(String text, int line, int pos) { return new TSupports(text, line, pos); }
    Token new36(String text, int line, int pos) { return new TSwitch(text, line, pos); }
    Token new37(String text, int line, int pos) { return new TTrue(text, line, pos); }
    Token new38(String text, int line, int pos) { return new TTruncatable(text, line, pos); }
    Token new39(String text, int line, int pos) { return new TTypedef(text, line, pos); }
    Token new40(String text, int line, int pos) { return new TUnion(text, line, pos); }
    Token new41(String text, int line, int pos) { return new TUnsigned(text, line, pos); }
    Token new42(String text, int line, int pos) { return new TValuebase(text, line, pos); }
    Token new43(String text, int line, int pos) { return new TValuetype(text, line, pos); }
    Token new44(String text, int line, int pos) { return new TVoid(text, line, pos); }
    Token new45(String text, int line, int pos) { return new TWchar(text, line, pos); }
    Token new46(String text, int line, int pos) { return new TWstring(text, line, pos); }
    Token new47(String text, int line, int pos) { return new TTypeprefix(text, line, pos); }
    Token new48(String text, int line, int pos) { return new TTypeid(text, line, pos); }
    Token new49(int line, int pos) { return new TLParenthese(line, pos); }
    Token new50(int line, int pos) { return new TRParenthese(line, pos); }
    Token new51(int line, int pos) { return new TLBrace(line, pos); }
    Token new52(int line, int pos) { return new TRBrace(line, pos); }
    Token new53(int line, int pos) { return new TLBracket(line, pos); }
    Token new54(int line, int pos) { return new TRBracket(line, pos); }
    Token new55(int line, int pos) { return new TSemicolon(line, pos); }
    Token new56(int line, int pos) { return new TComma(line, pos); }
    Token new57(int line, int pos) { return new TColon(line, pos); }
    Token new58(int line, int pos) { return new TDoublecolon(line, pos); }
    Token new59(int line, int pos) { return new TAssign(line, pos); }
    Token new60(int line, int pos) { return new TLt(line, pos); }
    Token new61(int line, int pos) { return new TGt(line, pos); }
    Token new62(int line, int pos) { return new TTilde(line, pos); }
    Token new63(int line, int pos) { return new TPlus(line, pos); }
    Token new64(int line, int pos) { return new TMinus(line, pos); }
    Token new65(int line, int pos) { return new TStar(line, pos); }
    Token new66(int line, int pos) { return new TDiv(line, pos); }
    Token new67(int line, int pos) { return new TBitAnd(line, pos); }
    Token new68(int line, int pos) { return new TBitOr(line, pos); }
    Token new69(int line, int pos) { return new TBitXor(line, pos); }
    Token new70(int line, int pos) { return new TMod(line, pos); }
    Token new71(int line, int pos) { return new TShiftLeft(line, pos); }
    Token new72(int line, int pos) { return new TShiftRight(line, pos); }
    Token new73(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new74(String text, int line, int pos) { return new TTraditionalComment(text, line, pos); }
    Token new75(String text, int line, int pos) { return new TDocumentationComment(text, line, pos); }
    Token new76(String text, int line, int pos) { return new TEndOfLineComment(text, line, pos); }
    Token new77(String text, int line, int pos) { return new TIntegerLiteral(text, line, pos); }
    Token new78(String text, int line, int pos) { return new TFixedPtLiteral(text, line, pos); }
    Token new79(String text, int line, int pos) { return new TFloatingPtLiteral(text, line, pos); }
    Token new80(String text, int line, int pos) { return new TCharacterLiteral(text, line, pos); }
    Token new81(String text, int line, int pos) { return new TWideCharacterLiteral(text, line, pos); }
    Token new82(String text, int line, int pos) { return new TStringLiteral(text, line, pos); }
    Token new83(String text, int line, int pos) { return new TWideStringLiteral(text, line, pos); }
    Token new84(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new85(String text, int line, int pos) { return new TDirective(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {12, 12, 3}, {13, 13, 4}, {32, 32, 5}, {34, 34, 6}, {35, 35, 7}, {37, 37, 8}, {38, 38, 9}, {39, 39, 10}, {40, 40, 11}, {41, 41, 12}, {42, 42, 13}, {43, 43, 14}, {44, 44, 15}, {45, 45, 16}, {46, 46, 17}, {47, 47, 18}, {48, 48, 19}, {49, 57, 20}, {58, 58, 21}, {59, 59, 22}, {60, 60, 23}, {61, 61, 24}, {62, 62, 25}, {65, 65, 26}, {66, 66, 27}, {67, 67, 28}, {68, 68, 29}, {69, 69, 30}, {70, 70, 31}, {71, 72, 32}, {73, 73, 33}, {74, 75, 32}, {76, 76, 34}, {77, 77, 35}, {78, 78, 36}, {79, 79, 37}, {80, 80, 38}, {81, 81, 32}, {82, 82, 39}, {83, 83, 40}, {84, 84, 41}, {85, 85, 42}, {86, 86, 43}, {87, 87, 44}, {88, 90, 32}, {91, 91, 45}, {93, 93, 46}, {94, 94, 47}, {95, 95, 48}, {97, 97, 49}, {98, 98, 50}, {99, 99, 51}, {100, 100, 52}, {101, 101, 53}, {102, 102, 54}, {103, 104, 55}, {105, 105, 56}, {106, 107, 55}, {108, 108, 57}, {109, 109, 58}, {110, 110, 59}, {111, 111, 60}, {112, 112, 61}, {113, 113, 55}, {114, 114, 62}, {115, 115, 63}, {116, 116, 64}, {117, 117, 65}, {118, 118, 66}, {119, 119, 67}, {120, 122, 55}, {123, 123, 68}, {124, 124, 69}, {125, 125, 70}, {126, 126, 71}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 9, 1}, {10, 10, 72}, {12, 32, -2}, },
            {{9, 32, -2}, },
            {{0, 9, 73}, {11, 12, 73}, {14, 33, 73}, {34, 34, 74}, {35, 91, 73}, {92, 92, 75}, {93, 255, 73}, },
            {{9, 9, 76}, {32, 32, 77}, {100, 100, 78}, {101, 101, 79}, {105, 105, 80}, {112, 112, 81}, },
            {},
            {},
            {{0, 9, 82}, {11, 12, 82}, {14, 38, 82}, {40, 91, 82}, {92, 92, 83}, {93, 255, 82}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 84}, },
            {{42, 42, 85}, {47, 47, 86}, },
            {{46, 46, 87}, {48, 55, 88}, {56, 57, 89}, {68, 68, 90}, {69, 69, 91}, {88, 88, 92}, {100, 100, 93}, {101, 101, 94}, {120, 120, 95}, },
            {{46, 46, 87}, {48, 57, 96}, {68, 69, -21}, {100, 101, -21}, },
            {{58, 58, 97}, },
            {},
            {{60, 60, 98}, },
            {},
            {{62, 62, 99}, },
            {{48, 57, 100}, {65, 65, 101}, {66, 66, 102}, {67, 77, 101}, {78, 78, 103}, {79, 83, 101}, {84, 84, 104}, {85, 90, 101}, {95, 95, 105}, {97, 97, 106}, {98, 98, 107}, {99, 109, 106}, {110, 110, 108}, {111, 115, 106}, {116, 116, 109}, {117, 122, 106}, },
            {{48, 57, 100}, {65, 78, 101}, {79, 79, 110}, {80, 90, 101}, {95, 95, 105}, {97, 110, 106}, {111, 111, 111}, {112, 122, 106}, },
            {{48, 57, 100}, {65, 65, 112}, {66, 71, 101}, {72, 72, 113}, {73, 78, 101}, {79, 79, 114}, {80, 84, 101}, {85, 85, 115}, {86, 90, 101}, {95, 95, 105}, {97, 97, 116}, {98, 103, 106}, {104, 104, 117}, {105, 110, 106}, {111, 111, 118}, {112, 116, 106}, {117, 117, 119}, {118, 122, 106}, },
            {{48, 57, 100}, {65, 68, 101}, {69, 69, 120}, {70, 78, 101}, {79, 79, 121}, {80, 95, -29}, {97, 100, 106}, {101, 101, 122}, {102, 110, 106}, {111, 111, 123}, {112, 122, 106}, },
            {{48, 57, 100}, {65, 77, 101}, {78, 78, 124}, {79, 87, 101}, {88, 88, 125}, {89, 90, 101}, {95, 95, 105}, {97, 109, 106}, {110, 110, 126}, {111, 119, 106}, {120, 120, 127}, {121, 122, 106}, },
            {{48, 57, 100}, {65, 65, 128}, {66, 72, 101}, {73, 73, 129}, {74, 75, 101}, {76, 76, 130}, {77, 90, 101}, {95, 95, 105}, {97, 97, 131}, {98, 104, 106}, {105, 105, 132}, {106, 107, 106}, {108, 108, 133}, {109, 122, 106}, },
            {{48, 57, 100}, {65, 90, 101}, {95, 95, 105}, {97, 122, 106}, },
            {{48, 77, -32}, {78, 78, 134}, {79, 90, 101}, {95, 109, -32}, {110, 110, 135}, {111, 122, 106}, },
            {{34, 34, 136}, {39, 39, 137}, {48, 78, -29}, {79, 79, 138}, {80, 110, -29}, {111, 111, 139}, {112, 122, 106}, },
            {{48, 78, -29}, {79, 79, 140}, {80, 110, -29}, {111, 111, 141}, {112, 122, 106}, },
            {{48, 57, 100}, {65, 65, 142}, {66, 90, 101}, {95, 95, 105}, {97, 97, 143}, {98, 122, 106}, },
            {{48, 57, 100}, {65, 66, 101}, {67, 67, 144}, {68, 77, 101}, {78, 78, 145}, {79, 84, 101}, {85, 85, 146}, {86, 95, -30}, {97, 98, 106}, {99, 99, 147}, {100, 109, 106}, {110, 110, 148}, {111, 116, 106}, {117, 117, 149}, {118, 122, 106}, },
            {{48, 57, 100}, {65, 81, 101}, {82, 82, 150}, {83, 84, 101}, {85, 85, 151}, {86, 95, -30}, {97, 113, 106}, {114, 114, 152}, {115, 116, 106}, {117, 117, 153}, {118, 122, 106}, },
            {{48, 57, 100}, {65, 65, 154}, {66, 68, 101}, {69, 69, 155}, {70, 90, 101}, {95, 95, 105}, {97, 97, 156}, {98, 100, 106}, {101, 101, 157}, {102, 122, 106}, },
            {{48, 68, -31}, {69, 69, 158}, {70, 71, 101}, {72, 72, 159}, {73, 83, 101}, {84, 84, 160}, {85, 85, 161}, {86, 86, 101}, {87, 87, 162}, {88, 90, 101}, {95, 100, -31}, {101, 101, 163}, {102, 103, 106}, {104, 104, 164}, {105, 115, 106}, {116, 116, 165}, {117, 117, 166}, {118, 118, 106}, {119, 119, 167}, {120, 122, 106}, },
            {{48, 81, -40}, {82, 82, 168}, {83, 88, 101}, {89, 89, 169}, {90, 90, 101}, {95, 113, -40}, {114, 114, 170}, {115, 120, 106}, {121, 121, 171}, {122, 122, 106}, },
            {{48, 77, -32}, {78, 78, 172}, {79, 109, -35}, {110, 110, 173}, {111, 122, 106}, },
            {{48, 57, 100}, {65, 65, 174}, {66, 78, 101}, {79, 79, 175}, {80, 95, -29}, {97, 97, 176}, {98, 110, 106}, {111, 111, 177}, {112, 122, 106}, },
            {{48, 66, -39}, {67, 67, 178}, {68, 82, 101}, {83, 83, 179}, {84, 90, 101}, {95, 98, -39}, {99, 99, 180}, {100, 114, 106}, {115, 115, 181}, {116, 122, 106}, },
            {},
            {},
            {},
            {{48, 122, -34}, },
            {{48, 122, -28}, },
            {{48, 122, -29}, },
            {{48, 122, -30}, },
            {{48, 122, -31}, },
            {{48, 122, -32}, },
            {{48, 122, -33}, },
            {{48, 122, -34}, },
            {{48, 122, -35}, },
            {{48, 122, -36}, },
            {{48, 122, -37}, },
            {{48, 122, -38}, },
            {{48, 122, -39}, },
            {{48, 122, -40}, },
            {{48, 122, -41}, },
            {{48, 122, -42}, },
            {{48, 122, -43}, },
            {{48, 122, -44}, },
            {{48, 122, -45}, },
            {{48, 122, -46}, },
            {},
            {},
            {},
            {},
            {{9, 32, -2}, },
            {{0, 255, -8}, },
            {},
            {{34, 34, 182}, {39, 39, 183}, {48, 55, 184}, {85, 85, 185}, {88, 88, 186}, {92, 92, 187}, {97, 97, 188}, {98, 98, 189}, {102, 102, 190}, {110, 110, 191}, {114, 114, 192}, {116, 116, 193}, {117, 117, 194}, {118, 118, 195}, {120, 120, 196}, },
            {{9, 112, -9}, },
            {{9, 112, -9}, },
            {{101, 101, 197}, },
            {{108, 108, 198}, {110, 110, 199}, },
            {{102, 102, 200}, {110, 110, 201}, },
            {{114, 114, 202}, },
            {{39, 39, 203}, },
            {{34, 34, 204}, {39, 39, 205}, {48, 55, 206}, {85, 85, 207}, {88, 88, 208}, {92, 92, 209}, {97, 97, 210}, {98, 98, 211}, {102, 102, 212}, {110, 110, 213}, {114, 114, 214}, {116, 116, 215}, {117, 117, 216}, {118, 118, 217}, {120, 120, 218}, },
            {{48, 57, 84}, {68, 68, 219}, {69, 69, 220}, {100, 100, 221}, {101, 101, 222}, },
            {{0, 9, 223}, {10, 10, 224}, {11, 12, 223}, {13, 13, 225}, {14, 41, 223}, {42, 42, 226}, {43, 65535, 223}, },
            {{0, 9, 227}, {10, 10, 228}, {11, 12, 227}, {13, 13, 229}, {14, 65535, 227}, },
            {{48, 57, 230}, {68, 68, 231}, {69, 69, 232}, {100, 100, 233}, {101, 101, 234}, },
            {{46, 69, -21}, {100, 101, -21}, },
            {{46, 46, 87}, {48, 57, 89}, {68, 101, -22}, },
            {},
            {{43, 43, 235}, {45, 45, 236}, {48, 57, 237}, },
            {{48, 57, 238}, {65, 70, 239}, {97, 102, 240}, },
            {},
            {{43, 57, -93}, },
            {{48, 102, -94}, },
            {{46, 101, -22}, },
            {},
            {},
            {},
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 57, 100}, {65, 82, 101}, {83, 83, 241}, {84, 95, -46}, {97, 114, 106}, {115, 115, 242}, {116, 122, 106}, },
            {{48, 57, 100}, {65, 88, 101}, {89, 89, 243}, {90, 95, -43}, {97, 120, 106}, {121, 121, 244}, {122, 122, 106}, },
            {{48, 57, 100}, {65, 83, 101}, {84, 84, 245}, {85, 95, -28}, {97, 115, 106}, {116, 116, 246}, {117, 122, 106}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -104}, },
            {{48, 122, -105}, },
            {{48, 122, -106}, },
            {{48, 78, -29}, {79, 79, 247}, {80, 110, -29}, {111, 111, 248}, {112, 122, 106}, },
            {{48, 122, -112}, },
            {{48, 82, -104}, {83, 83, 249}, {84, 114, -104}, {115, 115, 250}, {116, 122, 106}, },
            {{48, 57, 100}, {65, 65, 251}, {66, 95, -38}, {97, 97, 252}, {98, 122, 106}, },
            {{48, 77, -32}, {78, 78, 253}, {79, 109, -35}, {110, 110, 254}, {111, 122, 106}, },
            {{48, 82, -104}, {83, 83, 255}, {84, 114, -104}, {115, 115, 256}, {116, 122, 106}, },
            {{48, 122, -114}, },
            {{48, 122, -115}, },
            {{48, 122, -116}, },
            {{48, 122, -117}, },
            {{48, 57, 100}, {65, 69, 101}, {70, 70, 257}, {71, 90, 101}, {95, 95, 105}, {97, 101, 106}, {102, 102, 258}, {103, 122, 106}, },
            {{48, 57, 100}, {65, 84, 101}, {85, 85, 259}, {86, 95, -30}, {97, 116, 106}, {117, 117, 260}, {118, 122, 106}, },
            {{48, 122, -122}, },
            {{48, 122, -123}, },
            {{48, 84, -123}, {85, 85, 261}, {86, 116, -123}, {117, 117, 262}, {118, 122, 106}, },
            {{48, 66, -39}, {67, 67, 263}, {68, 90, 101}, {95, 98, -39}, {99, 99, 264}, {100, 122, 106}, },
            {{48, 122, -126}, },
            {{48, 122, -127}, },
            {{48, 66, -39}, {67, 67, 265}, {68, 75, 101}, {76, 76, 266}, {77, 95, -33}, {97, 98, 106}, {99, 99, 267}, {100, 107, 106}, {108, 108, 268}, {109, 122, 106}, },
            {{48, 57, 100}, {65, 87, 101}, {88, 88, 269}, {89, 95, -32}, {97, 119, 106}, {120, 120, 270}, {121, 122, 106}, },
            {{48, 78, -29}, {79, 79, 271}, {80, 110, -29}, {111, 111, 272}, {112, 122, 106}, },
            {{48, 122, -130}, },
            {{48, 122, -131}, },
            {{48, 122, -132}, },
            {{48, 78, -29}, {79, 79, 273}, {80, 83, 101}, {84, 84, 274}, {85, 95, -28}, {97, 110, 106}, {111, 111, 275}, {112, 115, 106}, {116, 116, 276}, {117, 122, 106}, },
            {{48, 122, -136}, },
            {{0, 9, 277}, {11, 12, 277}, {14, 33, 277}, {34, 34, 278}, {35, 91, 277}, {92, 92, 279}, {93, 65535, 277}, },
            {{0, 9, 280}, {11, 12, 280}, {14, 38, 280}, {40, 91, 280}, {92, 92, 281}, {93, 65535, 280}, },
            {{48, 66, -39}, {67, 67, 282}, {68, 77, 101}, {78, 78, 283}, {79, 95, -35}, {97, 98, 106}, {99, 99, 284}, {100, 109, 106}, {110, 110, 285}, {111, 122, 106}, },
            {{48, 122, -140}, },
            {{48, 57, 100}, {65, 67, 101}, {68, 68, 286}, {69, 90, 101}, {95, 95, 105}, {97, 99, 106}, {100, 100, 287}, {101, 122, 106}, },
            {{48, 122, -142}, },
            {{48, 83, -106}, {84, 84, 288}, {85, 115, -106}, {116, 116, 289}, {117, 122, 106}, },
            {{48, 122, -144}, },
            {{48, 83, -106}, {84, 84, 290}, {85, 115, -106}, {116, 116, 291}, {117, 122, 106}, },
            {{48, 68, -31}, {69, 69, 292}, {70, 95, -41}, {97, 100, 106}, {101, 101, 293}, {102, 122, 106}, },
            {{48, 83, -106}, {84, 84, 294}, {85, 115, -106}, {116, 116, 295}, {117, 122, 106}, },
            {{48, 122, -146}, },
            {{48, 122, -147}, },
            {{48, 122, -148}, },
            {{48, 57, 100}, {65, 72, 101}, {73, 73, 296}, {74, 90, 101}, {95, 95, 105}, {97, 104, 106}, {105, 105, 297}, {106, 122, 106}, },
            {{48, 65, -28}, {66, 66, 298}, {67, 90, 101}, {95, 97, -28}, {98, 98, 299}, {99, 122, 106}, },
            {{48, 122, -152}, },
            {{48, 122, -153}, },
            {{48, 72, -152}, {73, 73, 300}, {74, 104, -152}, {105, 105, 301}, {106, 122, 106}, },
            {{48, 57, 100}, {65, 65, 302}, {66, 95, -38}, {97, 97, 303}, {98, 122, 106}, },
            {{48, 122, -156}, },
            {{48, 122, -157}, },
            {{48, 57, 100}, {65, 80, 101}, {81, 81, 304}, {82, 90, 101}, {95, 95, 105}, {97, 112, 106}, {113, 113, 305}, {114, 122, 106}, },
            {{48, 78, -29}, {79, 79, 306}, {80, 110, -29}, {111, 111, 307}, {112, 122, 106}, },
            {{48, 81, -40}, {82, 82, 308}, {83, 90, 101}, {95, 113, -40}, {114, 114, 309}, {115, 122, 106}, },
            {{48, 57, 100}, {65, 79, 101}, {80, 80, 310}, {81, 90, 101}, {95, 95, 105}, {97, 111, 106}, {112, 112, 311}, {113, 122, 106}, },
            {{48, 72, -152}, {73, 73, 312}, {74, 104, -152}, {105, 105, 313}, {106, 122, 106}, },
            {{48, 122, -160}, },
            {{48, 122, -161}, },
            {{48, 122, -162}, },
            {{48, 122, -163}, },
            {{48, 122, -164}, },
            {{48, 84, -123}, {85, 85, 314}, {86, 116, -123}, {117, 117, 315}, {118, 122, 106}, },
            {{48, 79, -163}, {80, 80, 316}, {81, 111, -163}, {112, 112, 317}, {113, 122, 106}, },
            {{48, 122, -170}, },
            {{48, 122, -171}, },
            {{48, 72, -152}, {73, 73, 318}, {74, 82, 101}, {83, 83, 319}, {84, 95, -46}, {97, 104, 106}, {105, 105, 320}, {106, 114, 106}, {115, 115, 321}, {116, 122, 106}, },
            {{48, 122, -174}, },
            {{48, 57, 100}, {65, 75, 101}, {76, 76, 322}, {77, 95, -33}, {97, 107, 106}, {108, 108, 323}, {109, 122, 106}, },
            {{48, 72, -152}, {73, 73, 324}, {74, 104, -152}, {105, 105, 325}, {106, 122, 106}, },
            {{48, 122, -176}, },
            {{48, 122, -177}, },
            {{48, 57, 100}, {65, 71, 101}, {72, 72, 326}, {73, 90, 101}, {95, 95, 105}, {97, 103, 106}, {104, 104, 327}, {105, 122, 106}, },
            {{48, 83, -106}, {84, 84, 328}, {85, 115, -106}, {116, 116, 329}, {117, 122, 106}, },
            {{48, 122, -180}, },
            {{48, 122, -181}, },
            {{0, 255, -8}, },
            {{0, 255, -8}, },
            {{0, 34, -8}, {35, 47, 73}, {48, 55, 330}, {56, 91, 73}, {92, 255, -8}, },
            {{48, 57, 331}, {65, 70, 332}, {97, 102, 333}, },
            {{48, 57, 334}, {65, 70, 335}, {97, 102, 336}, },
            {{0, 255, -8}, },
            {{0, 255, -8}, },
            {{0, 255, -8}, },
            {{0, 255, -8}, },
            {{0, 255, -8}, },
            {{0, 255, -8}, },
            {{0, 255, -8}, },
            {{48, 102, -187}, },
            {{0, 255, -8}, },
            {{48, 102, -188}, },
            {{102, 102, 337}, },
            {{115, 115, 338}, },
            {{100, 100, 339}, },
            {{100, 100, 340}, {110, 110, 341}, },
            {{99, 99, 342}, },
            {{97, 97, 343}, },
            {},
            {{39, 39, 203}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, {48, 55, 344}, },
            {{48, 57, 345}, {65, 70, 346}, {97, 102, 347}, },
            {{48, 57, 348}, {65, 70, 349}, {97, 102, 350}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, },
            {{48, 102, -209}, },
            {{39, 39, 203}, },
            {{48, 102, -210}, },
            {},
            {{43, 43, 351}, {45, 45, 352}, {48, 57, 353}, },
            {},
            {{43, 57, -222}, },
            {{0, 41, -87}, {42, 42, 354}, {43, 65535, 223}, },
            {{0, 65535, -225}, },
            {{0, 9, 223}, {10, 10, 355}, {11, 65535, -225}, },
            {{0, 9, 356}, {10, 10, 357}, {11, 12, 356}, {13, 13, 358}, {14, 41, 356}, {42, 42, 359}, {43, 46, 356}, {47, 47, 360}, {48, 65535, 356}, },
            {{0, 65535, -88}, },
            {},
            {{10, 10, 361}, },
            {{48, 101, -89}, },
            {},
            {{43, 43, 362}, {45, 45, 363}, {48, 57, 364}, },
            {},
            {{43, 57, -234}, },
            {{48, 57, 237}, },
            {{48, 57, 237}, },
            {{48, 57, 237}, },
            {{48, 102, -94}, },
            {{48, 102, -94}, },
            {{48, 102, -94}, },
            {{48, 83, -106}, {84, 84, 365}, {85, 115, -106}, {116, 116, 366}, {117, 122, 106}, },
            {{48, 122, -243}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 81, -40}, {82, 82, 367}, {83, 113, -162}, {114, 114, 368}, {115, 122, 106}, },
            {{48, 122, -247}, },
            {{48, 75, -176}, {76, 76, 369}, {77, 107, -176}, {108, 108, 370}, {109, 122, 106}, },
            {{48, 122, -249}, },
            {{48, 68, -31}, {69, 69, 371}, {70, 100, -147}, {101, 101, 372}, {102, 122, 106}, },
            {{48, 122, -251}, },
            {{48, 81, -40}, {82, 82, 373}, {83, 113, -162}, {114, 114, 374}, {115, 122, 106}, },
            {{48, 122, -253}, },
            {{48, 82, -104}, {83, 83, 375}, {84, 84, 376}, {85, 95, -28}, {97, 114, 106}, {115, 115, 377}, {116, 116, 378}, {117, 122, 106}, },
            {{48, 122, -255}, },
            {{48, 83, -106}, {84, 84, 379}, {85, 115, -106}, {116, 116, 380}, {117, 122, 106}, },
            {{48, 122, -257}, },
            {{48, 57, 100}, {65, 65, 381}, {66, 95, -38}, {97, 97, 382}, {98, 122, 106}, },
            {{48, 122, -259}, },
            {{48, 65, -28}, {66, 66, 383}, {67, 97, -153}, {98, 98, 384}, {99, 122, 106}, },
            {{48, 122, -261}, },
            {{48, 57, 100}, {65, 76, 101}, {77, 77, 385}, {78, 90, 101}, {95, 95, 105}, {97, 108, 106}, {109, 109, 386}, {110, 122, 106}, },
            {{48, 122, -263}, },
            {{48, 68, -31}, {69, 69, 387}, {70, 100, -147}, {101, 101, 388}, {102, 122, 106}, },
            {{48, 122, -265}, },
            {{48, 83, -106}, {84, 84, 389}, {85, 115, -106}, {116, 116, 390}, {117, 122, 106}, },
            {{48, 82, -104}, {83, 83, 391}, {84, 114, -104}, {115, 115, 392}, {116, 122, 106}, },
            {{48, 122, -267}, },
            {{48, 122, -268}, },
            {{48, 68, -31}, {69, 69, 393}, {70, 100, -147}, {101, 101, 394}, {102, 122, 106}, },
            {{48, 122, -271}, },
            {{48, 57, 100}, {65, 65, 395}, {66, 95, -38}, {97, 97, 396}, {98, 122, 106}, },
            {{48, 122, -273}, },
            {{48, 84, -123}, {85, 85, 397}, {86, 116, -123}, {117, 117, 398}, {118, 122, 106}, },
            {{48, 68, -31}, {69, 69, 399}, {70, 100, -147}, {101, 101, 400}, {102, 122, 106}, },
            {{48, 122, -275}, },
            {{48, 122, -276}, },
            {{0, 65535, -138}, },
            {},
            {{34, 34, 401}, {39, 39, 402}, {48, 55, 403}, {85, 85, 404}, {88, 88, 405}, {92, 92, 406}, {97, 97, 407}, {98, 98, 408}, {102, 102, 409}, {110, 110, 410}, {114, 114, 411}, {116, 116, 412}, {117, 117, 413}, {118, 118, 414}, {120, 120, 415}, },
            {{39, 39, 416}, },
            {{34, 34, 417}, {39, 39, 418}, {48, 55, 419}, {85, 85, 420}, {88, 88, 421}, {92, 92, 422}, {97, 97, 423}, {98, 98, 424}, {102, 102, 425}, {110, 110, 426}, {114, 114, 427}, {116, 116, 428}, {117, 117, 429}, {118, 118, 430}, {120, 120, 431}, },
            {{48, 57, 100}, {65, 65, 432}, {66, 95, -38}, {97, 97, 433}, {98, 122, 106}, },
            {{48, 57, 100}, {65, 70, 101}, {71, 71, 434}, {72, 90, 101}, {95, 95, 105}, {97, 102, 106}, {103, 103, 435}, {104, 122, 106}, },
            {{48, 122, -284}, },
            {{48, 122, -285}, },
            {{48, 84, -123}, {85, 85, 436}, {86, 116, -123}, {117, 117, 437}, {118, 122, 106}, },
            {{48, 122, -288}, },
            {{48, 72, -152}, {73, 73, 438}, {74, 104, -152}, {105, 105, 439}, {106, 122, 106}, },
            {{48, 122, -290}, },
            {{48, 68, -31}, {69, 69, 440}, {70, 100, -147}, {101, 101, 441}, {102, 122, 106}, },
            {{48, 122, -292}, },
            {{48, 57, 100}, {65, 86, 101}, {87, 87, 442}, {88, 95, -42}, {97, 118, 106}, {119, 119, 443}, {120, 122, 106}, },
            {{48, 122, -294}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 57, 100}, {65, 85, 101}, {86, 86, 444}, {87, 90, 101}, {95, 95, 105}, {97, 117, 106}, {118, 118, 445}, {119, 122, 106}, },
            {{48, 122, -298}, },
            {{48, 75, -176}, {76, 76, 446}, {77, 107, -176}, {108, 108, 447}, {109, 122, 106}, },
            {{48, 122, -300}, },
            {{48, 82, -104}, {83, 83, 448}, {84, 114, -104}, {115, 115, 449}, {116, 122, 106}, },
            {{48, 122, -302}, },
            {{48, 67, -142}, {68, 68, 450}, {69, 99, -142}, {100, 100, 451}, {101, 122, 106}, },
            {{48, 122, -304}, },
            {{48, 84, -123}, {85, 85, 452}, {86, 116, -123}, {117, 117, 453}, {118, 122, 106}, },
            {{48, 122, -306}, },
            {{48, 81, -40}, {82, 82, 454}, {83, 113, -162}, {114, 114, 455}, {115, 122, 106}, },
            {{48, 122, -308}, },
            {{48, 72, -152}, {73, 73, 456}, {74, 84, 101}, {85, 85, 457}, {86, 95, -30}, {97, 104, 106}, {105, 105, 458}, {106, 116, 106}, {117, 117, 459}, {118, 122, 106}, },
            {{48, 122, -310}, },
            {{48, 79, -163}, {80, 80, 460}, {81, 111, -163}, {112, 112, 461}, {113, 122, 106}, },
            {{48, 122, -312}, },
            {{48, 83, -106}, {84, 84, 462}, {85, 115, -106}, {116, 116, 463}, {117, 122, 106}, },
            {{48, 122, -314}, },
            {{48, 68, -31}, {69, 69, 464}, {70, 77, 101}, {78, 78, 465}, {79, 95, -35}, {97, 100, 106}, {101, 101, 466}, {102, 109, 106}, {110, 110, 467}, {111, 122, 106}, },
            {{48, 122, -316}, },
            {{48, 68, -31}, {69, 69, 468}, {70, 100, -147}, {101, 101, 469}, {102, 122, 106}, },
            {{48, 122, -318}, },
            {{48, 78, -29}, {79, 79, 470}, {80, 110, -29}, {111, 111, 471}, {112, 122, 106}, },
            {{48, 72, -152}, {73, 73, 472}, {74, 104, -152}, {105, 105, 473}, {106, 122, 106}, },
            {{48, 122, -320}, },
            {{48, 122, -321}, },
            {{48, 84, -123}, {85, 85, 474}, {86, 116, -123}, {117, 117, 475}, {118, 122, 106}, },
            {{48, 122, -324}, },
            {{48, 67, -142}, {68, 68, 476}, {69, 99, -142}, {100, 100, 477}, {101, 122, 106}, },
            {{48, 122, -326}, },
            {{48, 57, 100}, {65, 65, 478}, {66, 95, -38}, {97, 97, 479}, {98, 122, 106}, },
            {{48, 122, -328}, },
            {{48, 81, -40}, {82, 82, 480}, {83, 113, -162}, {114, 114, 481}, {115, 122, 106}, },
            {{48, 122, -330}, },
            {{0, 47, -186}, {48, 55, 482}, {56, 255, -186}, },
            {{0, 47, -186}, {48, 57, 483}, {58, 64, 73}, {65, 70, 484}, {71, 91, 73}, {92, 92, 75}, {93, 96, 73}, {97, 102, 485}, {103, 255, 73}, },
            {{0, 255, -333}, },
            {{0, 255, -333}, },
            {{0, 47, -186}, {48, 57, 486}, {58, 64, 73}, {65, 70, 487}, {71, 96, -333}, {97, 102, 488}, {103, 255, 73}, },
            {{0, 255, -336}, },
            {{0, 255, -336}, },
            {{105, 105, 489}, },
            {{101, 101, 490}, },
            {{105, 105, 491}, },
            {{101, 101, 492}, },
            {{100, 100, 493}, },
            {{108, 108, 494}, },
            {{103, 103, 495}, },
            {{39, 39, 203}, {48, 55, 496}, },
            {{39, 39, 203}, {48, 57, 497}, {65, 70, 498}, {97, 102, 499}, },
            {{39, 102, -347}, },
            {{39, 102, -347}, },
            {{39, 39, 203}, {48, 57, 500}, {65, 70, 501}, {97, 102, 502}, },
            {{39, 102, -350}, },
            {{39, 102, -350}, },
            {{48, 57, 353}, },
            {{48, 57, 353}, },
            {{48, 57, 353}, },
            {{0, 9, 503}, {10, 10, 504}, {11, 12, 503}, {13, 13, 505}, {14, 41, 503}, {42, 42, 354}, {43, 46, 503}, {47, 47, 506}, {48, 65535, 503}, },
            {{0, 65535, -225}, },
            {{0, 9, 507}, {10, 10, 508}, {11, 12, 507}, {13, 13, 509}, {14, 41, 507}, {42, 42, 510}, {43, 65535, 507}, },
            {{0, 65535, -358}, },
            {{0, 9, 507}, {10, 10, 511}, {11, 65535, -358}, },
            {{0, 65535, -228}, },
            {},
            {},
            {{48, 57, 364}, },
            {{48, 57, 364}, },
            {{48, 57, 364}, },
            {{48, 81, -40}, {82, 82, 512}, {83, 113, -162}, {114, 114, 513}, {115, 122, 106}, },
            {{48, 122, -367}, },
            {{48, 72, -152}, {73, 73, 514}, {74, 104, -152}, {105, 105, 515}, {106, 122, 106}, },
            {{48, 122, -369}, },
            {{48, 68, -31}, {69, 69, 516}, {70, 100, -147}, {101, 101, 517}, {102, 122, 106}, },
            {{48, 122, -371}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 83, -106}, {84, 84, 518}, {85, 115, -106}, {116, 116, 519}, {117, 122, 106}, },
            {{48, 68, -31}, {69, 69, 520}, {70, 100, -147}, {101, 101, 521}, {102, 122, 106}, },
            {{48, 122, -377}, },
            {{48, 122, -378}, },
            {{48, 78, -29}, {79, 79, 522}, {80, 110, -29}, {111, 111, 523}, {112, 122, 106}, },
            {{48, 122, -381}, },
            {{48, 84, -123}, {85, 85, 524}, {86, 116, -123}, {117, 117, 525}, {118, 122, 106}, },
            {{48, 122, -383}, },
            {{48, 75, -176}, {76, 76, 526}, {77, 107, -176}, {108, 108, 527}, {109, 122, 106}, },
            {{48, 122, -385}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 79, -163}, {80, 80, 528}, {81, 111, -163}, {112, 112, 529}, {113, 122, 106}, },
            {{48, 122, -389}, },
            {{48, 78, -29}, {79, 79, 530}, {80, 110, -29}, {111, 111, 531}, {112, 122, 106}, },
            {{48, 122, -391}, },
            {{48, 68, -31}, {69, 69, 532}, {70, 100, -147}, {101, 101, 533}, {102, 122, 106}, },
            {{48, 122, -393}, },
            {{48, 67, -142}, {68, 68, 534}, {69, 99, -142}, {100, 100, 535}, {101, 122, 106}, },
            {{48, 122, -395}, },
            {{48, 83, -106}, {84, 84, 536}, {85, 115, -106}, {116, 116, 537}, {117, 122, 106}, },
            {{48, 122, -397}, },
            {{48, 83, -106}, {84, 84, 538}, {85, 115, -106}, {116, 116, 539}, {117, 122, 106}, },
            {{48, 122, -399}, },
            {{48, 81, -40}, {82, 82, 540}, {83, 113, -162}, {114, 114, 541}, {115, 122, 106}, },
            {{48, 122, -401}, },
            {{0, 65535, -138}, },
            {{0, 65535, -138}, },
            {{0, 34, -138}, {35, 47, 277}, {48, 55, 542}, {56, 91, 277}, {92, 65535, -138}, },
            {{48, 57, 543}, {65, 70, 544}, {97, 102, 545}, },
            {{48, 57, 546}, {65, 70, 547}, {97, 102, 548}, },
            {{0, 65535, -138}, },
            {{0, 65535, -138}, },
            {{0, 65535, -138}, },
            {{0, 65535, -138}, },
            {{0, 65535, -138}, },
            {{0, 65535, -138}, },
            {{0, 65535, -138}, },
            {{48, 102, -406}, },
            {{0, 65535, -138}, },
            {{48, 102, -407}, },
            {},
            {{39, 39, 416}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, {48, 55, 549}, },
            {{48, 57, 550}, {65, 70, 551}, {97, 102, 552}, },
            {{48, 57, 553}, {65, 70, 554}, {97, 102, 555}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, },
            {{48, 102, -422}, },
            {{39, 39, 416}, },
            {{48, 102, -423}, },
            {{48, 75, -176}, {76, 76, 556}, {77, 107, -176}, {108, 108, 557}, {109, 122, 106}, },
            {{48, 122, -434}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 75, -176}, {76, 76, 558}, {77, 107, -176}, {108, 108, 559}, {109, 122, 106}, },
            {{48, 122, -438}, },
            {{48, 85, -298}, {86, 86, 560}, {87, 117, -298}, {118, 118, 561}, {119, 122, 106}, },
            {{48, 122, -440}, },
            {{48, 83, -106}, {84, 84, 562}, {85, 115, -106}, {116, 116, 563}, {117, 122, 106}, },
            {{48, 122, -442}, },
            {{48, 57, 100}, {65, 65, 564}, {66, 95, -38}, {97, 97, 565}, {98, 122, 106}, },
            {{48, 122, -444}, },
            {{48, 57, 100}, {65, 65, 566}, {66, 95, -38}, {97, 97, 567}, {98, 122, 106}, },
            {{48, 122, -446}, },
            {{48, 72, -152}, {73, 73, 568}, {74, 104, -152}, {105, 105, 569}, {106, 122, 106}, },
            {{48, 122, -448}, },
            {{48, 68, -31}, {69, 69, 570}, {70, 100, -147}, {101, 101, 571}, {102, 122, 106}, },
            {{48, 122, -450}, },
            {{48, 78, -29}, {79, 79, 572}, {80, 110, -29}, {111, 111, 573}, {112, 122, 106}, },
            {{48, 122, -452}, },
            {{48, 68, -31}, {69, 69, 574}, {70, 100, -147}, {101, 101, 575}, {102, 122, 106}, },
            {{48, 122, -454}, },
            {{48, 83, -106}, {84, 84, 576}, {85, 115, -106}, {116, 116, 577}, {117, 122, 106}, },
            {{48, 122, -456}, },
            {{48, 77, -32}, {78, 78, 578}, {79, 109, -35}, {110, 110, 579}, {111, 122, 106}, },
            {{48, 66, -39}, {67, 67, 580}, {68, 98, -127}, {99, 99, 581}, {100, 122, 106}, },
            {{48, 122, -458}, },
            {{48, 122, -459}, },
            {{48, 78, -29}, {79, 79, 582}, {80, 110, -29}, {111, 111, 583}, {112, 122, 106}, },
            {{48, 122, -462}, },
            {{48, 66, -39}, {67, 67, 584}, {68, 98, -127}, {99, 99, 585}, {100, 122, 106}, },
            {{48, 122, -464}, },
            {{48, 122, -34}, },
            {{48, 66, -39}, {67, 67, 586}, {68, 98, -127}, {99, 99, 587}, {100, 122, 106}, },
            {{48, 122, -34}, },
            {{48, 122, -467}, },
            {{48, 67, -142}, {68, 68, 588}, {69, 72, 101}, {73, 73, 589}, {74, 79, 101}, {80, 80, 590}, {81, 95, -163}, {97, 99, 106}, {100, 100, 591}, {101, 104, 106}, {105, 105, 592}, {106, 111, 106}, {112, 112, 593}, {113, 122, 106}, },
            {{48, 122, -470}, },
            {{48, 77, -32}, {78, 78, 594}, {79, 109, -35}, {110, 110, 595}, {111, 122, 106}, },
            {{48, 122, -472}, },
            {{48, 70, -285}, {71, 71, 596}, {72, 102, -285}, {103, 103, 597}, {104, 122, 106}, },
            {{48, 122, -474}, },
            {{48, 68, -31}, {69, 69, 598}, {70, 100, -147}, {101, 101, 599}, {102, 122, 106}, },
            {{48, 122, -476}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 81, -40}, {82, 82, 600}, {83, 113, -162}, {114, 114, 601}, {115, 122, 106}, },
            {{48, 122, -480}, },
            {{48, 72, -152}, {73, 73, 602}, {74, 104, -152}, {105, 105, 603}, {106, 122, 106}, },
            {{48, 122, -482}, },
            {{0, 255, -8}, },
            {{0, 47, -186}, {48, 57, 604}, {58, 64, 73}, {65, 70, 605}, {71, 96, -333}, {97, 102, 606}, {103, 255, 73}, },
            {{0, 255, -485}, },
            {{0, 255, -485}, },
            {{0, 255, -8}, },
            {{0, 255, -8}, },
            {{0, 255, -8}, },
            {{110, 110, 607}, },
            {{9, 9, 608}, {32, 32, 609}, },
            {{102, 102, 610}, },
            {{102, 102, 611}, },
            {{101, 101, 612}, },
            {{117, 117, 613}, },
            {{109, 109, 614}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, {48, 57, 615}, {65, 70, 616}, {97, 102, 617}, },
            {{39, 102, -499}, },
            {{39, 102, -499}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, },
            {{0, 9, 618}, {10, 10, 619}, {11, 12, 618}, {13, 13, 620}, {14, 41, 618}, {42, 42, 621}, {43, 65535, 618}, },
            {{0, 65535, -505}, },
            {{0, 9, 618}, {10, 10, 622}, {11, 65535, -505}, },
            {},
            {{0, 65535, -358}, },
            {{0, 65535, -358}, },
            {{0, 9, 507}, {10, 10, 623}, {11, 65535, -358}, },
            {{0, 41, -228}, {42, 42, 510}, {43, 65535, -228}, },
            {{0, 65535, -358}, },
            {{48, 57, 100}, {65, 65, 624}, {66, 95, -38}, {97, 97, 625}, {98, 122, 106}, },
            {{48, 122, -514}, },
            {{48, 65, -28}, {66, 66, 626}, {67, 97, -153}, {98, 98, 627}, {99, 122, 106}, },
            {{48, 122, -516}, },
            {{48, 57, 100}, {65, 65, 628}, {66, 95, -38}, {97, 97, 629}, {98, 122, 106}, },
            {{48, 122, -518}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 87, -131}, {88, 88, 630}, {89, 119, -131}, {120, 120, 631}, {121, 122, 106}, },
            {{48, 122, -522}, },
            {{48, 76, -263}, {77, 77, 632}, {78, 108, -263}, {109, 109, 633}, {110, 122, 106}, },
            {{48, 122, -524}, },
            {{48, 75, -176}, {76, 76, 634}, {77, 107, -176}, {108, 108, 635}, {109, 122, 106}, },
            {{48, 122, -526}, },
            {{48, 68, -31}, {69, 69, 636}, {70, 100, -147}, {101, 101, 637}, {102, 122, 106}, },
            {{48, 122, -528}, },
            {{48, 83, -106}, {84, 84, 638}, {85, 115, -106}, {116, 116, 639}, {117, 122, 106}, },
            {{48, 122, -530}, },
            {{48, 81, -40}, {82, 82, 640}, {83, 113, -162}, {114, 114, 641}, {115, 122, 106}, },
            {{48, 122, -532}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 69, -122}, {70, 70, 642}, {71, 101, -122}, {102, 102, 643}, {103, 122, 106}, },
            {{48, 122, -542}, },
            {{0, 47, -405}, {48, 55, 644}, {56, 65535, -405}, },
            {{0, 47, -405}, {48, 57, 645}, {58, 64, 277}, {65, 70, 646}, {71, 91, 277}, {92, 92, 279}, {93, 96, 277}, {97, 102, 647}, {103, 65535, 277}, },
            {{0, 65535, -545}, },
            {{0, 65535, -545}, },
            {{0, 47, -405}, {48, 57, 648}, {58, 64, 277}, {65, 70, 649}, {71, 96, -545}, {97, 102, 650}, {103, 65535, 277}, },
            {{0, 65535, -548}, },
            {{0, 65535, -548}, },
            {{39, 39, 416}, {48, 55, 651}, },
            {{39, 39, 416}, {48, 57, 652}, {65, 70, 653}, {97, 102, 654}, },
            {{39, 102, -552}, },
            {{39, 102, -552}, },
            {{39, 39, 416}, {48, 57, 655}, {65, 70, 656}, {97, 102, 657}, },
            {{39, 102, -555}, },
            {{39, 102, -555}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 68, -31}, {69, 69, 658}, {70, 100, -147}, {101, 101, 659}, {102, 122, 106}, },
            {{48, 122, -560}, },
            {{48, 68, -31}, {69, 69, 660}, {70, 100, -147}, {101, 101, 661}, {102, 122, 106}, },
            {{48, 122, -562}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 88, -105}, {89, 89, 662}, {90, 120, -105}, {121, 121, 663}, {122, 122, 106}, },
            {{48, 122, -566}, },
            {{48, 83, -106}, {84, 84, 664}, {85, 115, -106}, {116, 116, 665}, {117, 122, 106}, },
            {{48, 122, -568}, },
            {{48, 66, -39}, {67, 67, 666}, {68, 98, -127}, {99, 99, 667}, {100, 122, 106}, },
            {{48, 122, -570}, },
            {{48, 82, -104}, {83, 83, 668}, {84, 114, -104}, {115, 115, 669}, {116, 122, 106}, },
            {{48, 122, -572}, },
            {{48, 77, -32}, {78, 78, 670}, {79, 109, -35}, {110, 110, 671}, {111, 122, 106}, },
            {{48, 122, -574}, },
            {{48, 77, -32}, {78, 78, 672}, {79, 109, -35}, {110, 110, 673}, {111, 122, 106}, },
            {{48, 122, -576}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 70, -285}, {71, 71, 674}, {72, 102, -285}, {103, 103, 675}, {104, 122, 106}, },
            {{48, 122, -580}, },
            {{48, 83, -106}, {84, 84, 676}, {85, 115, -106}, {116, 116, 677}, {117, 122, 106}, },
            {{48, 122, -582}, },
            {{48, 81, -40}, {82, 82, 678}, {83, 113, -162}, {114, 114, 679}, {115, 122, 106}, },
            {{48, 122, -584}, },
            {{48, 71, -180}, {72, 72, 680}, {73, 103, -180}, {104, 104, 681}, {105, 122, 106}, },
            {{48, 122, -586}, },
            {{48, 57, 100}, {65, 65, 682}, {66, 95, -38}, {97, 97, 683}, {98, 122, 106}, },
            {{48, 122, -588}, },
            {{48, 68, -31}, {69, 69, 684}, {70, 100, -147}, {101, 101, 685}, {102, 122, 106}, },
            {{48, 67, -142}, {68, 68, 686}, {69, 99, -142}, {100, 100, 687}, {101, 122, 106}, },
            {{48, 81, -40}, {82, 82, 688}, {83, 113, -162}, {114, 114, 689}, {115, 122, 106}, },
            {{48, 122, -590}, },
            {{48, 122, -591}, },
            {{48, 122, -592}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 77, -32}, {78, 78, 690}, {79, 109, -35}, {110, 110, 691}, {111, 122, 106}, },
            {{48, 122, -598}, },
            {{48, 65, -28}, {66, 66, 692}, {67, 83, 101}, {84, 84, 693}, {85, 97, -28}, {98, 98, 694}, {99, 115, 106}, {116, 116, 695}, {117, 122, 106}, },
            {{48, 122, -600}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 77, -32}, {78, 78, 696}, {79, 109, -35}, {110, 110, 697}, {111, 122, 106}, },
            {{48, 122, -604}, },
            {{0, 47, -186}, {48, 57, 698}, {58, 64, 73}, {65, 70, 699}, {71, 96, -333}, {97, 102, 700}, {103, 255, 73}, },
            {{0, 255, -606}, },
            {{0, 255, -606}, },
            {{101, 101, 701}, },
            {{0, 8, 702}, {9, 9, 703}, {11, 12, 702}, {14, 31, 702}, {32, 32, 704}, {33, 255, 702}, },
            {{0, 255, -610}, },
            {{9, 32, -492}, },
            {{9, 32, -492}, },
            {{102, 102, 705}, },
            {{100, 100, 706}, },
            {{97, 97, 707}, },
            {{39, 39, 203}, {48, 57, 708}, {65, 70, 709}, {97, 102, 710}, },
            {{39, 102, -617}, },
            {{39, 102, -617}, },
            {{0, 65535, -505}, },
            {{0, 65535, -505}, },
            {{0, 9, 618}, {10, 10, 711}, {11, 65535, -505}, },
            {{0, 41, -356}, {42, 42, 621}, {43, 65535, -356}, },
            {{0, 65535, -505}, },
            {{0, 65535, -358}, },
            {{48, 66, -39}, {67, 67, 712}, {68, 98, -127}, {99, 99, 713}, {100, 122, 106}, },
            {{48, 122, -626}, },
            {{48, 84, -123}, {85, 85, 714}, {86, 116, -123}, {117, 117, 715}, {118, 122, 106}, },
            {{48, 122, -628}, },
            {{48, 77, -32}, {78, 78, 716}, {79, 109, -35}, {110, 110, 717}, {111, 122, 106}, },
            {{48, 122, -630}, },
            {{48, 83, -106}, {84, 84, 718}, {85, 115, -106}, {116, 116, 719}, {117, 122, 106}, },
            {{48, 122, -632}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 83, -106}, {84, 84, 720}, {85, 115, -106}, {116, 116, 721}, {117, 122, 106}, },
            {{48, 122, -636}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 72, -152}, {73, 73, 722}, {74, 104, -152}, {105, 105, 723}, {106, 122, 106}, },
            {{48, 122, -640}, },
            {{48, 88, -105}, {89, 89, 724}, {90, 120, -105}, {121, 121, 725}, {122, 122, 106}, },
            {{48, 122, -642}, },
            {{48, 57, 100}, {65, 65, 726}, {66, 95, -38}, {97, 97, 727}, {98, 122, 106}, },
            {{48, 122, -644}, },
            {{0, 65535, -138}, },
            {{0, 47, -405}, {48, 57, 728}, {58, 64, 277}, {65, 70, 729}, {71, 96, -545}, {97, 102, 730}, {103, 65535, 277}, },
            {{0, 65535, -647}, },
            {{0, 65535, -647}, },
            {{0, 65535, -138}, },
            {{0, 65535, -138}, },
            {{0, 65535, -138}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, {48, 57, 731}, {65, 70, 732}, {97, 102, 733}, },
            {{39, 102, -654}, },
            {{39, 102, -654}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 68, -31}, {69, 69, 734}, {70, 100, -147}, {101, 101, 735}, {102, 122, 106}, },
            {{48, 122, -666}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 75, -176}, {76, 76, 736}, {77, 107, -176}, {108, 108, 737}, {109, 122, 106}, },
            {{48, 122, -672}, },
            {{48, 66, -39}, {67, 67, 738}, {68, 98, -127}, {99, 99, 739}, {100, 122, 106}, },
            {{48, 122, -674}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 83, -106}, {84, 84, 740}, {85, 115, -106}, {116, 116, 741}, {117, 122, 106}, },
            {{48, 122, -680}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 83, -106}, {84, 84, 742}, {85, 115, -106}, {116, 116, 743}, {117, 122, 106}, },
            {{48, 122, -684}, },
            {{48, 69, -122}, {70, 70, 744}, {71, 101, -122}, {102, 102, 745}, {103, 122, 106}, },
            {{48, 122, -686}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 68, -31}, {69, 69, 746}, {70, 100, -147}, {101, 101, 747}, {102, 122, 106}, },
            {{48, 122, -690}, },
            {{48, 68, -31}, {69, 69, 748}, {70, 100, -147}, {101, 101, 749}, {102, 122, 106}, },
            {{48, 122, -692}, },
            {{48, 57, 100}, {65, 65, 750}, {66, 95, -38}, {97, 97, 751}, {98, 122, 106}, },
            {{48, 88, -105}, {89, 89, 752}, {90, 120, -105}, {121, 121, 753}, {122, 122, 106}, },
            {{48, 122, -694}, },
            {{48, 122, -695}, },
            {{48, 70, -285}, {71, 71, 754}, {72, 102, -285}, {103, 103, 755}, {104, 122, 106}, },
            {{48, 122, -698}, },
            {{0, 255, -8}, },
            {{0, 255, -8}, },
            {{0, 255, -8}, },
            {{9, 32, -492}, },
            {{0, 9, 702}, {11, 12, 702}, {14, 255, 702}, },
            {{0, 255, -610}, },
            {{0, 255, -610}, },
            {{9, 32, -492}, },
            {{101, 101, 756}, },
            {{9, 32, -492}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, },
            {{39, 39, 203}, },
            {{0, 65535, -505}, },
            {{48, 83, -106}, {84, 84, 757}, {85, 115, -106}, {116, 116, 758}, {117, 122, 106}, },
            {{48, 122, -714}, },
            {{48, 83, -106}, {84, 84, 759}, {85, 115, -106}, {116, 116, 760}, {117, 122, 106}, },
            {{48, 122, -716}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 78, -29}, {79, 79, 761}, {80, 110, -29}, {111, 111, 762}, {112, 122, 106}, },
            {{48, 122, -724}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 66, -39}, {67, 67, 763}, {68, 98, -127}, {99, 99, 764}, {100, 122, 106}, },
            {{48, 122, -728}, },
            {{0, 47, -405}, {48, 57, 765}, {58, 64, 277}, {65, 70, 766}, {71, 96, -545}, {97, 102, 767}, {103, 65535, 277}, },
            {{0, 65535, -730}, },
            {{0, 65535, -730}, },
            {{39, 39, 416}, {48, 57, 768}, {65, 70, 769}, {97, 102, 770}, },
            {{39, 102, -733}, },
            {{39, 102, -733}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 88, -105}, {89, 89, 771}, {90, 120, -105}, {121, 121, 772}, {122, 122, 106}, },
            {{48, 122, -738}, },
            {{48, 68, -31}, {69, 69, 773}, {70, 100, -147}, {101, 101, 774}, {102, 122, 106}, },
            {{48, 122, -740}, },
            {{48, 82, -104}, {83, 83, 775}, {84, 114, -104}, {115, 115, 776}, {116, 122, 106}, },
            {{48, 122, -742}, },
            {{48, 57, 100}, {65, 65, 777}, {66, 95, -38}, {97, 97, 778}, {98, 122, 106}, },
            {{48, 122, -744}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 69, -122}, {70, 70, 779}, {71, 101, -122}, {102, 102, 780}, {103, 122, 106}, },
            {{48, 122, -748}, },
            {{48, 67, -142}, {68, 68, 781}, {69, 99, -142}, {100, 100, 782}, {101, 122, 106}, },
            {{48, 122, -750}, },
            {{48, 82, -104}, {83, 83, 783}, {84, 114, -104}, {115, 115, 784}, {116, 122, 106}, },
            {{48, 122, -752}, },
            {{48, 79, -163}, {80, 80, 785}, {81, 111, -163}, {112, 112, 786}, {113, 122, 106}, },
            {{48, 122, -754}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{9, 32, -492}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 68, -31}, {69, 69, 787}, {70, 100, -147}, {101, 101, 788}, {102, 122, 106}, },
            {{48, 122, -761}, },
            {{48, 77, -32}, {78, 78, 789}, {79, 109, -35}, {110, 110, 790}, {111, 122, 106}, },
            {{48, 122, -763}, },
            {{48, 68, -31}, {69, 69, 791}, {70, 100, -147}, {101, 101, 792}, {102, 122, 106}, },
            {{48, 122, -765}, },
            {{0, 65535, -138}, },
            {{0, 65535, -138}, },
            {{0, 65535, -138}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, },
            {{39, 39, 416}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 65, -28}, {66, 66, 793}, {67, 97, -153}, {98, 98, 794}, {99, 122, 106}, },
            {{48, 122, -779}, },
            {{48, 72, -152}, {73, 73, 795}, {74, 104, -152}, {105, 105, 796}, {106, 122, 106}, },
            {{48, 122, -781}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 68, -31}, {69, 69, 797}, {70, 100, -147}, {101, 101, 798}, {102, 122, 106}, },
            {{48, 122, -785}, },
            {{48, 68, -31}, {69, 69, 799}, {70, 100, -147}, {101, 101, 800}, {102, 122, 106}, },
            {{48, 122, -787}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 75, -176}, {76, 76, 801}, {77, 107, -176}, {108, 108, 802}, {109, 122, 106}, },
            {{48, 122, -795}, },
            {{48, 87, -131}, {88, 88, 803}, {89, 119, -131}, {120, 120, 804}, {121, 122, 106}, },
            {{48, 122, -797}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 68, -31}, {69, 69, 805}, {70, 100, -147}, {101, 101, 806}, {102, 122, 106}, },
            {{48, 122, -803}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
            {{48, 122, -34}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {73, 73, 73, 73, 73, 73, -1, -1, 70, 67, -1, 49, 50, 65, 63, 56, 64, -1, 66, 77, 77, 57, 55, 60, 59, 61, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 53, 54, 69, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 51, 68, 52, 62, 73, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, 76, 79, 77, -1, 78, -1, -1, 78, -1, -1, 77, 58, 71, 72, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 17, 17, -1, -1, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, 78, -1, -1, -1, -1, -1, 76, 76, 76, 79, 78, -1, 78, -1, -1, -1, 79, 77, 77, 77, 84, 84, 1, 1, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, -1, 83, -1, -1, -1, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 26, 26, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, 75, 76, -1, -1, 79, 84, 84, 84, 84, 84, 84, 4, 4, 5, 5, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 11, 11, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 84, 21, 21, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 37, 84, 37, 84, 84, 84, 84, 84, 84, 84, 84, 84, 44, 44, 84, 84, 84, 84, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, 84, 84, 84, 84, 84, 84, 6, 6, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 14, 14, 15, 15, 16, 16, 18, 18, 84, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 20, 84, 84, 84, 84, 24, 24, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 32, 32, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 40, 40, 84, 84, 84, 84, 45, 45, 84, 84, -1, -1, -1, -1, 85, 85, 85, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 84, 84, 84, 84, 84, 84, 84, 8, 8, 84, 84, 10, 10, 84, 84, 84, 84, 84, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 22, 23, 23, 25, 25, 84, 84, 28, 28, 29, 29, 84, 84, 84, 84, 33, 33, 34, 34, 84, 84, 36, 36, 84, 84, 84, 84, 48, 48, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, 85, 85, 85, 85, 85, -1, 85, -1, -1, -1, -1, 84, 84, 84, 84, 3, 3, 7, 7, 9, 9, 84, 84, 13, 13, 84, 84, -1, -1, -1, -1, -1, -1, 27, 27, 84, 84, 84, 84, 84, 84, 84, 84, 39, 39, 84, 84, 84, 84, 84, 84, 84, 84, 46, 46, 85, 0, 0, 84, 84, 84, 84, 84, 84, -1, -1, -1, -1, -1, -1, 30, 30, 31, 31, 35, 35, 84, 84, 84, 84, 41, 41, 84, 84, 84, 84, 2, 2, 12, 12, 19, 19, 84, 84, 84, 84, 42, 42, 43, 43, 84, 84, 47, 47, 38, 38, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
