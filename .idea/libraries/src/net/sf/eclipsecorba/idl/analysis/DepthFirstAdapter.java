/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.analysis;

import java.util.*;
import net.sf.eclipsecorba.idl.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getPSpecification().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inASpecification(ASpecification node)
    {
        defaultIn(node);
    }

    public void outASpecification(ASpecification node)
    {
        defaultOut(node);
    }

    public void caseASpecification(ASpecification node)
    {
        inASpecification(node);
        {
            Object temp[] = node.getDefinition().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PDefinition) temp[i]).apply(this);
            }
        }
        outASpecification(node);
    }

    public void inATypeDclDefinition(ATypeDclDefinition node)
    {
        defaultIn(node);
    }

    public void outATypeDclDefinition(ATypeDclDefinition node)
    {
        defaultOut(node);
    }

    public void caseATypeDclDefinition(ATypeDclDefinition node)
    {
        inATypeDclDefinition(node);
        if(node.getTypeDcl() != null)
        {
            node.getTypeDcl().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outATypeDclDefinition(node);
    }

    public void inATypePrefixDefinition(ATypePrefixDefinition node)
    {
        defaultIn(node);
    }

    public void outATypePrefixDefinition(ATypePrefixDefinition node)
    {
        defaultOut(node);
    }

    public void caseATypePrefixDefinition(ATypePrefixDefinition node)
    {
        inATypePrefixDefinition(node);
        if(node.getTypePrefix() != null)
        {
            node.getTypePrefix().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outATypePrefixDefinition(node);
    }

    public void inATypeIdDefinition(ATypeIdDefinition node)
    {
        defaultIn(node);
    }

    public void outATypeIdDefinition(ATypeIdDefinition node)
    {
        defaultOut(node);
    }

    public void caseATypeIdDefinition(ATypeIdDefinition node)
    {
        inATypeIdDefinition(node);
        if(node.getTypeId() != null)
        {
            node.getTypeId().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outATypeIdDefinition(node);
    }

    public void inAConstDclDefinition(AConstDclDefinition node)
    {
        defaultIn(node);
    }

    public void outAConstDclDefinition(AConstDclDefinition node)
    {
        defaultOut(node);
    }

    public void caseAConstDclDefinition(AConstDclDefinition node)
    {
        inAConstDclDefinition(node);
        if(node.getConstDcl() != null)
        {
            node.getConstDcl().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAConstDclDefinition(node);
    }

    public void inAExceptDclDefinition(AExceptDclDefinition node)
    {
        defaultIn(node);
    }

    public void outAExceptDclDefinition(AExceptDclDefinition node)
    {
        defaultOut(node);
    }

    public void caseAExceptDclDefinition(AExceptDclDefinition node)
    {
        inAExceptDclDefinition(node);
        if(node.getExceptDcl() != null)
        {
            node.getExceptDcl().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAExceptDclDefinition(node);
    }

    public void inAIdlInterfaceDefinition(AIdlInterfaceDefinition node)
    {
        defaultIn(node);
    }

    public void outAIdlInterfaceDefinition(AIdlInterfaceDefinition node)
    {
        defaultOut(node);
    }

    public void caseAIdlInterfaceDefinition(AIdlInterfaceDefinition node)
    {
        inAIdlInterfaceDefinition(node);
        if(node.getIdlInterface() != null)
        {
            node.getIdlInterface().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIdlInterfaceDefinition(node);
    }

    public void inAIdlModuleDefinition(AIdlModuleDefinition node)
    {
        defaultIn(node);
    }

    public void outAIdlModuleDefinition(AIdlModuleDefinition node)
    {
        defaultOut(node);
    }

    public void caseAIdlModuleDefinition(AIdlModuleDefinition node)
    {
        inAIdlModuleDefinition(node);
        if(node.getIdlModule() != null)
        {
            node.getIdlModule().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAIdlModuleDefinition(node);
    }

    public void inAValueDefinition(AValueDefinition node)
    {
        defaultIn(node);
    }

    public void outAValueDefinition(AValueDefinition node)
    {
        defaultOut(node);
    }

    public void caseAValueDefinition(AValueDefinition node)
    {
        inAValueDefinition(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAValueDefinition(node);
    }

    public void inATypeDeclaratorTypeDcl(ATypeDeclaratorTypeDcl node)
    {
        defaultIn(node);
    }

    public void outATypeDeclaratorTypeDcl(ATypeDeclaratorTypeDcl node)
    {
        defaultOut(node);
    }

    public void caseATypeDeclaratorTypeDcl(ATypeDeclaratorTypeDcl node)
    {
        inATypeDeclaratorTypeDcl(node);
        if(node.getTypeDeclarator() != null)
        {
            node.getTypeDeclarator().apply(this);
        }
        outATypeDeclaratorTypeDcl(node);
    }

    public void inAStructTypeDcl(AStructTypeDcl node)
    {
        defaultIn(node);
    }

    public void outAStructTypeDcl(AStructTypeDcl node)
    {
        defaultOut(node);
    }

    public void caseAStructTypeDcl(AStructTypeDcl node)
    {
        inAStructTypeDcl(node);
        if(node.getStructType() != null)
        {
            node.getStructType().apply(this);
        }
        outAStructTypeDcl(node);
    }

    public void inAUnionTypeDcl(AUnionTypeDcl node)
    {
        defaultIn(node);
    }

    public void outAUnionTypeDcl(AUnionTypeDcl node)
    {
        defaultOut(node);
    }

    public void caseAUnionTypeDcl(AUnionTypeDcl node)
    {
        inAUnionTypeDcl(node);
        if(node.getUnionType() != null)
        {
            node.getUnionType().apply(this);
        }
        outAUnionTypeDcl(node);
    }

    public void inAEnumTypeDcl(AEnumTypeDcl node)
    {
        defaultIn(node);
    }

    public void outAEnumTypeDcl(AEnumTypeDcl node)
    {
        defaultOut(node);
    }

    public void caseAEnumTypeDcl(AEnumTypeDcl node)
    {
        inAEnumTypeDcl(node);
        if(node.getEnumType() != null)
        {
            node.getEnumType().apply(this);
        }
        outAEnumTypeDcl(node);
    }

    public void inAIdentifierTypeDcl(AIdentifierTypeDcl node)
    {
        defaultIn(node);
    }

    public void outAIdentifierTypeDcl(AIdentifierTypeDcl node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierTypeDcl(AIdentifierTypeDcl node)
    {
        inAIdentifierTypeDcl(node);
        if(node.getNative() != null)
        {
            node.getNative().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierTypeDcl(node);
    }

    public void inATypePrefix(ATypePrefix node)
    {
        defaultIn(node);
    }

    public void outATypePrefix(ATypePrefix node)
    {
        defaultOut(node);
    }

    public void caseATypePrefix(ATypePrefix node)
    {
        inATypePrefix(node);
        if(node.getTypeprefix() != null)
        {
            node.getTypeprefix().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outATypePrefix(node);
    }

    public void inATypeId(ATypeId node)
    {
        defaultIn(node);
    }

    public void outATypeId(ATypeId node)
    {
        defaultOut(node);
    }

    public void caseATypeId(ATypeId node)
    {
        inATypeId(node);
        if(node.getTypeid() != null)
        {
            node.getTypeid().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outATypeId(node);
    }

    public void inAConstDcl(AConstDcl node)
    {
        defaultIn(node);
    }

    public void outAConstDcl(AConstDcl node)
    {
        defaultOut(node);
    }

    public void caseAConstDcl(AConstDcl node)
    {
        inAConstDcl(node);
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        if(node.getConstType() != null)
        {
            node.getConstType().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getOrExpr() != null)
        {
            node.getOrExpr().apply(this);
        }
        outAConstDcl(node);
    }

    public void inAExceptDcl(AExceptDcl node)
    {
        defaultIn(node);
    }

    public void outAExceptDcl(AExceptDcl node)
    {
        defaultOut(node);
    }

    public void caseAExceptDcl(AExceptDcl node)
    {
        inAExceptDcl(node);
        if(node.getException() != null)
        {
            node.getException().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            Object temp[] = node.getMember().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PMember) temp[i]).apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAExceptDcl(node);
    }

    public void inAInterfaceDclIdlInterface(AInterfaceDclIdlInterface node)
    {
        defaultIn(node);
    }

    public void outAInterfaceDclIdlInterface(AInterfaceDclIdlInterface node)
    {
        defaultOut(node);
    }

    public void caseAInterfaceDclIdlInterface(AInterfaceDclIdlInterface node)
    {
        inAInterfaceDclIdlInterface(node);
        if(node.getInterfaceDcl() != null)
        {
            node.getInterfaceDcl().apply(this);
        }
        outAInterfaceDclIdlInterface(node);
    }

    public void inAForwardDclIdlInterface(AForwardDclIdlInterface node)
    {
        defaultIn(node);
    }

    public void outAForwardDclIdlInterface(AForwardDclIdlInterface node)
    {
        defaultOut(node);
    }

    public void caseAForwardDclIdlInterface(AForwardDclIdlInterface node)
    {
        inAForwardDclIdlInterface(node);
        if(node.getForwardDcl() != null)
        {
            node.getForwardDcl().apply(this);
        }
        outAForwardDclIdlInterface(node);
    }

    public void inAIdlModule(AIdlModule node)
    {
        defaultIn(node);
    }

    public void outAIdlModule(AIdlModule node)
    {
        defaultOut(node);
    }

    public void caseAIdlModule(AIdlModule node)
    {
        inAIdlModule(node);
        if(node.getModule() != null)
        {
            node.getModule().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            Object temp[] = node.getDefinition().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PDefinition) temp[i]).apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAIdlModule(node);
    }

    public void inAValueDclValue(AValueDclValue node)
    {
        defaultIn(node);
    }

    public void outAValueDclValue(AValueDclValue node)
    {
        defaultOut(node);
    }

    public void caseAValueDclValue(AValueDclValue node)
    {
        inAValueDclValue(node);
        if(node.getValueDcl() != null)
        {
            node.getValueDcl().apply(this);
        }
        outAValueDclValue(node);
    }

    public void inAValueAbsDclValue(AValueAbsDclValue node)
    {
        defaultIn(node);
    }

    public void outAValueAbsDclValue(AValueAbsDclValue node)
    {
        defaultOut(node);
    }

    public void caseAValueAbsDclValue(AValueAbsDclValue node)
    {
        inAValueAbsDclValue(node);
        if(node.getValueAbsDcl() != null)
        {
            node.getValueAbsDcl().apply(this);
        }
        outAValueAbsDclValue(node);
    }

    public void inAValueBoxDclValue(AValueBoxDclValue node)
    {
        defaultIn(node);
    }

    public void outAValueBoxDclValue(AValueBoxDclValue node)
    {
        defaultOut(node);
    }

    public void caseAValueBoxDclValue(AValueBoxDclValue node)
    {
        inAValueBoxDclValue(node);
        if(node.getValueBoxDcl() != null)
        {
            node.getValueBoxDcl().apply(this);
        }
        outAValueBoxDclValue(node);
    }

    public void inAValueForwardDclValue(AValueForwardDclValue node)
    {
        defaultIn(node);
    }

    public void outAValueForwardDclValue(AValueForwardDclValue node)
    {
        defaultOut(node);
    }

    public void caseAValueForwardDclValue(AValueForwardDclValue node)
    {
        inAValueForwardDclValue(node);
        if(node.getValueForwardDcl() != null)
        {
            node.getValueForwardDcl().apply(this);
        }
        outAValueForwardDclValue(node);
    }

    public void inAInterfaceDcl(AInterfaceDcl node)
    {
        defaultIn(node);
    }

    public void outAInterfaceDcl(AInterfaceDcl node)
    {
        defaultOut(node);
    }

    public void caseAInterfaceDcl(AInterfaceDcl node)
    {
        inAInterfaceDcl(node);
        if(node.getInterfaceHeader() != null)
        {
            node.getInterfaceHeader().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            Object temp[] = node.getExport().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExport) temp[i]).apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAInterfaceDcl(node);
    }

    public void inAForwardDcl(AForwardDcl node)
    {
        defaultIn(node);
    }

    public void outAForwardDcl(AForwardDcl node)
    {
        defaultOut(node);
    }

    public void caseAForwardDcl(AForwardDcl node)
    {
        inAForwardDcl(node);
        if(node.getInterfaceModifier() != null)
        {
            node.getInterfaceModifier().apply(this);
        }
        if(node.getInterface() != null)
        {
            node.getInterface().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAForwardDcl(node);
    }

    public void inAAbstractInterfaceModifier(AAbstractInterfaceModifier node)
    {
        defaultIn(node);
    }

    public void outAAbstractInterfaceModifier(AAbstractInterfaceModifier node)
    {
        defaultOut(node);
    }

    public void caseAAbstractInterfaceModifier(AAbstractInterfaceModifier node)
    {
        inAAbstractInterfaceModifier(node);
        if(node.getAbstract() != null)
        {
            node.getAbstract().apply(this);
        }
        outAAbstractInterfaceModifier(node);
    }

    public void inALocalInterfaceModifier(ALocalInterfaceModifier node)
    {
        defaultIn(node);
    }

    public void outALocalInterfaceModifier(ALocalInterfaceModifier node)
    {
        defaultOut(node);
    }

    public void caseALocalInterfaceModifier(ALocalInterfaceModifier node)
    {
        inALocalInterfaceModifier(node);
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        outALocalInterfaceModifier(node);
    }

    public void inAInterfaceHeader(AInterfaceHeader node)
    {
        defaultIn(node);
    }

    public void outAInterfaceHeader(AInterfaceHeader node)
    {
        defaultOut(node);
    }

    public void caseAInterfaceHeader(AInterfaceHeader node)
    {
        inAInterfaceHeader(node);
        if(node.getForwardDcl() != null)
        {
            node.getForwardDcl().apply(this);
        }
        if(node.getInterfaceInheritanceSpec() != null)
        {
            node.getInterfaceInheritanceSpec().apply(this);
        }
        outAInterfaceHeader(node);
    }

    public void inATypeDclExport(ATypeDclExport node)
    {
        defaultIn(node);
    }

    public void outATypeDclExport(ATypeDclExport node)
    {
        defaultOut(node);
    }

    public void caseATypeDclExport(ATypeDclExport node)
    {
        inATypeDclExport(node);
        if(node.getTypeDcl() != null)
        {
            node.getTypeDcl().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outATypeDclExport(node);
    }

    public void inAConstDclExport(AConstDclExport node)
    {
        defaultIn(node);
    }

    public void outAConstDclExport(AConstDclExport node)
    {
        defaultOut(node);
    }

    public void caseAConstDclExport(AConstDclExport node)
    {
        inAConstDclExport(node);
        if(node.getConstDcl() != null)
        {
            node.getConstDcl().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAConstDclExport(node);
    }

    public void inAExceptDclExport(AExceptDclExport node)
    {
        defaultIn(node);
    }

    public void outAExceptDclExport(AExceptDclExport node)
    {
        defaultOut(node);
    }

    public void caseAExceptDclExport(AExceptDclExport node)
    {
        inAExceptDclExport(node);
        if(node.getExceptDcl() != null)
        {
            node.getExceptDcl().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAExceptDclExport(node);
    }

    public void inAAttrDclExport(AAttrDclExport node)
    {
        defaultIn(node);
    }

    public void outAAttrDclExport(AAttrDclExport node)
    {
        defaultOut(node);
    }

    public void caseAAttrDclExport(AAttrDclExport node)
    {
        inAAttrDclExport(node);
        if(node.getAttrDcl() != null)
        {
            node.getAttrDcl().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAAttrDclExport(node);
    }

    public void inAOpDclExport(AOpDclExport node)
    {
        defaultIn(node);
    }

    public void outAOpDclExport(AOpDclExport node)
    {
        defaultOut(node);
    }

    public void caseAOpDclExport(AOpDclExport node)
    {
        inAOpDclExport(node);
        if(node.getOpDcl() != null)
        {
            node.getOpDcl().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAOpDclExport(node);
    }

    public void inAInterfaceInheritanceSpec(AInterfaceInheritanceSpec node)
    {
        defaultIn(node);
    }

    public void outAInterfaceInheritanceSpec(AInterfaceInheritanceSpec node)
    {
        defaultOut(node);
    }

    public void caseAInterfaceInheritanceSpec(AInterfaceInheritanceSpec node)
    {
        inAInterfaceInheritanceSpec(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        {
            Object temp[] = node.getCommaScopedName().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaScopedName) temp[i]).apply(this);
            }
        }
        outAInterfaceInheritanceSpec(node);
    }

    public void inAIdentifierScopedName(AIdentifierScopedName node)
    {
        defaultIn(node);
    }

    public void outAIdentifierScopedName(AIdentifierScopedName node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierScopedName(AIdentifierScopedName node)
    {
        inAIdentifierScopedName(node);
        if(node.getDoublecolon() != null)
        {
            node.getDoublecolon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierScopedName(node);
    }

    public void inAScopedScopedName(AScopedScopedName node)
    {
        defaultIn(node);
    }

    public void outAScopedScopedName(AScopedScopedName node)
    {
        defaultOut(node);
    }

    public void caseAScopedScopedName(AScopedScopedName node)
    {
        inAScopedScopedName(node);
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        if(node.getDoublecolon() != null)
        {
            node.getDoublecolon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAScopedScopedName(node);
    }

    public void inAValueForwardDcl(AValueForwardDcl node)
    {
        defaultIn(node);
    }

    public void outAValueForwardDcl(AValueForwardDcl node)
    {
        defaultOut(node);
    }

    public void caseAValueForwardDcl(AValueForwardDcl node)
    {
        inAValueForwardDcl(node);
        if(node.getAbstract() != null)
        {
            node.getAbstract().apply(this);
        }
        if(node.getValuetype() != null)
        {
            node.getValuetype().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAValueForwardDcl(node);
    }

    public void inAValueBoxDcl(AValueBoxDcl node)
    {
        defaultIn(node);
    }

    public void outAValueBoxDcl(AValueBoxDcl node)
    {
        defaultOut(node);
    }

    public void caseAValueBoxDcl(AValueBoxDcl node)
    {
        inAValueBoxDcl(node);
        if(node.getValuetype() != null)
        {
            node.getValuetype().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        outAValueBoxDcl(node);
    }

    public void inAValueAbsDcl(AValueAbsDcl node)
    {
        defaultIn(node);
    }

    public void outAValueAbsDcl(AValueAbsDcl node)
    {
        defaultOut(node);
    }

    public void caseAValueAbsDcl(AValueAbsDcl node)
    {
        inAValueAbsDcl(node);
        if(node.getAbstract() != null)
        {
            node.getAbstract().apply(this);
        }
        if(node.getValuetype() != null)
        {
            node.getValuetype().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getValueInheritanceSpec() != null)
        {
            node.getValueInheritanceSpec().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            Object temp[] = node.getExport().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PExport) temp[i]).apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAValueAbsDcl(node);
    }

    public void inAValueDcl(AValueDcl node)
    {
        defaultIn(node);
    }

    public void outAValueDcl(AValueDcl node)
    {
        defaultOut(node);
    }

    public void caseAValueDcl(AValueDcl node)
    {
        inAValueDcl(node);
        if(node.getValueHeader() != null)
        {
            node.getValueHeader().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            Object temp[] = node.getValueElement().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PValueElement) temp[i]).apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAValueDcl(node);
    }

    public void inAValueHeader(AValueHeader node)
    {
        defaultIn(node);
    }

    public void outAValueHeader(AValueHeader node)
    {
        defaultOut(node);
    }

    public void caseAValueHeader(AValueHeader node)
    {
        inAValueHeader(node);
        if(node.getCustom() != null)
        {
            node.getCustom().apply(this);
        }
        if(node.getValuetype() != null)
        {
            node.getValuetype().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getValueInheritanceSpec() != null)
        {
            node.getValueInheritanceSpec().apply(this);
        }
        outAValueHeader(node);
    }

    public void inANosuportValueInheritanceSpec(ANosuportValueInheritanceSpec node)
    {
        defaultIn(node);
    }

    public void outANosuportValueInheritanceSpec(ANosuportValueInheritanceSpec node)
    {
        defaultOut(node);
    }

    public void caseANosuportValueInheritanceSpec(ANosuportValueInheritanceSpec node)
    {
        inANosuportValueInheritanceSpec(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTruncatable() != null)
        {
            node.getTruncatable().apply(this);
        }
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        {
            Object temp[] = node.getCommaScopedName().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaScopedName) temp[i]).apply(this);
            }
        }
        outANosuportValueInheritanceSpec(node);
    }

    public void inASuportValueInheritanceSpec(ASuportValueInheritanceSpec node)
    {
        defaultIn(node);
    }

    public void outASuportValueInheritanceSpec(ASuportValueInheritanceSpec node)
    {
        defaultOut(node);
    }

    public void caseASuportValueInheritanceSpec(ASuportValueInheritanceSpec node)
    {
        inASuportValueInheritanceSpec(node);
        if(node.getSupports() != null)
        {
            node.getSupports().apply(this);
        }
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        {
            Object temp[] = node.getCommaScopedName().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaScopedName) temp[i]).apply(this);
            }
        }
        outASuportValueInheritanceSpec(node);
    }

    public void inAMsupportValueInheritanceSpec(AMsupportValueInheritanceSpec node)
    {
        defaultIn(node);
    }

    public void outAMsupportValueInheritanceSpec(AMsupportValueInheritanceSpec node)
    {
        defaultOut(node);
    }

    public void caseAMsupportValueInheritanceSpec(AMsupportValueInheritanceSpec node)
    {
        inAMsupportValueInheritanceSpec(node);
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTruncatable() != null)
        {
            node.getTruncatable().apply(this);
        }
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        {
            Object temp[] = node.getCommaScopedName().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaScopedName) temp[i]).apply(this);
            }
        }
        if(node.getSupports() != null)
        {
            node.getSupports().apply(this);
        }
        if(node.getSupportScoped() != null)
        {
            node.getSupportScoped().apply(this);
        }
        {
            Object temp[] = node.getSupportCommaSupport().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaScopedName) temp[i]).apply(this);
            }
        }
        outAMsupportValueInheritanceSpec(node);
    }

    public void inAExportValueElement(AExportValueElement node)
    {
        defaultIn(node);
    }

    public void outAExportValueElement(AExportValueElement node)
    {
        defaultOut(node);
    }

    public void caseAExportValueElement(AExportValueElement node)
    {
        inAExportValueElement(node);
        if(node.getExport() != null)
        {
            node.getExport().apply(this);
        }
        outAExportValueElement(node);
    }

    public void inAStateMemberValueElement(AStateMemberValueElement node)
    {
        defaultIn(node);
    }

    public void outAStateMemberValueElement(AStateMemberValueElement node)
    {
        defaultOut(node);
    }

    public void caseAStateMemberValueElement(AStateMemberValueElement node)
    {
        inAStateMemberValueElement(node);
        if(node.getStateMember() != null)
        {
            node.getStateMember().apply(this);
        }
        outAStateMemberValueElement(node);
    }

    public void inAInitDclValueElement(AInitDclValueElement node)
    {
        defaultIn(node);
    }

    public void outAInitDclValueElement(AInitDclValueElement node)
    {
        defaultOut(node);
    }

    public void caseAInitDclValueElement(AInitDclValueElement node)
    {
        inAInitDclValueElement(node);
        if(node.getInitDcl() != null)
        {
            node.getInitDcl().apply(this);
        }
        outAInitDclValueElement(node);
    }

    public void inAPublicStateMember(APublicStateMember node)
    {
        defaultIn(node);
    }

    public void outAPublicStateMember(APublicStateMember node)
    {
        defaultOut(node);
    }

    public void caseAPublicStateMember(APublicStateMember node)
    {
        inAPublicStateMember(node);
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        if(node.getDeclarators() != null)
        {
            node.getDeclarators().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPublicStateMember(node);
    }

    public void inAPrivateStateMember(APrivateStateMember node)
    {
        defaultIn(node);
    }

    public void outAPrivateStateMember(APrivateStateMember node)
    {
        defaultOut(node);
    }

    public void caseAPrivateStateMember(APrivateStateMember node)
    {
        inAPrivateStateMember(node);
        if(node.getPrivate() != null)
        {
            node.getPrivate().apply(this);
        }
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        if(node.getDeclarators() != null)
        {
            node.getDeclarators().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAPrivateStateMember(node);
    }

    public void inAInitDcl(AInitDcl node)
    {
        defaultIn(node);
    }

    public void outAInitDcl(AInitDcl node)
    {
        defaultOut(node);
    }

    public void caseAInitDcl(AInitDcl node)
    {
        inAInitDcl(node);
        if(node.getFactory() != null)
        {
            node.getFactory().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getInitParamDecls() != null)
        {
            node.getInitParamDecls().apply(this);
        }
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAInitDcl(node);
    }

    public void inAInitParamDecls(AInitParamDecls node)
    {
        defaultIn(node);
    }

    public void outAInitParamDecls(AInitParamDecls node)
    {
        defaultOut(node);
    }

    public void caseAInitParamDecls(AInitParamDecls node)
    {
        inAInitParamDecls(node);
        if(node.getInitParamDecl() != null)
        {
            node.getInitParamDecl().apply(this);
        }
        {
            Object temp[] = node.getCommaInitParamDecl().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaInitParamDecl) temp[i]).apply(this);
            }
        }
        outAInitParamDecls(node);
    }

    public void inAInitParamDecl(AInitParamDecl node)
    {
        defaultIn(node);
    }

    public void outAInitParamDecl(AInitParamDecl node)
    {
        defaultOut(node);
    }

    public void caseAInitParamDecl(AInitParamDecl node)
    {
        inAInitParamDecl(node);
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getParamTypeSpec() != null)
        {
            node.getParamTypeSpec().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAInitParamDecl(node);
    }

    public void inALongConstType(ALongConstType node)
    {
        defaultIn(node);
    }

    public void outALongConstType(ALongConstType node)
    {
        defaultOut(node);
    }

    public void caseALongConstType(ALongConstType node)
    {
        inALongConstType(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongConstType(node);
    }

    public void inAShortConstType(AShortConstType node)
    {
        defaultIn(node);
    }

    public void outAShortConstType(AShortConstType node)
    {
        defaultOut(node);
    }

    public void caseAShortConstType(AShortConstType node)
    {
        inAShortConstType(node);
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        outAShortConstType(node);
    }

    public void inALonglongConstType(ALonglongConstType node)
    {
        defaultIn(node);
    }

    public void outALonglongConstType(ALonglongConstType node)
    {
        defaultOut(node);
    }

    public void caseALonglongConstType(ALonglongConstType node)
    {
        inALonglongConstType(node);
        if(node.getSignedLonglongInt() != null)
        {
            node.getSignedLonglongInt().apply(this);
        }
        outALonglongConstType(node);
    }

    public void inAUlongConstType(AUlongConstType node)
    {
        defaultIn(node);
    }

    public void outAUlongConstType(AUlongConstType node)
    {
        defaultOut(node);
    }

    public void caseAUlongConstType(AUlongConstType node)
    {
        inAUlongConstType(node);
        if(node.getUnsignedLongInt() != null)
        {
            node.getUnsignedLongInt().apply(this);
        }
        outAUlongConstType(node);
    }

    public void inAUshortConstType(AUshortConstType node)
    {
        defaultIn(node);
    }

    public void outAUshortConstType(AUshortConstType node)
    {
        defaultOut(node);
    }

    public void caseAUshortConstType(AUshortConstType node)
    {
        inAUshortConstType(node);
        if(node.getUnsignedShortInt() != null)
        {
            node.getUnsignedShortInt().apply(this);
        }
        outAUshortConstType(node);
    }

    public void inAUlonglongConstType(AUlonglongConstType node)
    {
        defaultIn(node);
    }

    public void outAUlonglongConstType(AUlonglongConstType node)
    {
        defaultOut(node);
    }

    public void caseAUlonglongConstType(AUlonglongConstType node)
    {
        inAUlonglongConstType(node);
        if(node.getUnsignedLonglongInt() != null)
        {
            node.getUnsignedLonglongInt().apply(this);
        }
        outAUlonglongConstType(node);
    }

    public void inACharConstType(ACharConstType node)
    {
        defaultIn(node);
    }

    public void outACharConstType(ACharConstType node)
    {
        defaultOut(node);
    }

    public void caseACharConstType(ACharConstType node)
    {
        inACharConstType(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharConstType(node);
    }

    public void inAWcharConstType(AWcharConstType node)
    {
        defaultIn(node);
    }

    public void outAWcharConstType(AWcharConstType node)
    {
        defaultOut(node);
    }

    public void caseAWcharConstType(AWcharConstType node)
    {
        inAWcharConstType(node);
        if(node.getWchar() != null)
        {
            node.getWchar().apply(this);
        }
        outAWcharConstType(node);
    }

    public void inABooleanConstType(ABooleanConstType node)
    {
        defaultIn(node);
    }

    public void outABooleanConstType(ABooleanConstType node)
    {
        defaultOut(node);
    }

    public void caseABooleanConstType(ABooleanConstType node)
    {
        inABooleanConstType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanConstType(node);
    }

    public void inAFloatingPtTypeConstType(AFloatingPtTypeConstType node)
    {
        defaultIn(node);
    }

    public void outAFloatingPtTypeConstType(AFloatingPtTypeConstType node)
    {
        defaultOut(node);
    }

    public void caseAFloatingPtTypeConstType(AFloatingPtTypeConstType node)
    {
        inAFloatingPtTypeConstType(node);
        if(node.getFloatingPtType() != null)
        {
            node.getFloatingPtType().apply(this);
        }
        outAFloatingPtTypeConstType(node);
    }

    public void inAStringTypeConstType(AStringTypeConstType node)
    {
        defaultIn(node);
    }

    public void outAStringTypeConstType(AStringTypeConstType node)
    {
        defaultOut(node);
    }

    public void caseAStringTypeConstType(AStringTypeConstType node)
    {
        inAStringTypeConstType(node);
        if(node.getStringType() != null)
        {
            node.getStringType().apply(this);
        }
        outAStringTypeConstType(node);
    }

    public void inAWideStringTypeConstType(AWideStringTypeConstType node)
    {
        defaultIn(node);
    }

    public void outAWideStringTypeConstType(AWideStringTypeConstType node)
    {
        defaultOut(node);
    }

    public void caseAWideStringTypeConstType(AWideStringTypeConstType node)
    {
        inAWideStringTypeConstType(node);
        if(node.getWideStringType() != null)
        {
            node.getWideStringType().apply(this);
        }
        outAWideStringTypeConstType(node);
    }

    public void inAFixedConstType(AFixedConstType node)
    {
        defaultIn(node);
    }

    public void outAFixedConstType(AFixedConstType node)
    {
        defaultOut(node);
    }

    public void caseAFixedConstType(AFixedConstType node)
    {
        inAFixedConstType(node);
        if(node.getFixed() != null)
        {
            node.getFixed().apply(this);
        }
        outAFixedConstType(node);
    }

    public void inAScopedNameConstType(AScopedNameConstType node)
    {
        defaultIn(node);
    }

    public void outAScopedNameConstType(AScopedNameConstType node)
    {
        defaultOut(node);
    }

    public void caseAScopedNameConstType(AScopedNameConstType node)
    {
        inAScopedNameConstType(node);
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        outAScopedNameConstType(node);
    }

    public void inAOctetConstType(AOctetConstType node)
    {
        defaultIn(node);
    }

    public void outAOctetConstType(AOctetConstType node)
    {
        defaultOut(node);
    }

    public void caseAOctetConstType(AOctetConstType node)
    {
        inAOctetConstType(node);
        if(node.getOctet() != null)
        {
            node.getOctet().apply(this);
        }
        outAOctetConstType(node);
    }

    public void inAXorExprOrExpr(AXorExprOrExpr node)
    {
        defaultIn(node);
    }

    public void outAXorExprOrExpr(AXorExprOrExpr node)
    {
        defaultOut(node);
    }

    public void caseAXorExprOrExpr(AXorExprOrExpr node)
    {
        inAXorExprOrExpr(node);
        if(node.getXorExpr() != null)
        {
            node.getXorExpr().apply(this);
        }
        outAXorExprOrExpr(node);
    }

    public void inAOrOrExpr(AOrOrExpr node)
    {
        defaultIn(node);
    }

    public void outAOrOrExpr(AOrOrExpr node)
    {
        defaultOut(node);
    }

    public void caseAOrOrExpr(AOrOrExpr node)
    {
        inAOrOrExpr(node);
        if(node.getOrExpr() != null)
        {
            node.getOrExpr().apply(this);
        }
        if(node.getBitOr() != null)
        {
            node.getBitOr().apply(this);
        }
        if(node.getXorExpr() != null)
        {
            node.getXorExpr().apply(this);
        }
        outAOrOrExpr(node);
    }

    public void inAAndExprXorExpr(AAndExprXorExpr node)
    {
        defaultIn(node);
    }

    public void outAAndExprXorExpr(AAndExprXorExpr node)
    {
        defaultOut(node);
    }

    public void caseAAndExprXorExpr(AAndExprXorExpr node)
    {
        inAAndExprXorExpr(node);
        if(node.getAndExpr() != null)
        {
            node.getAndExpr().apply(this);
        }
        outAAndExprXorExpr(node);
    }

    public void inAXorXorExpr(AXorXorExpr node)
    {
        defaultIn(node);
    }

    public void outAXorXorExpr(AXorXorExpr node)
    {
        defaultOut(node);
    }

    public void caseAXorXorExpr(AXorXorExpr node)
    {
        inAXorXorExpr(node);
        if(node.getXorExpr() != null)
        {
            node.getXorExpr().apply(this);
        }
        if(node.getBitXor() != null)
        {
            node.getBitXor().apply(this);
        }
        if(node.getAndExpr() != null)
        {
            node.getAndExpr().apply(this);
        }
        outAXorXorExpr(node);
    }

    public void inAShiftExprAndExpr(AShiftExprAndExpr node)
    {
        defaultIn(node);
    }

    public void outAShiftExprAndExpr(AShiftExprAndExpr node)
    {
        defaultOut(node);
    }

    public void caseAShiftExprAndExpr(AShiftExprAndExpr node)
    {
        inAShiftExprAndExpr(node);
        if(node.getShiftExpr() != null)
        {
            node.getShiftExpr().apply(this);
        }
        outAShiftExprAndExpr(node);
    }

    public void inAAndAndExpr(AAndAndExpr node)
    {
        defaultIn(node);
    }

    public void outAAndAndExpr(AAndAndExpr node)
    {
        defaultOut(node);
    }

    public void caseAAndAndExpr(AAndAndExpr node)
    {
        inAAndAndExpr(node);
        if(node.getAndExpr() != null)
        {
            node.getAndExpr().apply(this);
        }
        if(node.getBitAnd() != null)
        {
            node.getBitAnd().apply(this);
        }
        if(node.getShiftExpr() != null)
        {
            node.getShiftExpr().apply(this);
        }
        outAAndAndExpr(node);
    }

    public void inAAddExprShiftExpr(AAddExprShiftExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExprShiftExpr(AAddExprShiftExpr node)
    {
        defaultOut(node);
    }

    public void caseAAddExprShiftExpr(AAddExprShiftExpr node)
    {
        inAAddExprShiftExpr(node);
        if(node.getAddExpr() != null)
        {
            node.getAddExpr().apply(this);
        }
        outAAddExprShiftExpr(node);
    }

    public void inAShiftRightShiftExpr(AShiftRightShiftExpr node)
    {
        defaultIn(node);
    }

    public void outAShiftRightShiftExpr(AShiftRightShiftExpr node)
    {
        defaultOut(node);
    }

    public void caseAShiftRightShiftExpr(AShiftRightShiftExpr node)
    {
        inAShiftRightShiftExpr(node);
        if(node.getShiftExpr() != null)
        {
            node.getShiftExpr().apply(this);
        }
        if(node.getShiftRight() != null)
        {
            node.getShiftRight().apply(this);
        }
        if(node.getAddExpr() != null)
        {
            node.getAddExpr().apply(this);
        }
        outAShiftRightShiftExpr(node);
    }

    public void inAShiftLeftShiftExpr(AShiftLeftShiftExpr node)
    {
        defaultIn(node);
    }

    public void outAShiftLeftShiftExpr(AShiftLeftShiftExpr node)
    {
        defaultOut(node);
    }

    public void caseAShiftLeftShiftExpr(AShiftLeftShiftExpr node)
    {
        inAShiftLeftShiftExpr(node);
        if(node.getShiftExpr() != null)
        {
            node.getShiftExpr().apply(this);
        }
        if(node.getShiftLeft() != null)
        {
            node.getShiftLeft().apply(this);
        }
        if(node.getAddExpr() != null)
        {
            node.getAddExpr().apply(this);
        }
        outAShiftLeftShiftExpr(node);
    }

    public void inAMultExprAddExpr(AMultExprAddExpr node)
    {
        defaultIn(node);
    }

    public void outAMultExprAddExpr(AMultExprAddExpr node)
    {
        defaultOut(node);
    }

    public void caseAMultExprAddExpr(AMultExprAddExpr node)
    {
        inAMultExprAddExpr(node);
        if(node.getMultExpr() != null)
        {
            node.getMultExpr().apply(this);
        }
        outAMultExprAddExpr(node);
    }

    public void inAPlusAddExpr(APlusAddExpr node)
    {
        defaultIn(node);
    }

    public void outAPlusAddExpr(APlusAddExpr node)
    {
        defaultOut(node);
    }

    public void caseAPlusAddExpr(APlusAddExpr node)
    {
        inAPlusAddExpr(node);
        if(node.getAddExpr() != null)
        {
            node.getAddExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getMultExpr() != null)
        {
            node.getMultExpr().apply(this);
        }
        outAPlusAddExpr(node);
    }

    public void inAMinusAddExpr(AMinusAddExpr node)
    {
        defaultIn(node);
    }

    public void outAMinusAddExpr(AMinusAddExpr node)
    {
        defaultOut(node);
    }

    public void caseAMinusAddExpr(AMinusAddExpr node)
    {
        inAMinusAddExpr(node);
        if(node.getAddExpr() != null)
        {
            node.getAddExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getMultExpr() != null)
        {
            node.getMultExpr().apply(this);
        }
        outAMinusAddExpr(node);
    }

    public void inAUnaryExprMultExpr(AUnaryExprMultExpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryExprMultExpr(AUnaryExprMultExpr node)
    {
        defaultOut(node);
    }

    public void caseAUnaryExprMultExpr(AUnaryExprMultExpr node)
    {
        inAUnaryExprMultExpr(node);
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outAUnaryExprMultExpr(node);
    }

    public void inAMultiplyMultExpr(AMultiplyMultExpr node)
    {
        defaultIn(node);
    }

    public void outAMultiplyMultExpr(AMultiplyMultExpr node)
    {
        defaultOut(node);
    }

    public void caseAMultiplyMultExpr(AMultiplyMultExpr node)
    {
        inAMultiplyMultExpr(node);
        if(node.getMultExpr() != null)
        {
            node.getMultExpr().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outAMultiplyMultExpr(node);
    }

    public void inADivideMultExpr(ADivideMultExpr node)
    {
        defaultIn(node);
    }

    public void outADivideMultExpr(ADivideMultExpr node)
    {
        defaultOut(node);
    }

    public void caseADivideMultExpr(ADivideMultExpr node)
    {
        inADivideMultExpr(node);
        if(node.getMultExpr() != null)
        {
            node.getMultExpr().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outADivideMultExpr(node);
    }

    public void inAModMultExpr(AModMultExpr node)
    {
        defaultIn(node);
    }

    public void outAModMultExpr(AModMultExpr node)
    {
        defaultOut(node);
    }

    public void caseAModMultExpr(AModMultExpr node)
    {
        inAModMultExpr(node);
        if(node.getMultExpr() != null)
        {
            node.getMultExpr().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getUnaryExpr() != null)
        {
            node.getUnaryExpr().apply(this);
        }
        outAModMultExpr(node);
    }

    public void inAUnaryOperatorUnaryExpr(AUnaryOperatorUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outAUnaryOperatorUnaryExpr(AUnaryOperatorUnaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAUnaryOperatorUnaryExpr(AUnaryOperatorUnaryExpr node)
    {
        inAUnaryOperatorUnaryExpr(node);
        if(node.getUnaryOperator() != null)
        {
            node.getUnaryOperator().apply(this);
        }
        if(node.getPrimaryExpr() != null)
        {
            node.getPrimaryExpr().apply(this);
        }
        outAUnaryOperatorUnaryExpr(node);
    }

    public void inAPrimaryExprUnaryExpr(APrimaryExprUnaryExpr node)
    {
        defaultIn(node);
    }

    public void outAPrimaryExprUnaryExpr(APrimaryExprUnaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAPrimaryExprUnaryExpr(APrimaryExprUnaryExpr node)
    {
        inAPrimaryExprUnaryExpr(node);
        if(node.getPrimaryExpr() != null)
        {
            node.getPrimaryExpr().apply(this);
        }
        outAPrimaryExprUnaryExpr(node);
    }

    public void inAScopedNamePrimaryExpr(AScopedNamePrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAScopedNamePrimaryExpr(AScopedNamePrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAScopedNamePrimaryExpr(AScopedNamePrimaryExpr node)
    {
        inAScopedNamePrimaryExpr(node);
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        outAScopedNamePrimaryExpr(node);
    }

    public void inALiteralPrimaryExpr(ALiteralPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outALiteralPrimaryExpr(ALiteralPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseALiteralPrimaryExpr(ALiteralPrimaryExpr node)
    {
        inALiteralPrimaryExpr(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralPrimaryExpr(node);
    }

    public void inAOrExprPrimaryExpr(AOrExprPrimaryExpr node)
    {
        defaultIn(node);
    }

    public void outAOrExprPrimaryExpr(AOrExprPrimaryExpr node)
    {
        defaultOut(node);
    }

    public void caseAOrExprPrimaryExpr(AOrExprPrimaryExpr node)
    {
        inAOrExprPrimaryExpr(node);
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getOrExpr() != null)
        {
            node.getOrExpr().apply(this);
        }
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        outAOrExprPrimaryExpr(node);
    }

    public void inAIntegerLiteral(AIntegerLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteral(AIntegerLiteral node)
    {
        defaultOut(node);
    }

    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        inAIntegerLiteral(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerLiteral(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inACharLiteral(ACharLiteral node)
    {
        defaultIn(node);
    }

    public void outACharLiteral(ACharLiteral node)
    {
        defaultOut(node);
    }

    public void caseACharLiteral(ACharLiteral node)
    {
        inACharLiteral(node);
        if(node.getCharacterLiteral() != null)
        {
            node.getCharacterLiteral().apply(this);
        }
        outACharLiteral(node);
    }

    public void inAFloatLiteral(AFloatLiteral node)
    {
        defaultIn(node);
    }

    public void outAFloatLiteral(AFloatLiteral node)
    {
        defaultOut(node);
    }

    public void caseAFloatLiteral(AFloatLiteral node)
    {
        inAFloatLiteral(node);
        if(node.getFloatingPtLiteral() != null)
        {
            node.getFloatingPtLiteral().apply(this);
        }
        outAFloatLiteral(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getBooleanLiteral() != null)
        {
            node.getBooleanLiteral().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inAWstringLiteral(AWstringLiteral node)
    {
        defaultIn(node);
    }

    public void outAWstringLiteral(AWstringLiteral node)
    {
        defaultOut(node);
    }

    public void caseAWstringLiteral(AWstringLiteral node)
    {
        inAWstringLiteral(node);
        if(node.getWideStringLiteral() != null)
        {
            node.getWideStringLiteral().apply(this);
        }
        outAWstringLiteral(node);
    }

    public void inAWcharLiteral(AWcharLiteral node)
    {
        defaultIn(node);
    }

    public void outAWcharLiteral(AWcharLiteral node)
    {
        defaultOut(node);
    }

    public void caseAWcharLiteral(AWcharLiteral node)
    {
        inAWcharLiteral(node);
        if(node.getWideCharacterLiteral() != null)
        {
            node.getWideCharacterLiteral().apply(this);
        }
        outAWcharLiteral(node);
    }

    public void inAFixedLiteral(AFixedLiteral node)
    {
        defaultIn(node);
    }

    public void outAFixedLiteral(AFixedLiteral node)
    {
        defaultOut(node);
    }

    public void caseAFixedLiteral(AFixedLiteral node)
    {
        inAFixedLiteral(node);
        if(node.getFixedPtLiteral() != null)
        {
            node.getFixedPtLiteral().apply(this);
        }
        outAFixedLiteral(node);
    }

    public void inASimpleTypeSpecTypeSpec(ASimpleTypeSpecTypeSpec node)
    {
        defaultIn(node);
    }

    public void outASimpleTypeSpecTypeSpec(ASimpleTypeSpecTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseASimpleTypeSpecTypeSpec(ASimpleTypeSpecTypeSpec node)
    {
        inASimpleTypeSpecTypeSpec(node);
        if(node.getSimpleTypeSpec() != null)
        {
            node.getSimpleTypeSpec().apply(this);
        }
        outASimpleTypeSpecTypeSpec(node);
    }

    public void inAConstrTypeSpecTypeSpec(AConstrTypeSpecTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAConstrTypeSpecTypeSpec(AConstrTypeSpecTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAConstrTypeSpecTypeSpec(AConstrTypeSpecTypeSpec node)
    {
        inAConstrTypeSpecTypeSpec(node);
        if(node.getConstrTypeSpec() != null)
        {
            node.getConstrTypeSpec().apply(this);
        }
        outAConstrTypeSpecTypeSpec(node);
    }

    public void inABaseTypeSpecSimpleTypeSpec(ABaseTypeSpecSimpleTypeSpec node)
    {
        defaultIn(node);
    }

    public void outABaseTypeSpecSimpleTypeSpec(ABaseTypeSpecSimpleTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseABaseTypeSpecSimpleTypeSpec(ABaseTypeSpecSimpleTypeSpec node)
    {
        inABaseTypeSpecSimpleTypeSpec(node);
        if(node.getBaseTypeSpec() != null)
        {
            node.getBaseTypeSpec().apply(this);
        }
        outABaseTypeSpecSimpleTypeSpec(node);
    }

    public void inATemplateTypeSpecSimpleTypeSpec(ATemplateTypeSpecSimpleTypeSpec node)
    {
        defaultIn(node);
    }

    public void outATemplateTypeSpecSimpleTypeSpec(ATemplateTypeSpecSimpleTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseATemplateTypeSpecSimpleTypeSpec(ATemplateTypeSpecSimpleTypeSpec node)
    {
        inATemplateTypeSpecSimpleTypeSpec(node);
        if(node.getTemplateTypeSpec() != null)
        {
            node.getTemplateTypeSpec().apply(this);
        }
        outATemplateTypeSpecSimpleTypeSpec(node);
    }

    public void inAScopedNameSimpleTypeSpec(AScopedNameSimpleTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAScopedNameSimpleTypeSpec(AScopedNameSimpleTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAScopedNameSimpleTypeSpec(AScopedNameSimpleTypeSpec node)
    {
        inAScopedNameSimpleTypeSpec(node);
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        outAScopedNameSimpleTypeSpec(node);
    }

    public void inAFloatBaseTypeSpec(AFloatBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAFloatBaseTypeSpec(AFloatBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAFloatBaseTypeSpec(AFloatBaseTypeSpec node)
    {
        inAFloatBaseTypeSpec(node);
        if(node.getFloatingPtType() != null)
        {
            node.getFloatingPtType().apply(this);
        }
        outAFloatBaseTypeSpec(node);
    }

    public void inALongBaseTypeSpec(ALongBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outALongBaseTypeSpec(ALongBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseALongBaseTypeSpec(ALongBaseTypeSpec node)
    {
        inALongBaseTypeSpec(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongBaseTypeSpec(node);
    }

    public void inAShortBaseTypeSpec(AShortBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAShortBaseTypeSpec(AShortBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAShortBaseTypeSpec(AShortBaseTypeSpec node)
    {
        inAShortBaseTypeSpec(node);
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        outAShortBaseTypeSpec(node);
    }

    public void inALonglongBaseTypeSpec(ALonglongBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outALonglongBaseTypeSpec(ALonglongBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseALonglongBaseTypeSpec(ALonglongBaseTypeSpec node)
    {
        inALonglongBaseTypeSpec(node);
        if(node.getSignedLonglongInt() != null)
        {
            node.getSignedLonglongInt().apply(this);
        }
        outALonglongBaseTypeSpec(node);
    }

    public void inAUlongBaseTypeSpec(AUlongBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAUlongBaseTypeSpec(AUlongBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAUlongBaseTypeSpec(AUlongBaseTypeSpec node)
    {
        inAUlongBaseTypeSpec(node);
        if(node.getUnsignedLongInt() != null)
        {
            node.getUnsignedLongInt().apply(this);
        }
        outAUlongBaseTypeSpec(node);
    }

    public void inAUshortBaseTypeSpec(AUshortBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAUshortBaseTypeSpec(AUshortBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAUshortBaseTypeSpec(AUshortBaseTypeSpec node)
    {
        inAUshortBaseTypeSpec(node);
        if(node.getUnsignedShortInt() != null)
        {
            node.getUnsignedShortInt().apply(this);
        }
        outAUshortBaseTypeSpec(node);
    }

    public void inAUlonglongBaseTypeSpec(AUlonglongBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAUlonglongBaseTypeSpec(AUlonglongBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAUlonglongBaseTypeSpec(AUlonglongBaseTypeSpec node)
    {
        inAUlonglongBaseTypeSpec(node);
        if(node.getUnsignedLonglongInt() != null)
        {
            node.getUnsignedLonglongInt().apply(this);
        }
        outAUlonglongBaseTypeSpec(node);
    }

    public void inACharBaseTypeSpec(ACharBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outACharBaseTypeSpec(ACharBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseACharBaseTypeSpec(ACharBaseTypeSpec node)
    {
        inACharBaseTypeSpec(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharBaseTypeSpec(node);
    }

    public void inAWcharBaseTypeSpec(AWcharBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAWcharBaseTypeSpec(AWcharBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAWcharBaseTypeSpec(AWcharBaseTypeSpec node)
    {
        inAWcharBaseTypeSpec(node);
        if(node.getWchar() != null)
        {
            node.getWchar().apply(this);
        }
        outAWcharBaseTypeSpec(node);
    }

    public void inABooleanBaseTypeSpec(ABooleanBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outABooleanBaseTypeSpec(ABooleanBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseABooleanBaseTypeSpec(ABooleanBaseTypeSpec node)
    {
        inABooleanBaseTypeSpec(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanBaseTypeSpec(node);
    }

    public void inAOctetBaseTypeSpec(AOctetBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAOctetBaseTypeSpec(AOctetBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAOctetBaseTypeSpec(AOctetBaseTypeSpec node)
    {
        inAOctetBaseTypeSpec(node);
        if(node.getOctet() != null)
        {
            node.getOctet().apply(this);
        }
        outAOctetBaseTypeSpec(node);
    }

    public void inAAnyBaseTypeSpec(AAnyBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAAnyBaseTypeSpec(AAnyBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAAnyBaseTypeSpec(AAnyBaseTypeSpec node)
    {
        inAAnyBaseTypeSpec(node);
        if(node.getAny() != null)
        {
            node.getAny().apply(this);
        }
        outAAnyBaseTypeSpec(node);
    }

    public void inAValuebaseBaseTypeSpec(AValuebaseBaseTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAValuebaseBaseTypeSpec(AValuebaseBaseTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAValuebaseBaseTypeSpec(AValuebaseBaseTypeSpec node)
    {
        inAValuebaseBaseTypeSpec(node);
        if(node.getValuebase() != null)
        {
            node.getValuebase().apply(this);
        }
        outAValuebaseBaseTypeSpec(node);
    }

    public void inASequenceTemplateTypeSpec(ASequenceTemplateTypeSpec node)
    {
        defaultIn(node);
    }

    public void outASequenceTemplateTypeSpec(ASequenceTemplateTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseASequenceTemplateTypeSpec(ASequenceTemplateTypeSpec node)
    {
        inASequenceTemplateTypeSpec(node);
        if(node.getSequenceType() != null)
        {
            node.getSequenceType().apply(this);
        }
        outASequenceTemplateTypeSpec(node);
    }

    public void inAStringTemplateTypeSpec(AStringTemplateTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAStringTemplateTypeSpec(AStringTemplateTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAStringTemplateTypeSpec(AStringTemplateTypeSpec node)
    {
        inAStringTemplateTypeSpec(node);
        if(node.getStringType() != null)
        {
            node.getStringType().apply(this);
        }
        outAStringTemplateTypeSpec(node);
    }

    public void inAWstringTemplateTypeSpec(AWstringTemplateTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAWstringTemplateTypeSpec(AWstringTemplateTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAWstringTemplateTypeSpec(AWstringTemplateTypeSpec node)
    {
        inAWstringTemplateTypeSpec(node);
        if(node.getWideStringType() != null)
        {
            node.getWideStringType().apply(this);
        }
        outAWstringTemplateTypeSpec(node);
    }

    public void inAFixedTemplateTypeSpec(AFixedTemplateTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAFixedTemplateTypeSpec(AFixedTemplateTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAFixedTemplateTypeSpec(AFixedTemplateTypeSpec node)
    {
        inAFixedTemplateTypeSpec(node);
        if(node.getFixedPtType() != null)
        {
            node.getFixedPtType().apply(this);
        }
        outAFixedTemplateTypeSpec(node);
    }

    public void inAStructConstrTypeSpec(AStructConstrTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAStructConstrTypeSpec(AStructConstrTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAStructConstrTypeSpec(AStructConstrTypeSpec node)
    {
        inAStructConstrTypeSpec(node);
        if(node.getStructType() != null)
        {
            node.getStructType().apply(this);
        }
        outAStructConstrTypeSpec(node);
    }

    public void inAUnionConstrTypeSpec(AUnionConstrTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAUnionConstrTypeSpec(AUnionConstrTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAUnionConstrTypeSpec(AUnionConstrTypeSpec node)
    {
        inAUnionConstrTypeSpec(node);
        if(node.getUnionType() != null)
        {
            node.getUnionType().apply(this);
        }
        outAUnionConstrTypeSpec(node);
    }

    public void inAEnumConstrTypeSpec(AEnumConstrTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAEnumConstrTypeSpec(AEnumConstrTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAEnumConstrTypeSpec(AEnumConstrTypeSpec node)
    {
        inAEnumConstrTypeSpec(node);
        if(node.getEnumType() != null)
        {
            node.getEnumType().apply(this);
        }
        outAEnumConstrTypeSpec(node);
    }

    public void inADeclarators(ADeclarators node)
    {
        defaultIn(node);
    }

    public void outADeclarators(ADeclarators node)
    {
        defaultOut(node);
    }

    public void caseADeclarators(ADeclarators node)
    {
        inADeclarators(node);
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        {
            Object temp[] = node.getCommaDeclarator().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaDeclarator) temp[i]).apply(this);
            }
        }
        outADeclarators(node);
    }

    public void inAIdentifierDeclarator(AIdentifierDeclarator node)
    {
        defaultIn(node);
    }

    public void outAIdentifierDeclarator(AIdentifierDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAIdentifierDeclarator(AIdentifierDeclarator node)
    {
        inAIdentifierDeclarator(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierDeclarator(node);
    }

    public void inAArrayDeclaratorDeclarator(AArrayDeclaratorDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayDeclaratorDeclarator(AArrayDeclaratorDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAArrayDeclaratorDeclarator(AArrayDeclaratorDeclarator node)
    {
        inAArrayDeclaratorDeclarator(node);
        if(node.getArrayDeclarator() != null)
        {
            node.getArrayDeclarator().apply(this);
        }
        outAArrayDeclaratorDeclarator(node);
    }

    public void inAForwardDclStructType(AForwardDclStructType node)
    {
        defaultIn(node);
    }

    public void outAForwardDclStructType(AForwardDclStructType node)
    {
        defaultOut(node);
    }

    public void caseAForwardDclStructType(AForwardDclStructType node)
    {
        inAForwardDclStructType(node);
        if(node.getStructForwardDcl() != null)
        {
            node.getStructForwardDcl().apply(this);
        }
        outAForwardDclStructType(node);
    }

    public void inAStructDclStructType(AStructDclStructType node)
    {
        defaultIn(node);
    }

    public void outAStructDclStructType(AStructDclStructType node)
    {
        defaultOut(node);
    }

    public void caseAStructDclStructType(AStructDclStructType node)
    {
        inAStructDclStructType(node);
        if(node.getStructDcl() != null)
        {
            node.getStructDcl().apply(this);
        }
        outAStructDclStructType(node);
    }

    public void inAStructForwardDcl(AStructForwardDcl node)
    {
        defaultIn(node);
    }

    public void outAStructForwardDcl(AStructForwardDcl node)
    {
        defaultOut(node);
    }

    public void caseAStructForwardDcl(AStructForwardDcl node)
    {
        inAStructForwardDcl(node);
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAStructForwardDcl(node);
    }

    public void inAStructDcl(AStructDcl node)
    {
        defaultIn(node);
    }

    public void outAStructDcl(AStructDcl node)
    {
        defaultOut(node);
    }

    public void caseAStructDcl(AStructDcl node)
    {
        inAStructDcl(node);
        if(node.getStruct() != null)
        {
            node.getStruct().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            Object temp[] = node.getMember().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PMember) temp[i]).apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAStructDcl(node);
    }

    public void inAMember(AMember node)
    {
        defaultIn(node);
    }

    public void outAMember(AMember node)
    {
        defaultOut(node);
    }

    public void caseAMember(AMember node)
    {
        inAMember(node);
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        if(node.getDeclarators() != null)
        {
            node.getDeclarators().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outAMember(node);
    }

    public void inAForwardDclUnionType(AForwardDclUnionType node)
    {
        defaultIn(node);
    }

    public void outAForwardDclUnionType(AForwardDclUnionType node)
    {
        defaultOut(node);
    }

    public void caseAForwardDclUnionType(AForwardDclUnionType node)
    {
        inAForwardDclUnionType(node);
        if(node.getUnionForwardDcl() != null)
        {
            node.getUnionForwardDcl().apply(this);
        }
        outAForwardDclUnionType(node);
    }

    public void inAUnionDclUnionType(AUnionDclUnionType node)
    {
        defaultIn(node);
    }

    public void outAUnionDclUnionType(AUnionDclUnionType node)
    {
        defaultOut(node);
    }

    public void caseAUnionDclUnionType(AUnionDclUnionType node)
    {
        inAUnionDclUnionType(node);
        if(node.getUnionDcl() != null)
        {
            node.getUnionDcl().apply(this);
        }
        outAUnionDclUnionType(node);
    }

    public void inAUnionForwardDcl(AUnionForwardDcl node)
    {
        defaultIn(node);
    }

    public void outAUnionForwardDcl(AUnionForwardDcl node)
    {
        defaultOut(node);
    }

    public void caseAUnionForwardDcl(AUnionForwardDcl node)
    {
        inAUnionForwardDcl(node);
        if(node.getUnion() != null)
        {
            node.getUnion().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAUnionForwardDcl(node);
    }

    public void inAUnionDcl(AUnionDcl node)
    {
        defaultIn(node);
    }

    public void outAUnionDcl(AUnionDcl node)
    {
        defaultOut(node);
    }

    public void caseAUnionDcl(AUnionDcl node)
    {
        inAUnionDcl(node);
        if(node.getUnion() != null)
        {
            node.getUnion().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSwitch() != null)
        {
            node.getSwitch().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getSwitchTypeSpec() != null)
        {
            node.getSwitchTypeSpec().apply(this);
        }
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        {
            Object temp[] = node.getCaseBody().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCaseBody) temp[i]).apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAUnionDcl(node);
    }

    public void inALongSwitchTypeSpec(ALongSwitchTypeSpec node)
    {
        defaultIn(node);
    }

    public void outALongSwitchTypeSpec(ALongSwitchTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseALongSwitchTypeSpec(ALongSwitchTypeSpec node)
    {
        inALongSwitchTypeSpec(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outALongSwitchTypeSpec(node);
    }

    public void inAShortSwitchTypeSpec(AShortSwitchTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAShortSwitchTypeSpec(AShortSwitchTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAShortSwitchTypeSpec(AShortSwitchTypeSpec node)
    {
        inAShortSwitchTypeSpec(node);
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        outAShortSwitchTypeSpec(node);
    }

    public void inALonglongSwitchTypeSpec(ALonglongSwitchTypeSpec node)
    {
        defaultIn(node);
    }

    public void outALonglongSwitchTypeSpec(ALonglongSwitchTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseALonglongSwitchTypeSpec(ALonglongSwitchTypeSpec node)
    {
        inALonglongSwitchTypeSpec(node);
        if(node.getSignedLonglongInt() != null)
        {
            node.getSignedLonglongInt().apply(this);
        }
        outALonglongSwitchTypeSpec(node);
    }

    public void inAUlongSwitchTypeSpec(AUlongSwitchTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAUlongSwitchTypeSpec(AUlongSwitchTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAUlongSwitchTypeSpec(AUlongSwitchTypeSpec node)
    {
        inAUlongSwitchTypeSpec(node);
        if(node.getUnsignedLongInt() != null)
        {
            node.getUnsignedLongInt().apply(this);
        }
        outAUlongSwitchTypeSpec(node);
    }

    public void inAUshortSwitchTypeSpec(AUshortSwitchTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAUshortSwitchTypeSpec(AUshortSwitchTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAUshortSwitchTypeSpec(AUshortSwitchTypeSpec node)
    {
        inAUshortSwitchTypeSpec(node);
        if(node.getUnsignedShortInt() != null)
        {
            node.getUnsignedShortInt().apply(this);
        }
        outAUshortSwitchTypeSpec(node);
    }

    public void inAUlonglongSwitchTypeSpec(AUlonglongSwitchTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAUlonglongSwitchTypeSpec(AUlonglongSwitchTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAUlonglongSwitchTypeSpec(AUlonglongSwitchTypeSpec node)
    {
        inAUlonglongSwitchTypeSpec(node);
        if(node.getUnsignedLonglongInt() != null)
        {
            node.getUnsignedLonglongInt().apply(this);
        }
        outAUlonglongSwitchTypeSpec(node);
    }

    public void inACharSwitchTypeSpec(ACharSwitchTypeSpec node)
    {
        defaultIn(node);
    }

    public void outACharSwitchTypeSpec(ACharSwitchTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseACharSwitchTypeSpec(ACharSwitchTypeSpec node)
    {
        inACharSwitchTypeSpec(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharSwitchTypeSpec(node);
    }

    public void inABooleanSwitchTypeSpec(ABooleanSwitchTypeSpec node)
    {
        defaultIn(node);
    }

    public void outABooleanSwitchTypeSpec(ABooleanSwitchTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseABooleanSwitchTypeSpec(ABooleanSwitchTypeSpec node)
    {
        inABooleanSwitchTypeSpec(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanSwitchTypeSpec(node);
    }

    public void inAEnumSwitchTypeSpec(AEnumSwitchTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAEnumSwitchTypeSpec(AEnumSwitchTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAEnumSwitchTypeSpec(AEnumSwitchTypeSpec node)
    {
        inAEnumSwitchTypeSpec(node);
        if(node.getEnumType() != null)
        {
            node.getEnumType().apply(this);
        }
        outAEnumSwitchTypeSpec(node);
    }

    public void inAScopedSwitchTypeSpec(AScopedSwitchTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAScopedSwitchTypeSpec(AScopedSwitchTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAScopedSwitchTypeSpec(AScopedSwitchTypeSpec node)
    {
        inAScopedSwitchTypeSpec(node);
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        outAScopedSwitchTypeSpec(node);
    }

    public void inACaseBody(ACaseBody node)
    {
        defaultIn(node);
    }

    public void outACaseBody(ACaseBody node)
    {
        defaultOut(node);
    }

    public void caseACaseBody(ACaseBody node)
    {
        inACaseBody(node);
        {
            Object temp[] = node.getCaseLabel().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCaseLabel) temp[i]).apply(this);
            }
        }
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        if(node.getSemicolon() != null)
        {
            node.getSemicolon().apply(this);
        }
        outACaseBody(node);
    }

    public void inAOrExprCaseLabel(AOrExprCaseLabel node)
    {
        defaultIn(node);
    }

    public void outAOrExprCaseLabel(AOrExprCaseLabel node)
    {
        defaultOut(node);
    }

    public void caseAOrExprCaseLabel(AOrExprCaseLabel node)
    {
        inAOrExprCaseLabel(node);
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        if(node.getOrExpr() != null)
        {
            node.getOrExpr().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outAOrExprCaseLabel(node);
    }

    public void inADefaultCaseLabel(ADefaultCaseLabel node)
    {
        defaultIn(node);
    }

    public void outADefaultCaseLabel(ADefaultCaseLabel node)
    {
        defaultOut(node);
    }

    public void caseADefaultCaseLabel(ADefaultCaseLabel node)
    {
        inADefaultCaseLabel(node);
        if(node.getDefault() != null)
        {
            node.getDefault().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        outADefaultCaseLabel(node);
    }

    public void inAEnumType(AEnumType node)
    {
        defaultIn(node);
    }

    public void outAEnumType(AEnumType node)
    {
        defaultOut(node);
    }

    public void caseAEnumType(AEnumType node)
    {
        inAEnumType(node);
        if(node.getEnum() != null)
        {
            node.getEnum().apply(this);
        }
        if(node.getName() != null)
        {
            node.getName().apply(this);
        }
        if(node.getLBrace() != null)
        {
            node.getLBrace().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getCommaIdentifier().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaIdentifier) temp[i]).apply(this);
            }
        }
        if(node.getRBrace() != null)
        {
            node.getRBrace().apply(this);
        }
        outAEnumType(node);
    }

    public void inASimplePositiveSequenceType(ASimplePositiveSequenceType node)
    {
        defaultIn(node);
    }

    public void outASimplePositiveSequenceType(ASimplePositiveSequenceType node)
    {
        defaultOut(node);
    }

    public void caseASimplePositiveSequenceType(ASimplePositiveSequenceType node)
    {
        inASimplePositiveSequenceType(node);
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getSimpleTypeSpec() != null)
        {
            node.getSimpleTypeSpec().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getOrExpr() != null)
        {
            node.getOrExpr().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outASimplePositiveSequenceType(node);
    }

    public void inASimpleSequenceType(ASimpleSequenceType node)
    {
        defaultIn(node);
    }

    public void outASimpleSequenceType(ASimpleSequenceType node)
    {
        defaultOut(node);
    }

    public void caseASimpleSequenceType(ASimpleSequenceType node)
    {
        inASimpleSequenceType(node);
        if(node.getSequence() != null)
        {
            node.getSequence().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getSimpleTypeSpec() != null)
        {
            node.getSimpleTypeSpec().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outASimpleSequenceType(node);
    }

    public void inAPositiveStringType(APositiveStringType node)
    {
        defaultIn(node);
    }

    public void outAPositiveStringType(APositiveStringType node)
    {
        defaultOut(node);
    }

    public void caseAPositiveStringType(APositiveStringType node)
    {
        inAPositiveStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getOrExpr() != null)
        {
            node.getOrExpr().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAPositiveStringType(node);
    }

    public void inASimpleStringType(ASimpleStringType node)
    {
        defaultIn(node);
    }

    public void outASimpleStringType(ASimpleStringType node)
    {
        defaultOut(node);
    }

    public void caseASimpleStringType(ASimpleStringType node)
    {
        inASimpleStringType(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outASimpleStringType(node);
    }

    public void inAPositiveWideStringType(APositiveWideStringType node)
    {
        defaultIn(node);
    }

    public void outAPositiveWideStringType(APositiveWideStringType node)
    {
        defaultOut(node);
    }

    public void caseAPositiveWideStringType(APositiveWideStringType node)
    {
        inAPositiveWideStringType(node);
        if(node.getWstring() != null)
        {
            node.getWstring().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getOrExpr() != null)
        {
            node.getOrExpr().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAPositiveWideStringType(node);
    }

    public void inASimpleWideStringType(ASimpleWideStringType node)
    {
        defaultIn(node);
    }

    public void outASimpleWideStringType(ASimpleWideStringType node)
    {
        defaultOut(node);
    }

    public void caseASimpleWideStringType(ASimpleWideStringType node)
    {
        inASimpleWideStringType(node);
        if(node.getWstring() != null)
        {
            node.getWstring().apply(this);
        }
        outASimpleWideStringType(node);
    }

    public void inAArrayDeclarator(AArrayDeclarator node)
    {
        defaultIn(node);
    }

    public void outAArrayDeclarator(AArrayDeclarator node)
    {
        defaultOut(node);
    }

    public void caseAArrayDeclarator(AArrayDeclarator node)
    {
        inAArrayDeclarator(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getFixedArraySize().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PFixedArraySize) temp[i]).apply(this);
            }
        }
        outAArrayDeclarator(node);
    }

    public void inAFixedArraySize(AFixedArraySize node)
    {
        defaultIn(node);
    }

    public void outAFixedArraySize(AFixedArraySize node)
    {
        defaultOut(node);
    }

    public void caseAFixedArraySize(AFixedArraySize node)
    {
        inAFixedArraySize(node);
        if(node.getLBracket() != null)
        {
            node.getLBracket().apply(this);
        }
        if(node.getOrExpr() != null)
        {
            node.getOrExpr().apply(this);
        }
        if(node.getRBracket() != null)
        {
            node.getRBracket().apply(this);
        }
        outAFixedArraySize(node);
    }

    public void inAAttrDcl(AAttrDcl node)
    {
        defaultIn(node);
    }

    public void outAAttrDcl(AAttrDcl node)
    {
        defaultOut(node);
    }

    public void caseAAttrDcl(AAttrDcl node)
    {
        inAAttrDcl(node);
        if(node.getReadonly() != null)
        {
            node.getReadonly().apply(this);
        }
        if(node.getAttribute() != null)
        {
            node.getAttribute().apply(this);
        }
        if(node.getParamTypeSpec() != null)
        {
            node.getParamTypeSpec().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            Object temp[] = node.getCommaIdentifier().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaIdentifier) temp[i]).apply(this);
            }
        }
        outAAttrDcl(node);
    }

    public void inAOpDcl(AOpDcl node)
    {
        defaultIn(node);
    }

    public void outAOpDcl(AOpDcl node)
    {
        defaultOut(node);
    }

    public void caseAOpDcl(AOpDcl node)
    {
        inAOpDcl(node);
        if(node.getOneway() != null)
        {
            node.getOneway().apply(this);
        }
        if(node.getOpTypeSpec() != null)
        {
            node.getOpTypeSpec().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getParameterDcls() != null)
        {
            node.getParameterDcls().apply(this);
        }
        if(node.getRaisesExpr() != null)
        {
            node.getRaisesExpr().apply(this);
        }
        if(node.getContextExpr() != null)
        {
            node.getContextExpr().apply(this);
        }
        outAOpDcl(node);
    }

    public void inAParamTypeSpecOpTypeSpec(AParamTypeSpecOpTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAParamTypeSpecOpTypeSpec(AParamTypeSpecOpTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAParamTypeSpecOpTypeSpec(AParamTypeSpecOpTypeSpec node)
    {
        inAParamTypeSpecOpTypeSpec(node);
        if(node.getParamTypeSpec() != null)
        {
            node.getParamTypeSpec().apply(this);
        }
        outAParamTypeSpecOpTypeSpec(node);
    }

    public void inAVoidOpTypeSpec(AVoidOpTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAVoidOpTypeSpec(AVoidOpTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAVoidOpTypeSpec(AVoidOpTypeSpec node)
    {
        inAVoidOpTypeSpec(node);
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        outAVoidOpTypeSpec(node);
    }

    public void inAParamDclParameterDcls(AParamDclParameterDcls node)
    {
        defaultIn(node);
    }

    public void outAParamDclParameterDcls(AParamDclParameterDcls node)
    {
        defaultOut(node);
    }

    public void caseAParamDclParameterDcls(AParamDclParameterDcls node)
    {
        inAParamDclParameterDcls(node);
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getParamDcl() != null)
        {
            node.getParamDcl().apply(this);
        }
        {
            Object temp[] = node.getCommaParamDcl().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaParamDcl) temp[i]).apply(this);
            }
        }
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        outAParamDclParameterDcls(node);
    }

    public void inAEmptyParameterDcls(AEmptyParameterDcls node)
    {
        defaultIn(node);
    }

    public void outAEmptyParameterDcls(AEmptyParameterDcls node)
    {
        defaultOut(node);
    }

    public void caseAEmptyParameterDcls(AEmptyParameterDcls node)
    {
        inAEmptyParameterDcls(node);
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        outAEmptyParameterDcls(node);
    }

    public void inAParamDcl(AParamDcl node)
    {
        defaultIn(node);
    }

    public void outAParamDcl(AParamDcl node)
    {
        defaultOut(node);
    }

    public void caseAParamDcl(AParamDcl node)
    {
        inAParamDcl(node);
        if(node.getParamAttribute() != null)
        {
            node.getParamAttribute().apply(this);
        }
        if(node.getParamTypeSpec() != null)
        {
            node.getParamTypeSpec().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        outAParamDcl(node);
    }

    public void inARaisesExpr(ARaisesExpr node)
    {
        defaultIn(node);
    }

    public void outARaisesExpr(ARaisesExpr node)
    {
        defaultOut(node);
    }

    public void caseARaisesExpr(ARaisesExpr node)
    {
        inARaisesExpr(node);
        if(node.getRaises() != null)
        {
            node.getRaises().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        {
            Object temp[] = node.getCommaScopedName().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaScopedName) temp[i]).apply(this);
            }
        }
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        outARaisesExpr(node);
    }

    public void inAContextExpr(AContextExpr node)
    {
        defaultIn(node);
    }

    public void outAContextExpr(AContextExpr node)
    {
        defaultOut(node);
    }

    public void caseAContextExpr(AContextExpr node)
    {
        inAContextExpr(node);
        if(node.getContext() != null)
        {
            node.getContext().apply(this);
        }
        if(node.getLParenthese() != null)
        {
            node.getLParenthese().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        {
            Object temp[] = node.getCommaStringLiteral().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                ((PCommaStringLiteral) temp[i]).apply(this);
            }
        }
        if(node.getRParenthese() != null)
        {
            node.getRParenthese().apply(this);
        }
        outAContextExpr(node);
    }

    public void inABaseParamTypeSpec(ABaseParamTypeSpec node)
    {
        defaultIn(node);
    }

    public void outABaseParamTypeSpec(ABaseParamTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseABaseParamTypeSpec(ABaseParamTypeSpec node)
    {
        inABaseParamTypeSpec(node);
        if(node.getBaseTypeSpec() != null)
        {
            node.getBaseTypeSpec().apply(this);
        }
        outABaseParamTypeSpec(node);
    }

    public void inAStringParamTypeSpec(AStringParamTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAStringParamTypeSpec(AStringParamTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAStringParamTypeSpec(AStringParamTypeSpec node)
    {
        inAStringParamTypeSpec(node);
        if(node.getStringType() != null)
        {
            node.getStringType().apply(this);
        }
        outAStringParamTypeSpec(node);
    }

    public void inAWideParamTypeSpec(AWideParamTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAWideParamTypeSpec(AWideParamTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAWideParamTypeSpec(AWideParamTypeSpec node)
    {
        inAWideParamTypeSpec(node);
        if(node.getWideStringType() != null)
        {
            node.getWideStringType().apply(this);
        }
        outAWideParamTypeSpec(node);
    }

    public void inAScopedParamTypeSpec(AScopedParamTypeSpec node)
    {
        defaultIn(node);
    }

    public void outAScopedParamTypeSpec(AScopedParamTypeSpec node)
    {
        defaultOut(node);
    }

    public void caseAScopedParamTypeSpec(AScopedParamTypeSpec node)
    {
        inAScopedParamTypeSpec(node);
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        outAScopedParamTypeSpec(node);
    }

    public void inAFixedPtType(AFixedPtType node)
    {
        defaultIn(node);
    }

    public void outAFixedPtType(AFixedPtType node)
    {
        defaultOut(node);
    }

    public void caseAFixedPtType(AFixedPtType node)
    {
        inAFixedPtType(node);
        if(node.getFixed() != null)
        {
            node.getFixed().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getFirst() != null)
        {
            node.getFirst().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExponent() != null)
        {
            node.getExponent().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAFixedPtType(node);
    }

    public void inAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        defaultOut(node);
    }

    public void caseAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        inAMinusUnaryOperator(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusUnaryOperator(node);
    }

    public void inAPlusUnaryOperator(APlusUnaryOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusUnaryOperator(APlusUnaryOperator node)
    {
        defaultOut(node);
    }

    public void caseAPlusUnaryOperator(APlusUnaryOperator node)
    {
        inAPlusUnaryOperator(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusUnaryOperator(node);
    }

    public void inATildeUnaryOperator(ATildeUnaryOperator node)
    {
        defaultIn(node);
    }

    public void outATildeUnaryOperator(ATildeUnaryOperator node)
    {
        defaultOut(node);
    }

    public void caseATildeUnaryOperator(ATildeUnaryOperator node)
    {
        inATildeUnaryOperator(node);
        if(node.getTilde() != null)
        {
            node.getTilde().apply(this);
        }
        outATildeUnaryOperator(node);
    }

    public void inATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultOut(node);
    }

    public void caseATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        inATrueBooleanLiteral(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBooleanLiteral(node);
    }

    public void inAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultOut(node);
    }

    public void caseAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        inAFalseBooleanLiteral(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBooleanLiteral(node);
    }

    public void inAInParamAttribute(AInParamAttribute node)
    {
        defaultIn(node);
    }

    public void outAInParamAttribute(AInParamAttribute node)
    {
        defaultOut(node);
    }

    public void caseAInParamAttribute(AInParamAttribute node)
    {
        inAInParamAttribute(node);
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        outAInParamAttribute(node);
    }

    public void inAOutParamAttribute(AOutParamAttribute node)
    {
        defaultIn(node);
    }

    public void outAOutParamAttribute(AOutParamAttribute node)
    {
        defaultOut(node);
    }

    public void caseAOutParamAttribute(AOutParamAttribute node)
    {
        inAOutParamAttribute(node);
        if(node.getOut() != null)
        {
            node.getOut().apply(this);
        }
        outAOutParamAttribute(node);
    }

    public void inAInoutParamAttribute(AInoutParamAttribute node)
    {
        defaultIn(node);
    }

    public void outAInoutParamAttribute(AInoutParamAttribute node)
    {
        defaultOut(node);
    }

    public void caseAInoutParamAttribute(AInoutParamAttribute node)
    {
        inAInoutParamAttribute(node);
        if(node.getInout() != null)
        {
            node.getInout().apply(this);
        }
        outAInoutParamAttribute(node);
    }

    public void inAFloatFloatingPtType(AFloatFloatingPtType node)
    {
        defaultIn(node);
    }

    public void outAFloatFloatingPtType(AFloatFloatingPtType node)
    {
        defaultOut(node);
    }

    public void caseAFloatFloatingPtType(AFloatFloatingPtType node)
    {
        inAFloatFloatingPtType(node);
        if(node.getFloat() != null)
        {
            node.getFloat().apply(this);
        }
        outAFloatFloatingPtType(node);
    }

    public void inADoubleFloatingPtType(ADoubleFloatingPtType node)
    {
        defaultIn(node);
    }

    public void outADoubleFloatingPtType(ADoubleFloatingPtType node)
    {
        defaultOut(node);
    }

    public void caseADoubleFloatingPtType(ADoubleFloatingPtType node)
    {
        inADoubleFloatingPtType(node);
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        outADoubleFloatingPtType(node);
    }

    public void inALondDoubleFloatingPtType(ALondDoubleFloatingPtType node)
    {
        defaultIn(node);
    }

    public void outALondDoubleFloatingPtType(ALondDoubleFloatingPtType node)
    {
        defaultOut(node);
    }

    public void caseALondDoubleFloatingPtType(ALondDoubleFloatingPtType node)
    {
        inALondDoubleFloatingPtType(node);
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        if(node.getDouble() != null)
        {
            node.getDouble().apply(this);
        }
        outALondDoubleFloatingPtType(node);
    }

    public void inAUnsignedShortInt(AUnsignedShortInt node)
    {
        defaultIn(node);
    }

    public void outAUnsignedShortInt(AUnsignedShortInt node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedShortInt(AUnsignedShortInt node)
    {
        inAUnsignedShortInt(node);
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        if(node.getShort() != null)
        {
            node.getShort().apply(this);
        }
        outAUnsignedShortInt(node);
    }

    public void inAUnsignedLongInt(AUnsignedLongInt node)
    {
        defaultIn(node);
    }

    public void outAUnsignedLongInt(AUnsignedLongInt node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedLongInt(AUnsignedLongInt node)
    {
        inAUnsignedLongInt(node);
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        outAUnsignedLongInt(node);
    }

    public void inAUnsignedLonglongInt(AUnsignedLonglongInt node)
    {
        defaultIn(node);
    }

    public void outAUnsignedLonglongInt(AUnsignedLonglongInt node)
    {
        defaultOut(node);
    }

    public void caseAUnsignedLonglongInt(AUnsignedLonglongInt node)
    {
        inAUnsignedLonglongInt(node);
        if(node.getUnsigned() != null)
        {
            node.getUnsigned().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAUnsignedLonglongInt(node);
    }

    public void inASignedLonglongInt(ASignedLonglongInt node)
    {
        defaultIn(node);
    }

    public void outASignedLonglongInt(ASignedLonglongInt node)
    {
        defaultOut(node);
    }

    public void caseASignedLonglongInt(ASignedLonglongInt node)
    {
        inASignedLonglongInt(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASignedLonglongInt(node);
    }

    public void inACommaScopedName(ACommaScopedName node)
    {
        defaultIn(node);
    }

    public void outACommaScopedName(ACommaScopedName node)
    {
        defaultOut(node);
    }

    public void caseACommaScopedName(ACommaScopedName node)
    {
        inACommaScopedName(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getScopedName() != null)
        {
            node.getScopedName().apply(this);
        }
        outACommaScopedName(node);
    }

    public void inACommaIdentifier(ACommaIdentifier node)
    {
        defaultIn(node);
    }

    public void outACommaIdentifier(ACommaIdentifier node)
    {
        defaultOut(node);
    }

    public void caseACommaIdentifier(ACommaIdentifier node)
    {
        inACommaIdentifier(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outACommaIdentifier(node);
    }

    public void inACommaParamDcl(ACommaParamDcl node)
    {
        defaultIn(node);
    }

    public void outACommaParamDcl(ACommaParamDcl node)
    {
        defaultOut(node);
    }

    public void caseACommaParamDcl(ACommaParamDcl node)
    {
        inACommaParamDcl(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getParamDcl() != null)
        {
            node.getParamDcl().apply(this);
        }
        outACommaParamDcl(node);
    }

    public void inACommaDeclarator(ACommaDeclarator node)
    {
        defaultIn(node);
    }

    public void outACommaDeclarator(ACommaDeclarator node)
    {
        defaultOut(node);
    }

    public void caseACommaDeclarator(ACommaDeclarator node)
    {
        inACommaDeclarator(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getDeclarator() != null)
        {
            node.getDeclarator().apply(this);
        }
        outACommaDeclarator(node);
    }

    public void inACommaInitParamDecl(ACommaInitParamDecl node)
    {
        defaultIn(node);
    }

    public void outACommaInitParamDecl(ACommaInitParamDecl node)
    {
        defaultOut(node);
    }

    public void caseACommaInitParamDecl(ACommaInitParamDecl node)
    {
        inACommaInitParamDecl(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getInitParamDecl() != null)
        {
            node.getInitParamDecl().apply(this);
        }
        outACommaInitParamDecl(node);
    }

    public void inACommaStringLiteral(ACommaStringLiteral node)
    {
        defaultIn(node);
    }

    public void outACommaStringLiteral(ACommaStringLiteral node)
    {
        defaultOut(node);
    }

    public void caseACommaStringLiteral(ACommaStringLiteral node)
    {
        inACommaStringLiteral(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outACommaStringLiteral(node);
    }

    public void inATypeDeclarator(ATypeDeclarator node)
    {
        defaultIn(node);
    }

    public void outATypeDeclarator(ATypeDeclarator node)
    {
        defaultOut(node);
    }

    public void caseATypeDeclarator(ATypeDeclarator node)
    {
        inATypeDeclarator(node);
        if(node.getTypedef() != null)
        {
            node.getTypedef().apply(this);
        }
        if(node.getTypeSpec() != null)
        {
            node.getTypeSpec().apply(this);
        }
        if(node.getDeclarators() != null)
        {
            node.getDeclarators().apply(this);
        }
        outATypeDeclarator(node);
    }
}
