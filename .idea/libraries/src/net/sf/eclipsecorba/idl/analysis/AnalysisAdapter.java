/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.analysis;

import java.util.*;
import net.sf.eclipsecorba.idl.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseASpecification(ASpecification node)
    {
        defaultCase(node);
    }

    public void caseATypeDclDefinition(ATypeDclDefinition node)
    {
        defaultCase(node);
    }

    public void caseATypePrefixDefinition(ATypePrefixDefinition node)
    {
        defaultCase(node);
    }

    public void caseATypeIdDefinition(ATypeIdDefinition node)
    {
        defaultCase(node);
    }

    public void caseAConstDclDefinition(AConstDclDefinition node)
    {
        defaultCase(node);
    }

    public void caseAExceptDclDefinition(AExceptDclDefinition node)
    {
        defaultCase(node);
    }

    public void caseAIdlInterfaceDefinition(AIdlInterfaceDefinition node)
    {
        defaultCase(node);
    }

    public void caseAIdlModuleDefinition(AIdlModuleDefinition node)
    {
        defaultCase(node);
    }

    public void caseAValueDefinition(AValueDefinition node)
    {
        defaultCase(node);
    }

    public void caseATypeDeclaratorTypeDcl(ATypeDeclaratorTypeDcl node)
    {
        defaultCase(node);
    }

    public void caseAStructTypeDcl(AStructTypeDcl node)
    {
        defaultCase(node);
    }

    public void caseAUnionTypeDcl(AUnionTypeDcl node)
    {
        defaultCase(node);
    }

    public void caseAEnumTypeDcl(AEnumTypeDcl node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierTypeDcl(AIdentifierTypeDcl node)
    {
        defaultCase(node);
    }

    public void caseATypePrefix(ATypePrefix node)
    {
        defaultCase(node);
    }

    public void caseATypeId(ATypeId node)
    {
        defaultCase(node);
    }

    public void caseAConstDcl(AConstDcl node)
    {
        defaultCase(node);
    }

    public void caseAExceptDcl(AExceptDcl node)
    {
        defaultCase(node);
    }

    public void caseAInterfaceDclIdlInterface(AInterfaceDclIdlInterface node)
    {
        defaultCase(node);
    }

    public void caseAForwardDclIdlInterface(AForwardDclIdlInterface node)
    {
        defaultCase(node);
    }

    public void caseAIdlModule(AIdlModule node)
    {
        defaultCase(node);
    }

    public void caseAValueDclValue(AValueDclValue node)
    {
        defaultCase(node);
    }

    public void caseAValueAbsDclValue(AValueAbsDclValue node)
    {
        defaultCase(node);
    }

    public void caseAValueBoxDclValue(AValueBoxDclValue node)
    {
        defaultCase(node);
    }

    public void caseAValueForwardDclValue(AValueForwardDclValue node)
    {
        defaultCase(node);
    }

    public void caseAInterfaceDcl(AInterfaceDcl node)
    {
        defaultCase(node);
    }

    public void caseAForwardDcl(AForwardDcl node)
    {
        defaultCase(node);
    }

    public void caseAAbstractInterfaceModifier(AAbstractInterfaceModifier node)
    {
        defaultCase(node);
    }

    public void caseALocalInterfaceModifier(ALocalInterfaceModifier node)
    {
        defaultCase(node);
    }

    public void caseAInterfaceHeader(AInterfaceHeader node)
    {
        defaultCase(node);
    }

    public void caseATypeDclExport(ATypeDclExport node)
    {
        defaultCase(node);
    }

    public void caseAConstDclExport(AConstDclExport node)
    {
        defaultCase(node);
    }

    public void caseAExceptDclExport(AExceptDclExport node)
    {
        defaultCase(node);
    }

    public void caseAAttrDclExport(AAttrDclExport node)
    {
        defaultCase(node);
    }

    public void caseAOpDclExport(AOpDclExport node)
    {
        defaultCase(node);
    }

    public void caseAInterfaceInheritanceSpec(AInterfaceInheritanceSpec node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierScopedName(AIdentifierScopedName node)
    {
        defaultCase(node);
    }

    public void caseAScopedScopedName(AScopedScopedName node)
    {
        defaultCase(node);
    }

    public void caseAValueForwardDcl(AValueForwardDcl node)
    {
        defaultCase(node);
    }

    public void caseAValueBoxDcl(AValueBoxDcl node)
    {
        defaultCase(node);
    }

    public void caseAValueAbsDcl(AValueAbsDcl node)
    {
        defaultCase(node);
    }

    public void caseAValueDcl(AValueDcl node)
    {
        defaultCase(node);
    }

    public void caseAValueHeader(AValueHeader node)
    {
        defaultCase(node);
    }

    public void caseANosuportValueInheritanceSpec(ANosuportValueInheritanceSpec node)
    {
        defaultCase(node);
    }

    public void caseASuportValueInheritanceSpec(ASuportValueInheritanceSpec node)
    {
        defaultCase(node);
    }

    public void caseAMsupportValueInheritanceSpec(AMsupportValueInheritanceSpec node)
    {
        defaultCase(node);
    }

    public void caseAExportValueElement(AExportValueElement node)
    {
        defaultCase(node);
    }

    public void caseAStateMemberValueElement(AStateMemberValueElement node)
    {
        defaultCase(node);
    }

    public void caseAInitDclValueElement(AInitDclValueElement node)
    {
        defaultCase(node);
    }

    public void caseAPublicStateMember(APublicStateMember node)
    {
        defaultCase(node);
    }

    public void caseAPrivateStateMember(APrivateStateMember node)
    {
        defaultCase(node);
    }

    public void caseAInitDcl(AInitDcl node)
    {
        defaultCase(node);
    }

    public void caseAInitParamDecls(AInitParamDecls node)
    {
        defaultCase(node);
    }

    public void caseAInitParamDecl(AInitParamDecl node)
    {
        defaultCase(node);
    }

    public void caseALongConstType(ALongConstType node)
    {
        defaultCase(node);
    }

    public void caseAShortConstType(AShortConstType node)
    {
        defaultCase(node);
    }

    public void caseALonglongConstType(ALonglongConstType node)
    {
        defaultCase(node);
    }

    public void caseAUlongConstType(AUlongConstType node)
    {
        defaultCase(node);
    }

    public void caseAUshortConstType(AUshortConstType node)
    {
        defaultCase(node);
    }

    public void caseAUlonglongConstType(AUlonglongConstType node)
    {
        defaultCase(node);
    }

    public void caseACharConstType(ACharConstType node)
    {
        defaultCase(node);
    }

    public void caseAWcharConstType(AWcharConstType node)
    {
        defaultCase(node);
    }

    public void caseABooleanConstType(ABooleanConstType node)
    {
        defaultCase(node);
    }

    public void caseAFloatingPtTypeConstType(AFloatingPtTypeConstType node)
    {
        defaultCase(node);
    }

    public void caseAStringTypeConstType(AStringTypeConstType node)
    {
        defaultCase(node);
    }

    public void caseAWideStringTypeConstType(AWideStringTypeConstType node)
    {
        defaultCase(node);
    }

    public void caseAFixedConstType(AFixedConstType node)
    {
        defaultCase(node);
    }

    public void caseAScopedNameConstType(AScopedNameConstType node)
    {
        defaultCase(node);
    }

    public void caseAOctetConstType(AOctetConstType node)
    {
        defaultCase(node);
    }

    public void caseAXorExprOrExpr(AXorExprOrExpr node)
    {
        defaultCase(node);
    }

    public void caseAOrOrExpr(AOrOrExpr node)
    {
        defaultCase(node);
    }

    public void caseAAndExprXorExpr(AAndExprXorExpr node)
    {
        defaultCase(node);
    }

    public void caseAXorXorExpr(AXorXorExpr node)
    {
        defaultCase(node);
    }

    public void caseAShiftExprAndExpr(AShiftExprAndExpr node)
    {
        defaultCase(node);
    }

    public void caseAAndAndExpr(AAndAndExpr node)
    {
        defaultCase(node);
    }

    public void caseAAddExprShiftExpr(AAddExprShiftExpr node)
    {
        defaultCase(node);
    }

    public void caseAShiftRightShiftExpr(AShiftRightShiftExpr node)
    {
        defaultCase(node);
    }

    public void caseAShiftLeftShiftExpr(AShiftLeftShiftExpr node)
    {
        defaultCase(node);
    }

    public void caseAMultExprAddExpr(AMultExprAddExpr node)
    {
        defaultCase(node);
    }

    public void caseAPlusAddExpr(APlusAddExpr node)
    {
        defaultCase(node);
    }

    public void caseAMinusAddExpr(AMinusAddExpr node)
    {
        defaultCase(node);
    }

    public void caseAUnaryExprMultExpr(AUnaryExprMultExpr node)
    {
        defaultCase(node);
    }

    public void caseAMultiplyMultExpr(AMultiplyMultExpr node)
    {
        defaultCase(node);
    }

    public void caseADivideMultExpr(ADivideMultExpr node)
    {
        defaultCase(node);
    }

    public void caseAModMultExpr(AModMultExpr node)
    {
        defaultCase(node);
    }

    public void caseAUnaryOperatorUnaryExpr(AUnaryOperatorUnaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryExprUnaryExpr(APrimaryExprUnaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAScopedNamePrimaryExpr(AScopedNamePrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseALiteralPrimaryExpr(ALiteralPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAOrExprPrimaryExpr(AOrExprPrimaryExpr node)
    {
        defaultCase(node);
    }

    public void caseAIntegerLiteral(AIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseAStringLiteral(AStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseACharLiteral(ACharLiteral node)
    {
        defaultCase(node);
    }

    public void caseAFloatLiteral(AFloatLiteral node)
    {
        defaultCase(node);
    }

    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseAWstringLiteral(AWstringLiteral node)
    {
        defaultCase(node);
    }

    public void caseAWcharLiteral(AWcharLiteral node)
    {
        defaultCase(node);
    }

    public void caseAFixedLiteral(AFixedLiteral node)
    {
        defaultCase(node);
    }

    public void caseASimpleTypeSpecTypeSpec(ASimpleTypeSpecTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAConstrTypeSpecTypeSpec(AConstrTypeSpecTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseABaseTypeSpecSimpleTypeSpec(ABaseTypeSpecSimpleTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseATemplateTypeSpecSimpleTypeSpec(ATemplateTypeSpecSimpleTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAScopedNameSimpleTypeSpec(AScopedNameSimpleTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAFloatBaseTypeSpec(AFloatBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseALongBaseTypeSpec(ALongBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAShortBaseTypeSpec(AShortBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseALonglongBaseTypeSpec(ALonglongBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAUlongBaseTypeSpec(AUlongBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAUshortBaseTypeSpec(AUshortBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAUlonglongBaseTypeSpec(AUlonglongBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseACharBaseTypeSpec(ACharBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAWcharBaseTypeSpec(AWcharBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseABooleanBaseTypeSpec(ABooleanBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAOctetBaseTypeSpec(AOctetBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAAnyBaseTypeSpec(AAnyBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAValuebaseBaseTypeSpec(AValuebaseBaseTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseASequenceTemplateTypeSpec(ASequenceTemplateTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAStringTemplateTypeSpec(AStringTemplateTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAWstringTemplateTypeSpec(AWstringTemplateTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAFixedTemplateTypeSpec(AFixedTemplateTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAStructConstrTypeSpec(AStructConstrTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAUnionConstrTypeSpec(AUnionConstrTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAEnumConstrTypeSpec(AEnumConstrTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseADeclarators(ADeclarators node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierDeclarator(AIdentifierDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAArrayDeclaratorDeclarator(AArrayDeclaratorDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAForwardDclStructType(AForwardDclStructType node)
    {
        defaultCase(node);
    }

    public void caseAStructDclStructType(AStructDclStructType node)
    {
        defaultCase(node);
    }

    public void caseAStructForwardDcl(AStructForwardDcl node)
    {
        defaultCase(node);
    }

    public void caseAStructDcl(AStructDcl node)
    {
        defaultCase(node);
    }

    public void caseAMember(AMember node)
    {
        defaultCase(node);
    }

    public void caseAForwardDclUnionType(AForwardDclUnionType node)
    {
        defaultCase(node);
    }

    public void caseAUnionDclUnionType(AUnionDclUnionType node)
    {
        defaultCase(node);
    }

    public void caseAUnionForwardDcl(AUnionForwardDcl node)
    {
        defaultCase(node);
    }

    public void caseAUnionDcl(AUnionDcl node)
    {
        defaultCase(node);
    }

    public void caseALongSwitchTypeSpec(ALongSwitchTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAShortSwitchTypeSpec(AShortSwitchTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseALonglongSwitchTypeSpec(ALonglongSwitchTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAUlongSwitchTypeSpec(AUlongSwitchTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAUshortSwitchTypeSpec(AUshortSwitchTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAUlonglongSwitchTypeSpec(AUlonglongSwitchTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseACharSwitchTypeSpec(ACharSwitchTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseABooleanSwitchTypeSpec(ABooleanSwitchTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAEnumSwitchTypeSpec(AEnumSwitchTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAScopedSwitchTypeSpec(AScopedSwitchTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseACaseBody(ACaseBody node)
    {
        defaultCase(node);
    }

    public void caseAOrExprCaseLabel(AOrExprCaseLabel node)
    {
        defaultCase(node);
    }

    public void caseADefaultCaseLabel(ADefaultCaseLabel node)
    {
        defaultCase(node);
    }

    public void caseAEnumType(AEnumType node)
    {
        defaultCase(node);
    }

    public void caseASimplePositiveSequenceType(ASimplePositiveSequenceType node)
    {
        defaultCase(node);
    }

    public void caseASimpleSequenceType(ASimpleSequenceType node)
    {
        defaultCase(node);
    }

    public void caseAPositiveStringType(APositiveStringType node)
    {
        defaultCase(node);
    }

    public void caseASimpleStringType(ASimpleStringType node)
    {
        defaultCase(node);
    }

    public void caseAPositiveWideStringType(APositiveWideStringType node)
    {
        defaultCase(node);
    }

    public void caseASimpleWideStringType(ASimpleWideStringType node)
    {
        defaultCase(node);
    }

    public void caseAArrayDeclarator(AArrayDeclarator node)
    {
        defaultCase(node);
    }

    public void caseAFixedArraySize(AFixedArraySize node)
    {
        defaultCase(node);
    }

    public void caseAAttrDcl(AAttrDcl node)
    {
        defaultCase(node);
    }

    public void caseAOpDcl(AOpDcl node)
    {
        defaultCase(node);
    }

    public void caseAParamTypeSpecOpTypeSpec(AParamTypeSpecOpTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAVoidOpTypeSpec(AVoidOpTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAParamDclParameterDcls(AParamDclParameterDcls node)
    {
        defaultCase(node);
    }

    public void caseAEmptyParameterDcls(AEmptyParameterDcls node)
    {
        defaultCase(node);
    }

    public void caseAParamDcl(AParamDcl node)
    {
        defaultCase(node);
    }

    public void caseARaisesExpr(ARaisesExpr node)
    {
        defaultCase(node);
    }

    public void caseAContextExpr(AContextExpr node)
    {
        defaultCase(node);
    }

    public void caseABaseParamTypeSpec(ABaseParamTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAStringParamTypeSpec(AStringParamTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAWideParamTypeSpec(AWideParamTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAScopedParamTypeSpec(AScopedParamTypeSpec node)
    {
        defaultCase(node);
    }

    public void caseAFixedPtType(AFixedPtType node)
    {
        defaultCase(node);
    }

    public void caseAMinusUnaryOperator(AMinusUnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAPlusUnaryOperator(APlusUnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseATildeUnaryOperator(ATildeUnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultCase(node);
    }

    public void caseAInParamAttribute(AInParamAttribute node)
    {
        defaultCase(node);
    }

    public void caseAOutParamAttribute(AOutParamAttribute node)
    {
        defaultCase(node);
    }

    public void caseAInoutParamAttribute(AInoutParamAttribute node)
    {
        defaultCase(node);
    }

    public void caseAFloatFloatingPtType(AFloatFloatingPtType node)
    {
        defaultCase(node);
    }

    public void caseADoubleFloatingPtType(ADoubleFloatingPtType node)
    {
        defaultCase(node);
    }

    public void caseALondDoubleFloatingPtType(ALondDoubleFloatingPtType node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedShortInt(AUnsignedShortInt node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedLongInt(AUnsignedLongInt node)
    {
        defaultCase(node);
    }

    public void caseAUnsignedLonglongInt(AUnsignedLonglongInt node)
    {
        defaultCase(node);
    }

    public void caseASignedLonglongInt(ASignedLonglongInt node)
    {
        defaultCase(node);
    }

    public void caseACommaScopedName(ACommaScopedName node)
    {
        defaultCase(node);
    }

    public void caseACommaIdentifier(ACommaIdentifier node)
    {
        defaultCase(node);
    }

    public void caseACommaParamDcl(ACommaParamDcl node)
    {
        defaultCase(node);
    }

    public void caseACommaDeclarator(ACommaDeclarator node)
    {
        defaultCase(node);
    }

    public void caseACommaInitParamDecl(ACommaInitParamDecl node)
    {
        defaultCase(node);
    }

    public void caseACommaStringLiteral(ACommaStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseATypeDeclarator(ATypeDeclarator node)
    {
        defaultCase(node);
    }

    public void caseTAbstract(TAbstract node)
    {
        defaultCase(node);
    }

    public void caseTAny(TAny node)
    {
        defaultCase(node);
    }

    public void caseTAttribute(TAttribute node)
    {
        defaultCase(node);
    }

    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    public void caseTChar(TChar node)
    {
        defaultCase(node);
    }

    public void caseTConst(TConst node)
    {
        defaultCase(node);
    }

    public void caseTContext(TContext node)
    {
        defaultCase(node);
    }

    public void caseTCustom(TCustom node)
    {
        defaultCase(node);
    }

    public void caseTDefault(TDefault node)
    {
        defaultCase(node);
    }

    public void caseTDouble(TDouble node)
    {
        defaultCase(node);
    }

    public void caseTEnum(TEnum node)
    {
        defaultCase(node);
    }

    public void caseTException(TException node)
    {
        defaultCase(node);
    }

    public void caseTFactory(TFactory node)
    {
        defaultCase(node);
    }

    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    public void caseTFixed(TFixed node)
    {
        defaultCase(node);
    }

    public void caseTFloat(TFloat node)
    {
        defaultCase(node);
    }

    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    public void caseTInout(TInout node)
    {
        defaultCase(node);
    }

    public void caseTInterface(TInterface node)
    {
        defaultCase(node);
    }

    public void caseTLocal(TLocal node)
    {
        defaultCase(node);
    }

    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    public void caseTModule(TModule node)
    {
        defaultCase(node);
    }

    public void caseTNative(TNative node)
    {
        defaultCase(node);
    }

    public void caseTOctet(TOctet node)
    {
        defaultCase(node);
    }

    public void caseTOneway(TOneway node)
    {
        defaultCase(node);
    }

    public void caseTOut(TOut node)
    {
        defaultCase(node);
    }

    public void caseTPrivate(TPrivate node)
    {
        defaultCase(node);
    }

    public void caseTPublic(TPublic node)
    {
        defaultCase(node);
    }

    public void caseTRaises(TRaises node)
    {
        defaultCase(node);
    }

    public void caseTReadonly(TReadonly node)
    {
        defaultCase(node);
    }

    public void caseTSequence(TSequence node)
    {
        defaultCase(node);
    }

    public void caseTShort(TShort node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTStruct(TStruct node)
    {
        defaultCase(node);
    }

    public void caseTSupports(TSupports node)
    {
        defaultCase(node);
    }

    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    public void caseTTruncatable(TTruncatable node)
    {
        defaultCase(node);
    }

    public void caseTTypedef(TTypedef node)
    {
        defaultCase(node);
    }

    public void caseTUnion(TUnion node)
    {
        defaultCase(node);
    }

    public void caseTUnsigned(TUnsigned node)
    {
        defaultCase(node);
    }

    public void caseTValuebase(TValuebase node)
    {
        defaultCase(node);
    }

    public void caseTValuetype(TValuetype node)
    {
        defaultCase(node);
    }

    public void caseTVoid(TVoid node)
    {
        defaultCase(node);
    }

    public void caseTWchar(TWchar node)
    {
        defaultCase(node);
    }

    public void caseTWstring(TWstring node)
    {
        defaultCase(node);
    }

    public void caseTTypeprefix(TTypeprefix node)
    {
        defaultCase(node);
    }

    public void caseTTypeid(TTypeid node)
    {
        defaultCase(node);
    }

    public void caseTLParenthese(TLParenthese node)
    {
        defaultCase(node);
    }

    public void caseTRParenthese(TRParenthese node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTLBracket(TLBracket node)
    {
        defaultCase(node);
    }

    public void caseTRBracket(TRBracket node)
    {
        defaultCase(node);
    }

    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    public void caseTDoublecolon(TDoublecolon node)
    {
        defaultCase(node);
    }

    public void caseTAssign(TAssign node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTTilde(TTilde node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTStar(TStar node)
    {
        defaultCase(node);
    }

    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    public void caseTBitAnd(TBitAnd node)
    {
        defaultCase(node);
    }

    public void caseTBitOr(TBitOr node)
    {
        defaultCase(node);
    }

    public void caseTBitXor(TBitXor node)
    {
        defaultCase(node);
    }

    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    public void caseTShiftLeft(TShiftLeft node)
    {
        defaultCase(node);
    }

    public void caseTShiftRight(TShiftRight node)
    {
        defaultCase(node);
    }

    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    public void caseTTraditionalComment(TTraditionalComment node)
    {
        defaultCase(node);
    }

    public void caseTDocumentationComment(TDocumentationComment node)
    {
        defaultCase(node);
    }

    public void caseTEndOfLineComment(TEndOfLineComment node)
    {
        defaultCase(node);
    }

    public void caseTIntegerLiteral(TIntegerLiteral node)
    {
        defaultCase(node);
    }

    public void caseTFixedPtLiteral(TFixedPtLiteral node)
    {
        defaultCase(node);
    }

    public void caseTFloatingPtLiteral(TFloatingPtLiteral node)
    {
        defaultCase(node);
    }

    public void caseTCharacterLiteral(TCharacterLiteral node)
    {
        defaultCase(node);
    }

    public void caseTWideCharacterLiteral(TWideCharacterLiteral node)
    {
        defaultCase(node);
    }

    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseTWideStringLiteral(TWideStringLiteral node)
    {
        defaultCase(node);
    }

    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTDirective(TDirective node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
