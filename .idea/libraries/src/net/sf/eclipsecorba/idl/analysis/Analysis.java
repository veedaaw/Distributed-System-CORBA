/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.analysis;

import net.sf.eclipsecorba.idl.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);

    void caseStart(Start node);
    void caseASpecification(ASpecification node);
    void caseATypeDclDefinition(ATypeDclDefinition node);
    void caseATypePrefixDefinition(ATypePrefixDefinition node);
    void caseATypeIdDefinition(ATypeIdDefinition node);
    void caseAConstDclDefinition(AConstDclDefinition node);
    void caseAExceptDclDefinition(AExceptDclDefinition node);
    void caseAIdlInterfaceDefinition(AIdlInterfaceDefinition node);
    void caseAIdlModuleDefinition(AIdlModuleDefinition node);
    void caseAValueDefinition(AValueDefinition node);
    void caseATypeDeclaratorTypeDcl(ATypeDeclaratorTypeDcl node);
    void caseAStructTypeDcl(AStructTypeDcl node);
    void caseAUnionTypeDcl(AUnionTypeDcl node);
    void caseAEnumTypeDcl(AEnumTypeDcl node);
    void caseAIdentifierTypeDcl(AIdentifierTypeDcl node);
    void caseATypePrefix(ATypePrefix node);
    void caseATypeId(ATypeId node);
    void caseAConstDcl(AConstDcl node);
    void caseAExceptDcl(AExceptDcl node);
    void caseAInterfaceDclIdlInterface(AInterfaceDclIdlInterface node);
    void caseAForwardDclIdlInterface(AForwardDclIdlInterface node);
    void caseAIdlModule(AIdlModule node);
    void caseAValueDclValue(AValueDclValue node);
    void caseAValueAbsDclValue(AValueAbsDclValue node);
    void caseAValueBoxDclValue(AValueBoxDclValue node);
    void caseAValueForwardDclValue(AValueForwardDclValue node);
    void caseAInterfaceDcl(AInterfaceDcl node);
    void caseAForwardDcl(AForwardDcl node);
    void caseAAbstractInterfaceModifier(AAbstractInterfaceModifier node);
    void caseALocalInterfaceModifier(ALocalInterfaceModifier node);
    void caseAInterfaceHeader(AInterfaceHeader node);
    void caseATypeDclExport(ATypeDclExport node);
    void caseAConstDclExport(AConstDclExport node);
    void caseAExceptDclExport(AExceptDclExport node);
    void caseAAttrDclExport(AAttrDclExport node);
    void caseAOpDclExport(AOpDclExport node);
    void caseAInterfaceInheritanceSpec(AInterfaceInheritanceSpec node);
    void caseAIdentifierScopedName(AIdentifierScopedName node);
    void caseAScopedScopedName(AScopedScopedName node);
    void caseAValueForwardDcl(AValueForwardDcl node);
    void caseAValueBoxDcl(AValueBoxDcl node);
    void caseAValueAbsDcl(AValueAbsDcl node);
    void caseAValueDcl(AValueDcl node);
    void caseAValueHeader(AValueHeader node);
    void caseANosuportValueInheritanceSpec(ANosuportValueInheritanceSpec node);
    void caseASuportValueInheritanceSpec(ASuportValueInheritanceSpec node);
    void caseAMsupportValueInheritanceSpec(AMsupportValueInheritanceSpec node);
    void caseAExportValueElement(AExportValueElement node);
    void caseAStateMemberValueElement(AStateMemberValueElement node);
    void caseAInitDclValueElement(AInitDclValueElement node);
    void caseAPublicStateMember(APublicStateMember node);
    void caseAPrivateStateMember(APrivateStateMember node);
    void caseAInitDcl(AInitDcl node);
    void caseAInitParamDecls(AInitParamDecls node);
    void caseAInitParamDecl(AInitParamDecl node);
    void caseALongConstType(ALongConstType node);
    void caseAShortConstType(AShortConstType node);
    void caseALonglongConstType(ALonglongConstType node);
    void caseAUlongConstType(AUlongConstType node);
    void caseAUshortConstType(AUshortConstType node);
    void caseAUlonglongConstType(AUlonglongConstType node);
    void caseACharConstType(ACharConstType node);
    void caseAWcharConstType(AWcharConstType node);
    void caseABooleanConstType(ABooleanConstType node);
    void caseAFloatingPtTypeConstType(AFloatingPtTypeConstType node);
    void caseAStringTypeConstType(AStringTypeConstType node);
    void caseAWideStringTypeConstType(AWideStringTypeConstType node);
    void caseAFixedConstType(AFixedConstType node);
    void caseAScopedNameConstType(AScopedNameConstType node);
    void caseAOctetConstType(AOctetConstType node);
    void caseAXorExprOrExpr(AXorExprOrExpr node);
    void caseAOrOrExpr(AOrOrExpr node);
    void caseAAndExprXorExpr(AAndExprXorExpr node);
    void caseAXorXorExpr(AXorXorExpr node);
    void caseAShiftExprAndExpr(AShiftExprAndExpr node);
    void caseAAndAndExpr(AAndAndExpr node);
    void caseAAddExprShiftExpr(AAddExprShiftExpr node);
    void caseAShiftRightShiftExpr(AShiftRightShiftExpr node);
    void caseAShiftLeftShiftExpr(AShiftLeftShiftExpr node);
    void caseAMultExprAddExpr(AMultExprAddExpr node);
    void caseAPlusAddExpr(APlusAddExpr node);
    void caseAMinusAddExpr(AMinusAddExpr node);
    void caseAUnaryExprMultExpr(AUnaryExprMultExpr node);
    void caseAMultiplyMultExpr(AMultiplyMultExpr node);
    void caseADivideMultExpr(ADivideMultExpr node);
    void caseAModMultExpr(AModMultExpr node);
    void caseAUnaryOperatorUnaryExpr(AUnaryOperatorUnaryExpr node);
    void caseAPrimaryExprUnaryExpr(APrimaryExprUnaryExpr node);
    void caseAScopedNamePrimaryExpr(AScopedNamePrimaryExpr node);
    void caseALiteralPrimaryExpr(ALiteralPrimaryExpr node);
    void caseAOrExprPrimaryExpr(AOrExprPrimaryExpr node);
    void caseAIntegerLiteral(AIntegerLiteral node);
    void caseAStringLiteral(AStringLiteral node);
    void caseACharLiteral(ACharLiteral node);
    void caseAFloatLiteral(AFloatLiteral node);
    void caseABooleanLiteral(ABooleanLiteral node);
    void caseAWstringLiteral(AWstringLiteral node);
    void caseAWcharLiteral(AWcharLiteral node);
    void caseAFixedLiteral(AFixedLiteral node);
    void caseASimpleTypeSpecTypeSpec(ASimpleTypeSpecTypeSpec node);
    void caseAConstrTypeSpecTypeSpec(AConstrTypeSpecTypeSpec node);
    void caseABaseTypeSpecSimpleTypeSpec(ABaseTypeSpecSimpleTypeSpec node);
    void caseATemplateTypeSpecSimpleTypeSpec(ATemplateTypeSpecSimpleTypeSpec node);
    void caseAScopedNameSimpleTypeSpec(AScopedNameSimpleTypeSpec node);
    void caseAFloatBaseTypeSpec(AFloatBaseTypeSpec node);
    void caseALongBaseTypeSpec(ALongBaseTypeSpec node);
    void caseAShortBaseTypeSpec(AShortBaseTypeSpec node);
    void caseALonglongBaseTypeSpec(ALonglongBaseTypeSpec node);
    void caseAUlongBaseTypeSpec(AUlongBaseTypeSpec node);
    void caseAUshortBaseTypeSpec(AUshortBaseTypeSpec node);
    void caseAUlonglongBaseTypeSpec(AUlonglongBaseTypeSpec node);
    void caseACharBaseTypeSpec(ACharBaseTypeSpec node);
    void caseAWcharBaseTypeSpec(AWcharBaseTypeSpec node);
    void caseABooleanBaseTypeSpec(ABooleanBaseTypeSpec node);
    void caseAOctetBaseTypeSpec(AOctetBaseTypeSpec node);
    void caseAAnyBaseTypeSpec(AAnyBaseTypeSpec node);
    void caseAValuebaseBaseTypeSpec(AValuebaseBaseTypeSpec node);
    void caseASequenceTemplateTypeSpec(ASequenceTemplateTypeSpec node);
    void caseAStringTemplateTypeSpec(AStringTemplateTypeSpec node);
    void caseAWstringTemplateTypeSpec(AWstringTemplateTypeSpec node);
    void caseAFixedTemplateTypeSpec(AFixedTemplateTypeSpec node);
    void caseAStructConstrTypeSpec(AStructConstrTypeSpec node);
    void caseAUnionConstrTypeSpec(AUnionConstrTypeSpec node);
    void caseAEnumConstrTypeSpec(AEnumConstrTypeSpec node);
    void caseADeclarators(ADeclarators node);
    void caseAIdentifierDeclarator(AIdentifierDeclarator node);
    void caseAArrayDeclaratorDeclarator(AArrayDeclaratorDeclarator node);
    void caseAForwardDclStructType(AForwardDclStructType node);
    void caseAStructDclStructType(AStructDclStructType node);
    void caseAStructForwardDcl(AStructForwardDcl node);
    void caseAStructDcl(AStructDcl node);
    void caseAMember(AMember node);
    void caseAForwardDclUnionType(AForwardDclUnionType node);
    void caseAUnionDclUnionType(AUnionDclUnionType node);
    void caseAUnionForwardDcl(AUnionForwardDcl node);
    void caseAUnionDcl(AUnionDcl node);
    void caseALongSwitchTypeSpec(ALongSwitchTypeSpec node);
    void caseAShortSwitchTypeSpec(AShortSwitchTypeSpec node);
    void caseALonglongSwitchTypeSpec(ALonglongSwitchTypeSpec node);
    void caseAUlongSwitchTypeSpec(AUlongSwitchTypeSpec node);
    void caseAUshortSwitchTypeSpec(AUshortSwitchTypeSpec node);
    void caseAUlonglongSwitchTypeSpec(AUlonglongSwitchTypeSpec node);
    void caseACharSwitchTypeSpec(ACharSwitchTypeSpec node);
    void caseABooleanSwitchTypeSpec(ABooleanSwitchTypeSpec node);
    void caseAEnumSwitchTypeSpec(AEnumSwitchTypeSpec node);
    void caseAScopedSwitchTypeSpec(AScopedSwitchTypeSpec node);
    void caseACaseBody(ACaseBody node);
    void caseAOrExprCaseLabel(AOrExprCaseLabel node);
    void caseADefaultCaseLabel(ADefaultCaseLabel node);
    void caseAEnumType(AEnumType node);
    void caseASimplePositiveSequenceType(ASimplePositiveSequenceType node);
    void caseASimpleSequenceType(ASimpleSequenceType node);
    void caseAPositiveStringType(APositiveStringType node);
    void caseASimpleStringType(ASimpleStringType node);
    void caseAPositiveWideStringType(APositiveWideStringType node);
    void caseASimpleWideStringType(ASimpleWideStringType node);
    void caseAArrayDeclarator(AArrayDeclarator node);
    void caseAFixedArraySize(AFixedArraySize node);
    void caseAAttrDcl(AAttrDcl node);
    void caseAOpDcl(AOpDcl node);
    void caseAParamTypeSpecOpTypeSpec(AParamTypeSpecOpTypeSpec node);
    void caseAVoidOpTypeSpec(AVoidOpTypeSpec node);
    void caseAParamDclParameterDcls(AParamDclParameterDcls node);
    void caseAEmptyParameterDcls(AEmptyParameterDcls node);
    void caseAParamDcl(AParamDcl node);
    void caseARaisesExpr(ARaisesExpr node);
    void caseAContextExpr(AContextExpr node);
    void caseABaseParamTypeSpec(ABaseParamTypeSpec node);
    void caseAStringParamTypeSpec(AStringParamTypeSpec node);
    void caseAWideParamTypeSpec(AWideParamTypeSpec node);
    void caseAScopedParamTypeSpec(AScopedParamTypeSpec node);
    void caseAFixedPtType(AFixedPtType node);
    void caseAMinusUnaryOperator(AMinusUnaryOperator node);
    void caseAPlusUnaryOperator(APlusUnaryOperator node);
    void caseATildeUnaryOperator(ATildeUnaryOperator node);
    void caseATrueBooleanLiteral(ATrueBooleanLiteral node);
    void caseAFalseBooleanLiteral(AFalseBooleanLiteral node);
    void caseAInParamAttribute(AInParamAttribute node);
    void caseAOutParamAttribute(AOutParamAttribute node);
    void caseAInoutParamAttribute(AInoutParamAttribute node);
    void caseAFloatFloatingPtType(AFloatFloatingPtType node);
    void caseADoubleFloatingPtType(ADoubleFloatingPtType node);
    void caseALondDoubleFloatingPtType(ALondDoubleFloatingPtType node);
    void caseAUnsignedShortInt(AUnsignedShortInt node);
    void caseAUnsignedLongInt(AUnsignedLongInt node);
    void caseAUnsignedLonglongInt(AUnsignedLonglongInt node);
    void caseASignedLonglongInt(ASignedLonglongInt node);
    void caseACommaScopedName(ACommaScopedName node);
    void caseACommaIdentifier(ACommaIdentifier node);
    void caseACommaParamDcl(ACommaParamDcl node);
    void caseACommaDeclarator(ACommaDeclarator node);
    void caseACommaInitParamDecl(ACommaInitParamDecl node);
    void caseACommaStringLiteral(ACommaStringLiteral node);
    void caseATypeDeclarator(ATypeDeclarator node);

    void caseTAbstract(TAbstract node);
    void caseTAny(TAny node);
    void caseTAttribute(TAttribute node);
    void caseTBoolean(TBoolean node);
    void caseTCase(TCase node);
    void caseTChar(TChar node);
    void caseTConst(TConst node);
    void caseTContext(TContext node);
    void caseTCustom(TCustom node);
    void caseTDefault(TDefault node);
    void caseTDouble(TDouble node);
    void caseTEnum(TEnum node);
    void caseTException(TException node);
    void caseTFactory(TFactory node);
    void caseTFalse(TFalse node);
    void caseTFixed(TFixed node);
    void caseTFloat(TFloat node);
    void caseTIn(TIn node);
    void caseTInout(TInout node);
    void caseTInterface(TInterface node);
    void caseTLocal(TLocal node);
    void caseTLong(TLong node);
    void caseTModule(TModule node);
    void caseTNative(TNative node);
    void caseTOctet(TOctet node);
    void caseTOneway(TOneway node);
    void caseTOut(TOut node);
    void caseTPrivate(TPrivate node);
    void caseTPublic(TPublic node);
    void caseTRaises(TRaises node);
    void caseTReadonly(TReadonly node);
    void caseTSequence(TSequence node);
    void caseTShort(TShort node);
    void caseTString(TString node);
    void caseTStruct(TStruct node);
    void caseTSupports(TSupports node);
    void caseTSwitch(TSwitch node);
    void caseTTrue(TTrue node);
    void caseTTruncatable(TTruncatable node);
    void caseTTypedef(TTypedef node);
    void caseTUnion(TUnion node);
    void caseTUnsigned(TUnsigned node);
    void caseTValuebase(TValuebase node);
    void caseTValuetype(TValuetype node);
    void caseTVoid(TVoid node);
    void caseTWchar(TWchar node);
    void caseTWstring(TWstring node);
    void caseTTypeprefix(TTypeprefix node);
    void caseTTypeid(TTypeid node);
    void caseTLParenthese(TLParenthese node);
    void caseTRParenthese(TRParenthese node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLBracket(TLBracket node);
    void caseTRBracket(TRBracket node);
    void caseTSemicolon(TSemicolon node);
    void caseTComma(TComma node);
    void caseTColon(TColon node);
    void caseTDoublecolon(TDoublecolon node);
    void caseTAssign(TAssign node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTTilde(TTilde node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTDiv(TDiv node);
    void caseTBitAnd(TBitAnd node);
    void caseTBitOr(TBitOr node);
    void caseTBitXor(TBitXor node);
    void caseTMod(TMod node);
    void caseTShiftLeft(TShiftLeft node);
    void caseTShiftRight(TShiftRight node);
    void caseTBlank(TBlank node);
    void caseTTraditionalComment(TTraditionalComment node);
    void caseTDocumentationComment(TDocumentationComment node);
    void caseTEndOfLineComment(TEndOfLineComment node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTFixedPtLiteral(TFixedPtLiteral node);
    void caseTFloatingPtLiteral(TFloatingPtLiteral node);
    void caseTCharacterLiteral(TCharacterLiteral node);
    void caseTWideCharacterLiteral(TWideCharacterLiteral node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTWideStringLiteral(TWideStringLiteral node);
    void caseTIdentifier(TIdentifier node);
    void caseTDirective(TDirective node);
    void caseEOF(EOF node);
}
