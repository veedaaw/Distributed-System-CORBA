/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class AShiftRightShiftExpr extends PShiftExpr
{
    private PShiftExpr _shiftExpr_;
    private TShiftRight _shiftRight_;
    private PAddExpr _addExpr_;

    public AShiftRightShiftExpr()
    {
    }

    public AShiftRightShiftExpr(
        PShiftExpr _shiftExpr_,
        TShiftRight _shiftRight_,
        PAddExpr _addExpr_)
    {
        setShiftExpr(_shiftExpr_);

        setShiftRight(_shiftRight_);

        setAddExpr(_addExpr_);

    }
    public Object clone()
    {
        return new AShiftRightShiftExpr(
            (PShiftExpr) cloneNode(_shiftExpr_),
            (TShiftRight) cloneNode(_shiftRight_),
            (PAddExpr) cloneNode(_addExpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAShiftRightShiftExpr(this);
    }

    public PShiftExpr getShiftExpr()
    {
        return _shiftExpr_;
    }

    public void setShiftExpr(PShiftExpr node)
    {
        if(_shiftExpr_ != null)
        {
            _shiftExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _shiftExpr_ = node;
    }

    public TShiftRight getShiftRight()
    {
        return _shiftRight_;
    }

    public void setShiftRight(TShiftRight node)
    {
        if(_shiftRight_ != null)
        {
            _shiftRight_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _shiftRight_ = node;
    }

    public PAddExpr getAddExpr()
    {
        return _addExpr_;
    }

    public void setAddExpr(PAddExpr node)
    {
        if(_addExpr_ != null)
        {
            _addExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _addExpr_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_shiftExpr_)
            + toString(_shiftRight_)
            + toString(_addExpr_);
    }

    void removeChild(Node child)
    {
        if(_shiftExpr_ == child)
        {
            _shiftExpr_ = null;
            return;
        }

        if(_shiftRight_ == child)
        {
            _shiftRight_ = null;
            return;
        }

        if(_addExpr_ == child)
        {
            _addExpr_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_shiftExpr_ == oldChild)
        {
            setShiftExpr((PShiftExpr) newChild);
            return;
        }

        if(_shiftRight_ == oldChild)
        {
            setShiftRight((TShiftRight) newChild);
            return;
        }

        if(_addExpr_ == oldChild)
        {
            setAddExpr((PAddExpr) newChild);
            return;
        }

    }
}
