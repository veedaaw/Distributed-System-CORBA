/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class AEmptyParameterDcls extends PParameterDcls
{
    private TLParenthese _lParenthese_;
    private TRParenthese _rParenthese_;

    public AEmptyParameterDcls()
    {
    }

    public AEmptyParameterDcls(
        TLParenthese _lParenthese_,
        TRParenthese _rParenthese_)
    {
        setLParenthese(_lParenthese_);

        setRParenthese(_rParenthese_);

    }
    public Object clone()
    {
        return new AEmptyParameterDcls(
            (TLParenthese) cloneNode(_lParenthese_),
            (TRParenthese) cloneNode(_rParenthese_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEmptyParameterDcls(this);
    }

    public TLParenthese getLParenthese()
    {
        return _lParenthese_;
    }

    public void setLParenthese(TLParenthese node)
    {
        if(_lParenthese_ != null)
        {
            _lParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lParenthese_ = node;
    }

    public TRParenthese getRParenthese()
    {
        return _rParenthese_;
    }

    public void setRParenthese(TRParenthese node)
    {
        if(_rParenthese_ != null)
        {
            _rParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rParenthese_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lParenthese_)
            + toString(_rParenthese_);
    }

    void removeChild(Node child)
    {
        if(_lParenthese_ == child)
        {
            _lParenthese_ = null;
            return;
        }

        if(_rParenthese_ == child)
        {
            _rParenthese_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lParenthese_ == oldChild)
        {
            setLParenthese((TLParenthese) newChild);
            return;
        }

        if(_rParenthese_ == oldChild)
        {
            setRParenthese((TRParenthese) newChild);
            return;
        }

    }
}
