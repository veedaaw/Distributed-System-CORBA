/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class AUnionDcl extends PUnionDcl
{
    private TUnion _union_;
    private TIdentifier _identifier_;
    private TSwitch _switch_;
    private TLParenthese _lParenthese_;
    private PSwitchTypeSpec _switchTypeSpec_;
    private TRParenthese _rParenthese_;
    private TLBrace _lBrace_;
    private final LinkedList _caseBody_ = new TypedLinkedList(new CaseBody_Cast());
    private TRBrace _rBrace_;

    public AUnionDcl()
    {
    }

    public AUnionDcl(
        TUnion _union_,
        TIdentifier _identifier_,
        TSwitch _switch_,
        TLParenthese _lParenthese_,
        PSwitchTypeSpec _switchTypeSpec_,
        TRParenthese _rParenthese_,
        TLBrace _lBrace_,
        List _caseBody_,
        TRBrace _rBrace_)
    {
        setUnion(_union_);

        setIdentifier(_identifier_);

        setSwitch(_switch_);

        setLParenthese(_lParenthese_);

        setSwitchTypeSpec(_switchTypeSpec_);

        setRParenthese(_rParenthese_);

        setLBrace(_lBrace_);

        {
            this._caseBody_.clear();
            this._caseBody_.addAll(_caseBody_);
        }

        setRBrace(_rBrace_);

    }

    public AUnionDcl(
        TUnion _union_,
        TIdentifier _identifier_,
        TSwitch _switch_,
        TLParenthese _lParenthese_,
        PSwitchTypeSpec _switchTypeSpec_,
        TRParenthese _rParenthese_,
        TLBrace _lBrace_,
        XPCaseBody _caseBody_,
        TRBrace _rBrace_)
    {
        setUnion(_union_);

        setIdentifier(_identifier_);

        setSwitch(_switch_);

        setLParenthese(_lParenthese_);

        setSwitchTypeSpec(_switchTypeSpec_);

        setRParenthese(_rParenthese_);

        setLBrace(_lBrace_);

        if(_caseBody_ != null)
        {
            while(_caseBody_ instanceof X1PCaseBody)
            {
                this._caseBody_.addFirst(((X1PCaseBody) _caseBody_).getPCaseBody());
                _caseBody_ = ((X1PCaseBody) _caseBody_).getXPCaseBody();
            }
            this._caseBody_.addFirst(((X2PCaseBody) _caseBody_).getPCaseBody());
        }

        setRBrace(_rBrace_);

    }
    public Object clone()
    {
        return new AUnionDcl(
            (TUnion) cloneNode(_union_),
            (TIdentifier) cloneNode(_identifier_),
            (TSwitch) cloneNode(_switch_),
            (TLParenthese) cloneNode(_lParenthese_),
            (PSwitchTypeSpec) cloneNode(_switchTypeSpec_),
            (TRParenthese) cloneNode(_rParenthese_),
            (TLBrace) cloneNode(_lBrace_),
            cloneList(_caseBody_),
            (TRBrace) cloneNode(_rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnionDcl(this);
    }

    public TUnion getUnion()
    {
        return _union_;
    }

    public void setUnion(TUnion node)
    {
        if(_union_ != null)
        {
            _union_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _union_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TSwitch getSwitch()
    {
        return _switch_;
    }

    public void setSwitch(TSwitch node)
    {
        if(_switch_ != null)
        {
            _switch_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _switch_ = node;
    }

    public TLParenthese getLParenthese()
    {
        return _lParenthese_;
    }

    public void setLParenthese(TLParenthese node)
    {
        if(_lParenthese_ != null)
        {
            _lParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lParenthese_ = node;
    }

    public PSwitchTypeSpec getSwitchTypeSpec()
    {
        return _switchTypeSpec_;
    }

    public void setSwitchTypeSpec(PSwitchTypeSpec node)
    {
        if(_switchTypeSpec_ != null)
        {
            _switchTypeSpec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _switchTypeSpec_ = node;
    }

    public TRParenthese getRParenthese()
    {
        return _rParenthese_;
    }

    public void setRParenthese(TRParenthese node)
    {
        if(_rParenthese_ != null)
        {
            _rParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rParenthese_ = node;
    }

    public TLBrace getLBrace()
    {
        return _lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(_lBrace_ != null)
        {
            _lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBrace_ = node;
    }

    public LinkedList getCaseBody()
    {
        return _caseBody_;
    }

    public void setCaseBody(List list)
    {
        _caseBody_.clear();
        _caseBody_.addAll(list);
    }

    public TRBrace getRBrace()
    {
        return _rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(_rBrace_ != null)
        {
            _rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_union_)
            + toString(_identifier_)
            + toString(_switch_)
            + toString(_lParenthese_)
            + toString(_switchTypeSpec_)
            + toString(_rParenthese_)
            + toString(_lBrace_)
            + toString(_caseBody_)
            + toString(_rBrace_);
    }

    void removeChild(Node child)
    {
        if(_union_ == child)
        {
            _union_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_switch_ == child)
        {
            _switch_ = null;
            return;
        }

        if(_lParenthese_ == child)
        {
            _lParenthese_ = null;
            return;
        }

        if(_switchTypeSpec_ == child)
        {
            _switchTypeSpec_ = null;
            return;
        }

        if(_rParenthese_ == child)
        {
            _rParenthese_ = null;
            return;
        }

        if(_lBrace_ == child)
        {
            _lBrace_ = null;
            return;
        }

        if(_caseBody_.remove(child))
        {
            return;
        }

        if(_rBrace_ == child)
        {
            _rBrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_union_ == oldChild)
        {
            setUnion((TUnion) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_switch_ == oldChild)
        {
            setSwitch((TSwitch) newChild);
            return;
        }

        if(_lParenthese_ == oldChild)
        {
            setLParenthese((TLParenthese) newChild);
            return;
        }

        if(_switchTypeSpec_ == oldChild)
        {
            setSwitchTypeSpec((PSwitchTypeSpec) newChild);
            return;
        }

        if(_rParenthese_ == oldChild)
        {
            setRParenthese((TRParenthese) newChild);
            return;
        }

        if(_lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        for(ListIterator i = _caseBody_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

    }

    private class CaseBody_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCaseBody node = (PCaseBody) o;

            if((node.parent() != null) &&
                (node.parent() != AUnionDcl.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AUnionDcl.this))
            {
                node.parent(AUnionDcl.this);
            }

            return node;
        }
    }
}
