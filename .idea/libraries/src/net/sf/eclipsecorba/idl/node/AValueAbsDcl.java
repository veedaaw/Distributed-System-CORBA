/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class AValueAbsDcl extends PValueAbsDcl
{
    private TAbstract _abstract_;
    private TValuetype _valuetype_;
    private TIdentifier _identifier_;
    private PValueInheritanceSpec _valueInheritanceSpec_;
    private TLBrace _lBrace_;
    private final LinkedList _export_ = new TypedLinkedList(new Export_Cast());
    private TRBrace _rBrace_;

    public AValueAbsDcl()
    {
    }

    public AValueAbsDcl(
        TAbstract _abstract_,
        TValuetype _valuetype_,
        TIdentifier _identifier_,
        PValueInheritanceSpec _valueInheritanceSpec_,
        TLBrace _lBrace_,
        List _export_,
        TRBrace _rBrace_)
    {
        setAbstract(_abstract_);

        setValuetype(_valuetype_);

        setIdentifier(_identifier_);

        setValueInheritanceSpec(_valueInheritanceSpec_);

        setLBrace(_lBrace_);

        {
            this._export_.clear();
            this._export_.addAll(_export_);
        }

        setRBrace(_rBrace_);

    }

    public AValueAbsDcl(
        TAbstract _abstract_,
        TValuetype _valuetype_,
        TIdentifier _identifier_,
        PValueInheritanceSpec _valueInheritanceSpec_,
        TLBrace _lBrace_,
        XPExport _export_,
        TRBrace _rBrace_)
    {
        setAbstract(_abstract_);

        setValuetype(_valuetype_);

        setIdentifier(_identifier_);

        setValueInheritanceSpec(_valueInheritanceSpec_);

        setLBrace(_lBrace_);

        if(_export_ != null)
        {
            while(_export_ instanceof X1PExport)
            {
                this._export_.addFirst(((X1PExport) _export_).getPExport());
                _export_ = ((X1PExport) _export_).getXPExport();
            }
            this._export_.addFirst(((X2PExport) _export_).getPExport());
        }

        setRBrace(_rBrace_);

    }
    public Object clone()
    {
        return new AValueAbsDcl(
            (TAbstract) cloneNode(_abstract_),
            (TValuetype) cloneNode(_valuetype_),
            (TIdentifier) cloneNode(_identifier_),
            (PValueInheritanceSpec) cloneNode(_valueInheritanceSpec_),
            (TLBrace) cloneNode(_lBrace_),
            cloneList(_export_),
            (TRBrace) cloneNode(_rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAValueAbsDcl(this);
    }

    public TAbstract getAbstract()
    {
        return _abstract_;
    }

    public void setAbstract(TAbstract node)
    {
        if(_abstract_ != null)
        {
            _abstract_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _abstract_ = node;
    }

    public TValuetype getValuetype()
    {
        return _valuetype_;
    }

    public void setValuetype(TValuetype node)
    {
        if(_valuetype_ != null)
        {
            _valuetype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _valuetype_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public PValueInheritanceSpec getValueInheritanceSpec()
    {
        return _valueInheritanceSpec_;
    }

    public void setValueInheritanceSpec(PValueInheritanceSpec node)
    {
        if(_valueInheritanceSpec_ != null)
        {
            _valueInheritanceSpec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _valueInheritanceSpec_ = node;
    }

    public TLBrace getLBrace()
    {
        return _lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(_lBrace_ != null)
        {
            _lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBrace_ = node;
    }

    public LinkedList getExport()
    {
        return _export_;
    }

    public void setExport(List list)
    {
        _export_.clear();
        _export_.addAll(list);
    }

    public TRBrace getRBrace()
    {
        return _rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(_rBrace_ != null)
        {
            _rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_abstract_)
            + toString(_valuetype_)
            + toString(_identifier_)
            + toString(_valueInheritanceSpec_)
            + toString(_lBrace_)
            + toString(_export_)
            + toString(_rBrace_);
    }

    void removeChild(Node child)
    {
        if(_abstract_ == child)
        {
            _abstract_ = null;
            return;
        }

        if(_valuetype_ == child)
        {
            _valuetype_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_valueInheritanceSpec_ == child)
        {
            _valueInheritanceSpec_ = null;
            return;
        }

        if(_lBrace_ == child)
        {
            _lBrace_ = null;
            return;
        }

        if(_export_.remove(child))
        {
            return;
        }

        if(_rBrace_ == child)
        {
            _rBrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_abstract_ == oldChild)
        {
            setAbstract((TAbstract) newChild);
            return;
        }

        if(_valuetype_ == oldChild)
        {
            setValuetype((TValuetype) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_valueInheritanceSpec_ == oldChild)
        {
            setValueInheritanceSpec((PValueInheritanceSpec) newChild);
            return;
        }

        if(_lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        for(ListIterator i = _export_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

    }

    private class Export_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PExport node = (PExport) o;

            if((node.parent() != null) &&
                (node.parent() != AValueAbsDcl.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AValueAbsDcl.this))
            {
                node.parent(AValueAbsDcl.this);
            }

            return node;
        }
    }
}
