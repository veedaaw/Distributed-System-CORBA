/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class AConstDcl extends PConstDcl
{
    private TConst _const_;
    private PConstType _constType_;
    private TIdentifier _identifier_;
    private TAssign _assign_;
    private POrExpr _orExpr_;

    public AConstDcl()
    {
    }

    public AConstDcl(
        TConst _const_,
        PConstType _constType_,
        TIdentifier _identifier_,
        TAssign _assign_,
        POrExpr _orExpr_)
    {
        setConst(_const_);

        setConstType(_constType_);

        setIdentifier(_identifier_);

        setAssign(_assign_);

        setOrExpr(_orExpr_);

    }
    public Object clone()
    {
        return new AConstDcl(
            (TConst) cloneNode(_const_),
            (PConstType) cloneNode(_constType_),
            (TIdentifier) cloneNode(_identifier_),
            (TAssign) cloneNode(_assign_),
            (POrExpr) cloneNode(_orExpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstDcl(this);
    }

    public TConst getConst()
    {
        return _const_;
    }

    public void setConst(TConst node)
    {
        if(_const_ != null)
        {
            _const_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _const_ = node;
    }

    public PConstType getConstType()
    {
        return _constType_;
    }

    public void setConstType(PConstType node)
    {
        if(_constType_ != null)
        {
            _constType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _constType_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public TAssign getAssign()
    {
        return _assign_;
    }

    public void setAssign(TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _assign_ = node;
    }

    public POrExpr getOrExpr()
    {
        return _orExpr_;
    }

    public void setOrExpr(POrExpr node)
    {
        if(_orExpr_ != null)
        {
            _orExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _orExpr_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_const_)
            + toString(_constType_)
            + toString(_identifier_)
            + toString(_assign_)
            + toString(_orExpr_);
    }

    void removeChild(Node child)
    {
        if(_const_ == child)
        {
            _const_ = null;
            return;
        }

        if(_constType_ == child)
        {
            _constType_ = null;
            return;
        }

        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_assign_ == child)
        {
            _assign_ = null;
            return;
        }

        if(_orExpr_ == child)
        {
            _orExpr_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_const_ == oldChild)
        {
            setConst((TConst) newChild);
            return;
        }

        if(_constType_ == oldChild)
        {
            setConstType((PConstType) newChild);
            return;
        }

        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(_assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(_orExpr_ == oldChild)
        {
            setOrExpr((POrExpr) newChild);
            return;
        }

    }
}
