/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class AConstDclExport extends PExport
{
    private PConstDcl _constDcl_;
    private TSemicolon _semicolon_;

    public AConstDclExport()
    {
    }

    public AConstDclExport(
        PConstDcl _constDcl_,
        TSemicolon _semicolon_)
    {
        setConstDcl(_constDcl_);

        setSemicolon(_semicolon_);

    }
    public Object clone()
    {
        return new AConstDclExport(
            (PConstDcl) cloneNode(_constDcl_),
            (TSemicolon) cloneNode(_semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConstDclExport(this);
    }

    public PConstDcl getConstDcl()
    {
        return _constDcl_;
    }

    public void setConstDcl(PConstDcl node)
    {
        if(_constDcl_ != null)
        {
            _constDcl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _constDcl_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return _semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(_semicolon_ != null)
        {
            _semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _semicolon_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_constDcl_)
            + toString(_semicolon_);
    }

    void removeChild(Node child)
    {
        if(_constDcl_ == child)
        {
            _constDcl_ = null;
            return;
        }

        if(_semicolon_ == child)
        {
            _semicolon_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_constDcl_ == oldChild)
        {
            setConstDcl((PConstDcl) newChild);
            return;
        }

        if(_semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

    }
}
