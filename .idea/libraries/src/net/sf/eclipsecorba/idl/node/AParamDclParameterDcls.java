/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class AParamDclParameterDcls extends PParameterDcls
{
    private TLParenthese _lParenthese_;
    private PParamDcl _paramDcl_;
    private final LinkedList _commaParamDcl_ = new TypedLinkedList(new CommaParamDcl_Cast());
    private TRParenthese _rParenthese_;

    public AParamDclParameterDcls()
    {
    }

    public AParamDclParameterDcls(
        TLParenthese _lParenthese_,
        PParamDcl _paramDcl_,
        List _commaParamDcl_,
        TRParenthese _rParenthese_)
    {
        setLParenthese(_lParenthese_);

        setParamDcl(_paramDcl_);

        {
            this._commaParamDcl_.clear();
            this._commaParamDcl_.addAll(_commaParamDcl_);
        }

        setRParenthese(_rParenthese_);

    }

    public AParamDclParameterDcls(
        TLParenthese _lParenthese_,
        PParamDcl _paramDcl_,
        XPCommaParamDcl _commaParamDcl_,
        TRParenthese _rParenthese_)
    {
        setLParenthese(_lParenthese_);

        setParamDcl(_paramDcl_);

        if(_commaParamDcl_ != null)
        {
            while(_commaParamDcl_ instanceof X1PCommaParamDcl)
            {
                this._commaParamDcl_.addFirst(((X1PCommaParamDcl) _commaParamDcl_).getPCommaParamDcl());
                _commaParamDcl_ = ((X1PCommaParamDcl) _commaParamDcl_).getXPCommaParamDcl();
            }
            this._commaParamDcl_.addFirst(((X2PCommaParamDcl) _commaParamDcl_).getPCommaParamDcl());
        }

        setRParenthese(_rParenthese_);

    }
    public Object clone()
    {
        return new AParamDclParameterDcls(
            (TLParenthese) cloneNode(_lParenthese_),
            (PParamDcl) cloneNode(_paramDcl_),
            cloneList(_commaParamDcl_),
            (TRParenthese) cloneNode(_rParenthese_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParamDclParameterDcls(this);
    }

    public TLParenthese getLParenthese()
    {
        return _lParenthese_;
    }

    public void setLParenthese(TLParenthese node)
    {
        if(_lParenthese_ != null)
        {
            _lParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lParenthese_ = node;
    }

    public PParamDcl getParamDcl()
    {
        return _paramDcl_;
    }

    public void setParamDcl(PParamDcl node)
    {
        if(_paramDcl_ != null)
        {
            _paramDcl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _paramDcl_ = node;
    }

    public LinkedList getCommaParamDcl()
    {
        return _commaParamDcl_;
    }

    public void setCommaParamDcl(List list)
    {
        _commaParamDcl_.clear();
        _commaParamDcl_.addAll(list);
    }

    public TRParenthese getRParenthese()
    {
        return _rParenthese_;
    }

    public void setRParenthese(TRParenthese node)
    {
        if(_rParenthese_ != null)
        {
            _rParenthese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rParenthese_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_lParenthese_)
            + toString(_paramDcl_)
            + toString(_commaParamDcl_)
            + toString(_rParenthese_);
    }

    void removeChild(Node child)
    {
        if(_lParenthese_ == child)
        {
            _lParenthese_ = null;
            return;
        }

        if(_paramDcl_ == child)
        {
            _paramDcl_ = null;
            return;
        }

        if(_commaParamDcl_.remove(child))
        {
            return;
        }

        if(_rParenthese_ == child)
        {
            _rParenthese_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_lParenthese_ == oldChild)
        {
            setLParenthese((TLParenthese) newChild);
            return;
        }

        if(_paramDcl_ == oldChild)
        {
            setParamDcl((PParamDcl) newChild);
            return;
        }

        for(ListIterator i = _commaParamDcl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rParenthese_ == oldChild)
        {
            setRParenthese((TRParenthese) newChild);
            return;
        }

    }

    private class CommaParamDcl_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCommaParamDcl node = (PCommaParamDcl) o;

            if((node.parent() != null) &&
                (node.parent() != AParamDclParameterDcls.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AParamDclParameterDcls.this))
            {
                node.parent(AParamDclParameterDcls.this);
            }

            return node;
        }
    }
}
