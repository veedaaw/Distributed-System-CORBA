/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class AArrayDeclarator extends PArrayDeclarator
{
    private TIdentifier _identifier_;
    private final LinkedList _fixedArraySize_ = new TypedLinkedList(new FixedArraySize_Cast());

    public AArrayDeclarator()
    {
    }

    public AArrayDeclarator(
        TIdentifier _identifier_,
        List _fixedArraySize_)
    {
        setIdentifier(_identifier_);

        {
            this._fixedArraySize_.clear();
            this._fixedArraySize_.addAll(_fixedArraySize_);
        }

    }

    public AArrayDeclarator(
        TIdentifier _identifier_,
        XPFixedArraySize _fixedArraySize_)
    {
        setIdentifier(_identifier_);

        if(_fixedArraySize_ != null)
        {
            while(_fixedArraySize_ instanceof X1PFixedArraySize)
            {
                this._fixedArraySize_.addFirst(((X1PFixedArraySize) _fixedArraySize_).getPFixedArraySize());
                _fixedArraySize_ = ((X1PFixedArraySize) _fixedArraySize_).getXPFixedArraySize();
            }
            this._fixedArraySize_.addFirst(((X2PFixedArraySize) _fixedArraySize_).getPFixedArraySize());
        }

    }
    public Object clone()
    {
        return new AArrayDeclarator(
            (TIdentifier) cloneNode(_identifier_),
            cloneList(_fixedArraySize_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayDeclarator(this);
    }

    public TIdentifier getIdentifier()
    {
        return _identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(_identifier_ != null)
        {
            _identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _identifier_ = node;
    }

    public LinkedList getFixedArraySize()
    {
        return _fixedArraySize_;
    }

    public void setFixedArraySize(List list)
    {
        _fixedArraySize_.clear();
        _fixedArraySize_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_identifier_)
            + toString(_fixedArraySize_);
    }

    void removeChild(Node child)
    {
        if(_identifier_ == child)
        {
            _identifier_ = null;
            return;
        }

        if(_fixedArraySize_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        for(ListIterator i = _fixedArraySize_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class FixedArraySize_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PFixedArraySize node = (PFixedArraySize) o;

            if((node.parent() != null) &&
                (node.parent() != AArrayDeclarator.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AArrayDeclarator.this))
            {
                node.parent(AArrayDeclarator.this);
            }

            return node;
        }
    }
}
