/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class ASimplePositiveSequenceType extends PSequenceType
{
    private TSequence _sequence_;
    private TLt _lt_;
    private PSimpleTypeSpec _simpleTypeSpec_;
    private TComma _comma_;
    private POrExpr _orExpr_;
    private TGt _gt_;

    public ASimplePositiveSequenceType()
    {
    }

    public ASimplePositiveSequenceType(
        TSequence _sequence_,
        TLt _lt_,
        PSimpleTypeSpec _simpleTypeSpec_,
        TComma _comma_,
        POrExpr _orExpr_,
        TGt _gt_)
    {
        setSequence(_sequence_);

        setLt(_lt_);

        setSimpleTypeSpec(_simpleTypeSpec_);

        setComma(_comma_);

        setOrExpr(_orExpr_);

        setGt(_gt_);

    }
    public Object clone()
    {
        return new ASimplePositiveSequenceType(
            (TSequence) cloneNode(_sequence_),
            (TLt) cloneNode(_lt_),
            (PSimpleTypeSpec) cloneNode(_simpleTypeSpec_),
            (TComma) cloneNode(_comma_),
            (POrExpr) cloneNode(_orExpr_),
            (TGt) cloneNode(_gt_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASimplePositiveSequenceType(this);
    }

    public TSequence getSequence()
    {
        return _sequence_;
    }

    public void setSequence(TSequence node)
    {
        if(_sequence_ != null)
        {
            _sequence_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _sequence_ = node;
    }

    public TLt getLt()
    {
        return _lt_;
    }

    public void setLt(TLt node)
    {
        if(_lt_ != null)
        {
            _lt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lt_ = node;
    }

    public PSimpleTypeSpec getSimpleTypeSpec()
    {
        return _simpleTypeSpec_;
    }

    public void setSimpleTypeSpec(PSimpleTypeSpec node)
    {
        if(_simpleTypeSpec_ != null)
        {
            _simpleTypeSpec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _simpleTypeSpec_ = node;
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public POrExpr getOrExpr()
    {
        return _orExpr_;
    }

    public void setOrExpr(POrExpr node)
    {
        if(_orExpr_ != null)
        {
            _orExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _orExpr_ = node;
    }

    public TGt getGt()
    {
        return _gt_;
    }

    public void setGt(TGt node)
    {
        if(_gt_ != null)
        {
            _gt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _gt_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_sequence_)
            + toString(_lt_)
            + toString(_simpleTypeSpec_)
            + toString(_comma_)
            + toString(_orExpr_)
            + toString(_gt_);
    }

    void removeChild(Node child)
    {
        if(_sequence_ == child)
        {
            _sequence_ = null;
            return;
        }

        if(_lt_ == child)
        {
            _lt_ = null;
            return;
        }

        if(_simpleTypeSpec_ == child)
        {
            _simpleTypeSpec_ = null;
            return;
        }

        if(_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if(_orExpr_ == child)
        {
            _orExpr_ = null;
            return;
        }

        if(_gt_ == child)
        {
            _gt_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_sequence_ == oldChild)
        {
            setSequence((TSequence) newChild);
            return;
        }

        if(_lt_ == oldChild)
        {
            setLt((TLt) newChild);
            return;
        }

        if(_simpleTypeSpec_ == oldChild)
        {
            setSimpleTypeSpec((PSimpleTypeSpec) newChild);
            return;
        }

        if(_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(_orExpr_ == oldChild)
        {
            setOrExpr((POrExpr) newChild);
            return;
        }

        if(_gt_ == oldChild)
        {
            setGt((TGt) newChild);
            return;
        }

    }
}
