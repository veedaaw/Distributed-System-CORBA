/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class ACommaDeclarator extends PCommaDeclarator
{
    private TComma _comma_;
    private PDeclarator _declarator_;

    public ACommaDeclarator()
    {
    }

    public ACommaDeclarator(
        TComma _comma_,
        PDeclarator _declarator_)
    {
        setComma(_comma_);

        setDeclarator(_declarator_);

    }
    public Object clone()
    {
        return new ACommaDeclarator(
            (TComma) cloneNode(_comma_),
            (PDeclarator) cloneNode(_declarator_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACommaDeclarator(this);
    }

    public TComma getComma()
    {
        return _comma_;
    }

    public void setComma(TComma node)
    {
        if(_comma_ != null)
        {
            _comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _comma_ = node;
    }

    public PDeclarator getDeclarator()
    {
        return _declarator_;
    }

    public void setDeclarator(PDeclarator node)
    {
        if(_declarator_ != null)
        {
            _declarator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _declarator_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_comma_)
            + toString(_declarator_);
    }

    void removeChild(Node child)
    {
        if(_comma_ == child)
        {
            _comma_ = null;
            return;
        }

        if(_declarator_ == child)
        {
            _declarator_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(_declarator_ == oldChild)
        {
            setDeclarator((PDeclarator) newChild);
            return;
        }

    }
}
