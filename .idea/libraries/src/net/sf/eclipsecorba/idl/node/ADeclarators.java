/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class ADeclarators extends PDeclarators
{
    private PDeclarator _declarator_;
    private final LinkedList _commaDeclarator_ = new TypedLinkedList(new CommaDeclarator_Cast());

    public ADeclarators()
    {
    }

    public ADeclarators(
        PDeclarator _declarator_,
        List _commaDeclarator_)
    {
        setDeclarator(_declarator_);

        {
            this._commaDeclarator_.clear();
            this._commaDeclarator_.addAll(_commaDeclarator_);
        }

    }

    public ADeclarators(
        PDeclarator _declarator_,
        XPCommaDeclarator _commaDeclarator_)
    {
        setDeclarator(_declarator_);

        if(_commaDeclarator_ != null)
        {
            while(_commaDeclarator_ instanceof X1PCommaDeclarator)
            {
                this._commaDeclarator_.addFirst(((X1PCommaDeclarator) _commaDeclarator_).getPCommaDeclarator());
                _commaDeclarator_ = ((X1PCommaDeclarator) _commaDeclarator_).getXPCommaDeclarator();
            }
            this._commaDeclarator_.addFirst(((X2PCommaDeclarator) _commaDeclarator_).getPCommaDeclarator());
        }

    }
    public Object clone()
    {
        return new ADeclarators(
            (PDeclarator) cloneNode(_declarator_),
            cloneList(_commaDeclarator_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADeclarators(this);
    }

    public PDeclarator getDeclarator()
    {
        return _declarator_;
    }

    public void setDeclarator(PDeclarator node)
    {
        if(_declarator_ != null)
        {
            _declarator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _declarator_ = node;
    }

    public LinkedList getCommaDeclarator()
    {
        return _commaDeclarator_;
    }

    public void setCommaDeclarator(List list)
    {
        _commaDeclarator_.clear();
        _commaDeclarator_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString(_declarator_)
            + toString(_commaDeclarator_);
    }

    void removeChild(Node child)
    {
        if(_declarator_ == child)
        {
            _declarator_ = null;
            return;
        }

        if(_commaDeclarator_.remove(child))
        {
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_declarator_ == oldChild)
        {
            setDeclarator((PDeclarator) newChild);
            return;
        }

        for(ListIterator i = _commaDeclarator_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

    }

    private class CommaDeclarator_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PCommaDeclarator node = (PCommaDeclarator) o;

            if((node.parent() != null) &&
                (node.parent() != ADeclarators.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != ADeclarators.this))
            {
                node.parent(ADeclarators.this);
            }

            return node;
        }
    }
}
