/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class AValueDcl extends PValueDcl
{
    private PValueHeader _valueHeader_;
    private TLBrace _lBrace_;
    private final LinkedList _valueElement_ = new TypedLinkedList(new ValueElement_Cast());
    private TRBrace _rBrace_;

    public AValueDcl()
    {
    }

    public AValueDcl(
        PValueHeader _valueHeader_,
        TLBrace _lBrace_,
        List _valueElement_,
        TRBrace _rBrace_)
    {
        setValueHeader(_valueHeader_);

        setLBrace(_lBrace_);

        {
            this._valueElement_.clear();
            this._valueElement_.addAll(_valueElement_);
        }

        setRBrace(_rBrace_);

    }

    public AValueDcl(
        PValueHeader _valueHeader_,
        TLBrace _lBrace_,
        XPValueElement _valueElement_,
        TRBrace _rBrace_)
    {
        setValueHeader(_valueHeader_);

        setLBrace(_lBrace_);

        if(_valueElement_ != null)
        {
            while(_valueElement_ instanceof X1PValueElement)
            {
                this._valueElement_.addFirst(((X1PValueElement) _valueElement_).getPValueElement());
                _valueElement_ = ((X1PValueElement) _valueElement_).getXPValueElement();
            }
            this._valueElement_.addFirst(((X2PValueElement) _valueElement_).getPValueElement());
        }

        setRBrace(_rBrace_);

    }
    public Object clone()
    {
        return new AValueDcl(
            (PValueHeader) cloneNode(_valueHeader_),
            (TLBrace) cloneNode(_lBrace_),
            cloneList(_valueElement_),
            (TRBrace) cloneNode(_rBrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAValueDcl(this);
    }

    public PValueHeader getValueHeader()
    {
        return _valueHeader_;
    }

    public void setValueHeader(PValueHeader node)
    {
        if(_valueHeader_ != null)
        {
            _valueHeader_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _valueHeader_ = node;
    }

    public TLBrace getLBrace()
    {
        return _lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(_lBrace_ != null)
        {
            _lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _lBrace_ = node;
    }

    public LinkedList getValueElement()
    {
        return _valueElement_;
    }

    public void setValueElement(List list)
    {
        _valueElement_.clear();
        _valueElement_.addAll(list);
    }

    public TRBrace getRBrace()
    {
        return _rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(_rBrace_ != null)
        {
            _rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _rBrace_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_valueHeader_)
            + toString(_lBrace_)
            + toString(_valueElement_)
            + toString(_rBrace_);
    }

    void removeChild(Node child)
    {
        if(_valueHeader_ == child)
        {
            _valueHeader_ = null;
            return;
        }

        if(_lBrace_ == child)
        {
            _lBrace_ = null;
            return;
        }

        if(_valueElement_.remove(child))
        {
            return;
        }

        if(_rBrace_ == child)
        {
            _rBrace_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_valueHeader_ == oldChild)
        {
            setValueHeader((PValueHeader) newChild);
            return;
        }

        if(_lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        for(ListIterator i = _valueElement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(_rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

    }

    private class ValueElement_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PValueElement node = (PValueElement) o;

            if((node.parent() != null) &&
                (node.parent() != AValueDcl.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AValueDcl.this))
            {
                node.parent(AValueDcl.this);
            }

            return node;
        }
    }
}
