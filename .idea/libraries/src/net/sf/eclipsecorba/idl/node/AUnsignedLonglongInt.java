/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.node;

import java.util.*;
import net.sf.eclipsecorba.idl.analysis.*;

public final class AUnsignedLonglongInt extends PUnsignedLonglongInt
{
    private TUnsigned _unsigned_;
    private TLong _left_;
    private TLong _right_;

    public AUnsignedLonglongInt()
    {
    }

    public AUnsignedLonglongInt(
        TUnsigned _unsigned_,
        TLong _left_,
        TLong _right_)
    {
        setUnsigned(_unsigned_);

        setLeft(_left_);

        setRight(_right_);

    }
    public Object clone()
    {
        return new AUnsignedLonglongInt(
            (TUnsigned) cloneNode(_unsigned_),
            (TLong) cloneNode(_left_),
            (TLong) cloneNode(_right_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnsignedLonglongInt(this);
    }

    public TUnsigned getUnsigned()
    {
        return _unsigned_;
    }

    public void setUnsigned(TUnsigned node)
    {
        if(_unsigned_ != null)
        {
            _unsigned_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _unsigned_ = node;
    }

    public TLong getLeft()
    {
        return _left_;
    }

    public void setLeft(TLong node)
    {
        if(_left_ != null)
        {
            _left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _left_ = node;
    }

    public TLong getRight()
    {
        return _right_;
    }

    public void setRight(TLong node)
    {
        if(_right_ != null)
        {
            _right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _right_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_unsigned_)
            + toString(_left_)
            + toString(_right_);
    }

    void removeChild(Node child)
    {
        if(_unsigned_ == child)
        {
            _unsigned_ = null;
            return;
        }

        if(_left_ == child)
        {
            _left_ = null;
            return;
        }

        if(_right_ == child)
        {
            _right_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_unsigned_ == oldChild)
        {
            setUnsigned((TUnsigned) newChild);
            return;
        }

        if(_left_ == oldChild)
        {
            setLeft((TLong) newChild);
            return;
        }

        if(_right_ == oldChild)
        {
            setRight((TLong) newChild);
            return;
        }

    }
}
