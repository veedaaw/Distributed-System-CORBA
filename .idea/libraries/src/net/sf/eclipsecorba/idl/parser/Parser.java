/* This file was generated by SableCC (http://www.sablecc.org/). */

package net.sf.eclipsecorba.idl.parser;

import net.sf.eclipsecorba.idl.lexer.*;
import net.sf.eclipsecorba.idl.node.*;
import net.sf.eclipsecorba.idl.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected Node node;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    protected void filter() throws ParserException, LexerException, IOException
    {
    }

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;

        if(actionTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Parser.class.getResourceAsStream("parser.dat")));

                // read actionTable
                int length = s.readInt();
                actionTable = new int[length][][];
                for(int i = 0; i < actionTable.length; i++)
                {
                    length = s.readInt();
                    actionTable[i] = new int[length][3];
                    for(int j = 0; j < actionTable[i].length; j++)
                    {
                        for(int k = 0; k < 3; k++)
                        {
                            actionTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read gotoTable
                length = s.readInt();
                gotoTable = new int[length][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][2];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        for(int k = 0; k < 2; k++)
                        {
                            gotoTable[i][j][k] = s.readInt();
                        }
                    }
                }

                // read errorMessages
                length = s.readInt();
                errorMessages = new String[length];
                for(int i = 0; i < errorMessages.length; i++)
                {
                    length = s.readInt();
                    StringBuffer buffer = new StringBuffer();

                    for(int j = 0; j < length; j++)
                    {
                        buffer.append(s.readChar());
                    }
                    errorMessages[i] = buffer.toString();
                }

                // read errors
                length = s.readInt();
                errors = new int[length];
                for(int i = 0; i < errors.length; i++)
                {
                    errors[i] = s.readInt();
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
            }
        }
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void push(int state, Node node, boolean filter) throws ParserException, LexerException, IOException
    {
        this.node = node;

        if(filter)
        {
            filter();
        }

        if(!stack.hasNext())
        {
            stack.add(new State(state, this.node));
            return;
        }

        State s = (State) stack.next();
        s.state = state;
        s.node = this.node;
    }

    private int state()
    {
        State s = (State) stack.previous();
        stack.next();
        return s.state;
    }

    private Node pop()
    {
        return (Node) ((State) stack.previous()).node;
    }

    private int index(Switchable token)
    {
        converter.index = -1;
        token.apply(converter);
        return converter.index;
    }

    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, false);

        List ign = null;
        while(true)
        {
            while(index(lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedLinkedList(NodeCast.instance);
                }

                ign.add(lexer.next());
            }

            if(ign != null)
            {
                ignoredTokens.setIn(lexer.peek(), ign);
                ign = null;
            }

            last_pos = lexer.peek().getPos();
            last_line = lexer.peek().getLine();
            last_token = lexer.peek();

            int index = index(lexer.peek());
            action[0] = actionTable[state()][0][1];
            action[1] = actionTable[state()][0][2];

            int low = 1;
            int high = actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[state()][middle][1];
                    action[1] = actionTable[state()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
                    push(action[1], lexer.next(), true);
                    last_shift = action[1];
                    break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0: { Node node = new0(); push(goTo(0), node, true); } break;
                    case 1: { Node node = new1(); push(goTo(0), node, true); } break;
                    case 2: { Node node = new2(); push(goTo(85), node, false); } break;
                    case 3: { Node node = new3(); push(goTo(85), node, false); } break;
                    case 4: { Node node = new4(); push(goTo(1), node, true); } break;
                    case 5: { Node node = new5(); push(goTo(1), node, true); } break;
                    case 6: { Node node = new6(); push(goTo(1), node, true); } break;
                    case 7: { Node node = new7(); push(goTo(1), node, true); } break;
                    case 8: { Node node = new8(); push(goTo(1), node, true); } break;
                    case 9: { Node node = new9(); push(goTo(1), node, true); } break;
                    case 10: { Node node = new10(); push(goTo(1), node, true); } break;
                    case 11: { Node node = new11(); push(goTo(1), node, true); } break;
                    case 12: { Node node = new12(); push(goTo(2), node, true); } break;
                    case 13: { Node node = new13(); push(goTo(2), node, true); } break;
                    case 14: { Node node = new14(); push(goTo(2), node, true); } break;
                    case 15: { Node node = new15(); push(goTo(2), node, true); } break;
                    case 16: { Node node = new16(); push(goTo(2), node, true); } break;
                    case 17: { Node node = new17(); push(goTo(3), node, true); } break;
                    case 18: { Node node = new18(); push(goTo(4), node, true); } break;
                    case 19: { Node node = new19(); push(goTo(5), node, true); } break;
                    case 20: { Node node = new20(); push(goTo(6), node, true); } break;
                    case 21: { Node node = new21(); push(goTo(6), node, true); } break;
                    case 22: { Node node = new22(); push(goTo(86), node, false); } break;
                    case 23: { Node node = new23(); push(goTo(86), node, false); } break;
                    case 24: { Node node = new24(); push(goTo(7), node, true); } break;
                    case 25: { Node node = new25(); push(goTo(7), node, true); } break;
                    case 26: { Node node = new26(); push(goTo(8), node, true); } break;
                    case 27: { Node node = new27(); push(goTo(8), node, true); } break;
                    case 28: { Node node = new28(); push(goTo(9), node, true); } break;
                    case 29: { Node node = new29(); push(goTo(9), node, true); } break;
                    case 30: { Node node = new30(); push(goTo(9), node, true); } break;
                    case 31: { Node node = new31(); push(goTo(9), node, true); } break;
                    case 32: { Node node = new32(); push(goTo(10), node, true); } break;
                    case 33: { Node node = new33(); push(goTo(10), node, true); } break;
                    case 34: { Node node = new34(); push(goTo(87), node, false); } break;
                    case 35: { Node node = new35(); push(goTo(87), node, false); } break;
                    case 36: { Node node = new36(); push(goTo(11), node, true); } break;
                    case 37: { Node node = new37(); push(goTo(11), node, true); } break;
                    case 38: { Node node = new38(); push(goTo(12), node, true); } break;
                    case 39: { Node node = new39(); push(goTo(12), node, true); } break;
                    case 40: { Node node = new40(); push(goTo(13), node, true); } break;
                    case 41: { Node node = new41(); push(goTo(13), node, true); } break;
                    case 42: { Node node = new42(); push(goTo(14), node, true); } break;
                    case 43: { Node node = new43(); push(goTo(14), node, true); } break;
                    case 44: { Node node = new44(); push(goTo(14), node, true); } break;
                    case 45: { Node node = new45(); push(goTo(14), node, true); } break;
                    case 46: { Node node = new46(); push(goTo(14), node, true); } break;
                    case 47: { Node node = new47(); push(goTo(15), node, true); } break;
                    case 48: { Node node = new48(); push(goTo(15), node, true); } break;
                    case 49: { Node node = new49(); push(goTo(88), node, false); } break;
                    case 50: { Node node = new50(); push(goTo(88), node, false); } break;
                    case 51: { Node node = new51(); push(goTo(16), node, true); } break;
                    case 52: { Node node = new52(); push(goTo(16), node, true); } break;
                    case 53: { Node node = new53(); push(goTo(16), node, true); } break;
                    case 54: { Node node = new54(); push(goTo(17), node, true); } break;
                    case 55: { Node node = new55(); push(goTo(17), node, true); } break;
                    case 56: { Node node = new56(); push(goTo(18), node, true); } break;
                    case 57: { Node node = new57(); push(goTo(19), node, true); } break;
                    case 58: { Node node = new58(); push(goTo(19), node, true); } break;
                    case 59: { Node node = new59(); push(goTo(19), node, true); } break;
                    case 60: { Node node = new60(); push(goTo(19), node, true); } break;
                    case 61: { Node node = new61(); push(goTo(20), node, true); } break;
                    case 62: { Node node = new62(); push(goTo(20), node, true); } break;
                    case 63: { Node node = new63(); push(goTo(89), node, false); } break;
                    case 64: { Node node = new64(); push(goTo(89), node, false); } break;
                    case 65: { Node node = new65(); push(goTo(21), node, true); } break;
                    case 66: { Node node = new66(); push(goTo(21), node, true); } break;
                    case 67: { Node node = new67(); push(goTo(21), node, true); } break;
                    case 68: { Node node = new68(); push(goTo(21), node, true); } break;
                    case 69: { Node node = new69(); push(goTo(22), node, true); } break;
                    case 70: { Node node = new70(); push(goTo(22), node, true); } break;
                    case 71: { Node node = new71(); push(goTo(22), node, true); } break;
                    case 72: { Node node = new72(); push(goTo(22), node, true); } break;
                    case 73: { Node node = new73(); push(goTo(22), node, true); } break;
                    case 74: { Node node = new74(); push(goTo(22), node, true); } break;
                    case 75: { Node node = new75(); push(goTo(22), node, true); } break;
                    case 76: { Node node = new76(); push(goTo(22), node, true); } break;
                    case 77: { Node node = new77(); push(goTo(22), node, true); } break;
                    case 78: { Node node = new78(); push(goTo(22), node, true); } break;
                    case 79: { Node node = new79(); push(goTo(22), node, true); } break;
                    case 80: { Node node = new80(); push(goTo(22), node, true); } break;
                    case 81: { Node node = new81(); push(goTo(22), node, true); } break;
                    case 82: { Node node = new82(); push(goTo(22), node, true); } break;
                    case 83: { Node node = new83(); push(goTo(23), node, true); } break;
                    case 84: { Node node = new84(); push(goTo(23), node, true); } break;
                    case 85: { Node node = new85(); push(goTo(23), node, true); } break;
                    case 86: { Node node = new86(); push(goTo(24), node, true); } break;
                    case 87: { Node node = new87(); push(goTo(24), node, true); } break;
                    case 88: { Node node = new88(); push(goTo(25), node, true); } break;
                    case 89: { Node node = new89(); push(goTo(25), node, true); } break;
                    case 90: { Node node = new90(); push(goTo(26), node, true); } break;
                    case 91: { Node node = new91(); push(goTo(26), node, true); } break;
                    case 92: { Node node = new92(); push(goTo(90), node, false); } break;
                    case 93: { Node node = new93(); push(goTo(90), node, false); } break;
                    case 94: { Node node = new94(); push(goTo(27), node, true); } break;
                    case 95: { Node node = new95(); push(goTo(28), node, true); } break;
                    case 96: { Node node = new96(); push(goTo(28), node, true); } break;
                    case 97: { Node node = new97(); push(goTo(28), node, true); } break;
                    case 98: { Node node = new98(); push(goTo(28), node, true); } break;
                    case 99: { Node node = new99(); push(goTo(28), node, true); } break;
                    case 100: { Node node = new100(); push(goTo(28), node, true); } break;
                    case 101: { Node node = new101(); push(goTo(28), node, true); } break;
                    case 102: { Node node = new102(); push(goTo(28), node, true); } break;
                    case 103: { Node node = new103(); push(goTo(28), node, true); } break;
                    case 104: { Node node = new104(); push(goTo(28), node, true); } break;
                    case 105: { Node node = new105(); push(goTo(28), node, true); } break;
                    case 106: { Node node = new106(); push(goTo(28), node, true); } break;
                    case 107: { Node node = new107(); push(goTo(28), node, true); } break;
                    case 108: { Node node = new108(); push(goTo(28), node, true); } break;
                    case 109: { Node node = new109(); push(goTo(28), node, true); } break;
                    case 110: { Node node = new110(); push(goTo(29), node, true); } break;
                    case 111: { Node node = new111(); push(goTo(29), node, true); } break;
                    case 112: { Node node = new112(); push(goTo(30), node, true); } break;
                    case 113: { Node node = new113(); push(goTo(30), node, true); } break;
                    case 114: { Node node = new114(); push(goTo(31), node, true); } break;
                    case 115: { Node node = new115(); push(goTo(31), node, true); } break;
                    case 116: { Node node = new116(); push(goTo(32), node, true); } break;
                    case 117: { Node node = new117(); push(goTo(32), node, true); } break;
                    case 118: { Node node = new118(); push(goTo(32), node, true); } break;
                    case 119: { Node node = new119(); push(goTo(33), node, true); } break;
                    case 120: { Node node = new120(); push(goTo(33), node, true); } break;
                    case 121: { Node node = new121(); push(goTo(33), node, true); } break;
                    case 122: { Node node = new122(); push(goTo(34), node, true); } break;
                    case 123: { Node node = new123(); push(goTo(34), node, true); } break;
                    case 124: { Node node = new124(); push(goTo(34), node, true); } break;
                    case 125: { Node node = new125(); push(goTo(34), node, true); } break;
                    case 126: { Node node = new126(); push(goTo(35), node, true); } break;
                    case 127: { Node node = new127(); push(goTo(35), node, true); } break;
                    case 128: { Node node = new128(); push(goTo(36), node, true); } break;
                    case 129: { Node node = new129(); push(goTo(36), node, true); } break;
                    case 130: { Node node = new130(); push(goTo(36), node, true); } break;
                    case 131: { Node node = new131(); push(goTo(37), node, true); } break;
                    case 132: { Node node = new132(); push(goTo(37), node, true); } break;
                    case 133: { Node node = new133(); push(goTo(37), node, true); } break;
                    case 134: { Node node = new134(); push(goTo(37), node, true); } break;
                    case 135: { Node node = new135(); push(goTo(37), node, true); } break;
                    case 136: { Node node = new136(); push(goTo(37), node, true); } break;
                    case 137: { Node node = new137(); push(goTo(37), node, true); } break;
                    case 138: { Node node = new138(); push(goTo(37), node, true); } break;
                    case 139: { Node node = new139(); push(goTo(38), node, true); } break;
                    case 140: { Node node = new140(); push(goTo(38), node, true); } break;
                    case 141: { Node node = new141(); push(goTo(39), node, true); } break;
                    case 142: { Node node = new142(); push(goTo(39), node, true); } break;
                    case 143: { Node node = new143(); push(goTo(39), node, true); } break;
                    case 144: { Node node = new144(); push(goTo(40), node, true); } break;
                    case 145: { Node node = new145(); push(goTo(40), node, true); } break;
                    case 146: { Node node = new146(); push(goTo(40), node, true); } break;
                    case 147: { Node node = new147(); push(goTo(40), node, true); } break;
                    case 148: { Node node = new148(); push(goTo(40), node, true); } break;
                    case 149: { Node node = new149(); push(goTo(40), node, true); } break;
                    case 150: { Node node = new150(); push(goTo(40), node, true); } break;
                    case 151: { Node node = new151(); push(goTo(40), node, true); } break;
                    case 152: { Node node = new152(); push(goTo(40), node, true); } break;
                    case 153: { Node node = new153(); push(goTo(40), node, true); } break;
                    case 154: { Node node = new154(); push(goTo(40), node, true); } break;
                    case 155: { Node node = new155(); push(goTo(40), node, true); } break;
                    case 156: { Node node = new156(); push(goTo(40), node, true); } break;
                    case 157: { Node node = new157(); push(goTo(41), node, true); } break;
                    case 158: { Node node = new158(); push(goTo(41), node, true); } break;
                    case 159: { Node node = new159(); push(goTo(41), node, true); } break;
                    case 160: { Node node = new160(); push(goTo(41), node, true); } break;
                    case 161: { Node node = new161(); push(goTo(42), node, true); } break;
                    case 162: { Node node = new162(); push(goTo(42), node, true); } break;
                    case 163: { Node node = new163(); push(goTo(42), node, true); } break;
                    case 164: { Node node = new164(); push(goTo(43), node, true); } break;
                    case 165: { Node node = new165(); push(goTo(43), node, true); } break;
                    case 166: { Node node = new166(); push(goTo(91), node, false); } break;
                    case 167: { Node node = new167(); push(goTo(91), node, false); } break;
                    case 168: { Node node = new168(); push(goTo(44), node, true); } break;
                    case 169: { Node node = new169(); push(goTo(44), node, true); } break;
                    case 170: { Node node = new170(); push(goTo(45), node, true); } break;
                    case 171: { Node node = new171(); push(goTo(45), node, true); } break;
                    case 172: { Node node = new172(); push(goTo(46), node, true); } break;
                    case 173: { Node node = new173(); push(goTo(47), node, true); } break;
                    case 174: { Node node = new174(); push(goTo(48), node, true); } break;
                    case 175: { Node node = new175(); push(goTo(49), node, true); } break;
                    case 176: { Node node = new176(); push(goTo(49), node, true); } break;
                    case 177: { Node node = new177(); push(goTo(50), node, true); } break;
                    case 178: { Node node = new178(); push(goTo(51), node, true); } break;
                    case 179: { Node node = new179(); push(goTo(92), node, false); } break;
                    case 180: { Node node = new180(); push(goTo(92), node, false); } break;
                    case 181: { Node node = new181(); push(goTo(52), node, true); } break;
                    case 182: { Node node = new182(); push(goTo(52), node, true); } break;
                    case 183: { Node node = new183(); push(goTo(52), node, true); } break;
                    case 184: { Node node = new184(); push(goTo(52), node, true); } break;
                    case 185: { Node node = new185(); push(goTo(52), node, true); } break;
                    case 186: { Node node = new186(); push(goTo(52), node, true); } break;
                    case 187: { Node node = new187(); push(goTo(52), node, true); } break;
                    case 188: { Node node = new188(); push(goTo(52), node, true); } break;
                    case 189: { Node node = new189(); push(goTo(52), node, true); } break;
                    case 190: { Node node = new190(); push(goTo(52), node, true); } break;
                    case 191: { Node node = new191(); push(goTo(53), node, true); } break;
                    case 192: { Node node = new192(); push(goTo(93), node, false); } break;
                    case 193: { Node node = new193(); push(goTo(93), node, false); } break;
                    case 194: { Node node = new194(); push(goTo(54), node, true); } break;
                    case 195: { Node node = new195(); push(goTo(54), node, true); } break;
                    case 196: { Node node = new196(); push(goTo(55), node, true); } break;
                    case 197: { Node node = new197(); push(goTo(55), node, true); } break;
                    case 198: { Node node = new198(); push(goTo(94), node, false); } break;
                    case 199: { Node node = new199(); push(goTo(94), node, false); } break;
                    case 200: { Node node = new200(); push(goTo(56), node, true); } break;
                    case 201: { Node node = new201(); push(goTo(56), node, true); } break;
                    case 202: { Node node = new202(); push(goTo(57), node, true); } break;
                    case 203: { Node node = new203(); push(goTo(57), node, true); } break;
                    case 204: { Node node = new204(); push(goTo(58), node, true); } break;
                    case 205: { Node node = new205(); push(goTo(58), node, true); } break;
                    case 206: { Node node = new206(); push(goTo(59), node, true); } break;
                    case 207: { Node node = new207(); push(goTo(95), node, false); } break;
                    case 208: { Node node = new208(); push(goTo(95), node, false); } break;
                    case 209: { Node node = new209(); push(goTo(60), node, true); } break;
                    case 210: { Node node = new210(); push(goTo(61), node, true); } break;
                    case 211: { Node node = new211(); push(goTo(61), node, true); } break;
                    case 212: { Node node = new212(); push(goTo(61), node, true); } break;
                    case 213: { Node node = new213(); push(goTo(61), node, true); } break;
                    case 214: { Node node = new214(); push(goTo(62), node, true); } break;
                    case 215: { Node node = new215(); push(goTo(62), node, true); } break;
                    case 216: { Node node = new216(); push(goTo(62), node, true); } break;
                    case 217: { Node node = new217(); push(goTo(62), node, true); } break;
                    case 218: { Node node = new218(); push(goTo(62), node, true); } break;
                    case 219: { Node node = new219(); push(goTo(62), node, true); } break;
                    case 220: { Node node = new220(); push(goTo(62), node, true); } break;
                    case 221: { Node node = new221(); push(goTo(62), node, true); } break;
                    case 222: { Node node = new222(); push(goTo(63), node, true); } break;
                    case 223: { Node node = new223(); push(goTo(63), node, true); } break;
                    case 224: { Node node = new224(); push(goTo(64), node, true); } break;
                    case 225: { Node node = new225(); push(goTo(64), node, true); } break;
                    case 226: { Node node = new226(); push(goTo(96), node, false); } break;
                    case 227: { Node node = new227(); push(goTo(96), node, false); } break;
                    case 228: { Node node = new228(); push(goTo(64), node, true); } break;
                    case 229: { Node node = new229(); push(goTo(65), node, true); } break;
                    case 230: { Node node = new230(); push(goTo(66), node, true); } break;
                    case 231: { Node node = new231(); push(goTo(66), node, true); } break;
                    case 232: { Node node = new232(); push(goTo(67), node, true); } break;
                    case 233: { Node node = new233(); push(goTo(67), node, true); } break;
                    case 234: { Node node = new234(); push(goTo(97), node, false); } break;
                    case 235: { Node node = new235(); push(goTo(97), node, false); } break;
                    case 236: { Node node = new236(); push(goTo(68), node, true); } break;
                    case 237: { Node node = new237(); push(goTo(68), node, true); } break;
                    case 238: { Node node = new238(); push(goTo(68), node, true); } break;
                    case 239: { Node node = new239(); push(goTo(68), node, true); } break;
                    case 240: { Node node = new240(); push(goTo(69), node, true); } break;
                    case 241: { Node node = new241(); push(goTo(70), node, true); } break;
                    case 242: { Node node = new242(); push(goTo(70), node, true); } break;
                    case 243: { Node node = new243(); push(goTo(70), node, true); } break;
                    case 244: { Node node = new244(); push(goTo(71), node, true); } break;
                    case 245: { Node node = new245(); push(goTo(71), node, true); } break;
                    case 246: { Node node = new246(); push(goTo(72), node, true); } break;
                    case 247: { Node node = new247(); push(goTo(72), node, true); } break;
                    case 248: { Node node = new248(); push(goTo(72), node, true); } break;
                    case 249: { Node node = new249(); push(goTo(73), node, true); } break;
                    case 250: { Node node = new250(); push(goTo(73), node, true); } break;
                    case 251: { Node node = new251(); push(goTo(73), node, true); } break;
                    case 252: { Node node = new252(); push(goTo(74), node, true); } break;
                    case 253: { Node node = new253(); push(goTo(75), node, true); } break;
                    case 254: { Node node = new254(); push(goTo(76), node, true); } break;
                    case 255: { Node node = new255(); push(goTo(77), node, true); } break;
                    case 256: { Node node = new256(); push(goTo(78), node, true); } break;
                    case 257: { Node node = new257(); push(goTo(79), node, true); } break;
                    case 258: { Node node = new258(); push(goTo(80), node, true); } break;
                    case 259: { Node node = new259(); push(goTo(81), node, true); } break;
                    case 260: { Node node = new260(); push(goTo(82), node, true); } break;
                    case 261: { Node node = new261(); push(goTo(83), node, true); } break;
                    case 262: { Node node = new262(); push(goTo(84), node, true); } break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.next();
                        PSpecification node1 = (PSpecification) pop();
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    Node new0()
    {
        XPDefinition node1 = null;
        ASpecification node = new ASpecification(node1);
        return node;
    }

    Node new1()
    {
        XPDefinition node1 = (XPDefinition) pop();
        ASpecification node = new ASpecification(node1);
        return node;
    }

    Node new2()
    {
        PDefinition node2 = (PDefinition) pop();
        XPDefinition node1 = (XPDefinition) pop();
        X1PDefinition node = new X1PDefinition(node1, node2);
        return node;
    }

    Node new3()
    {
        PDefinition node1 = (PDefinition) pop();
        X2PDefinition node = new X2PDefinition(node1);
        return node;
    }

    Node new4()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PTypeDcl node1 = (PTypeDcl) pop();
        ATypeDclDefinition node = new ATypeDclDefinition(node1, node2);
        return node;
    }

    Node new5()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PTypePrefix node1 = (PTypePrefix) pop();
        ATypePrefixDefinition node = new ATypePrefixDefinition(node1, node2);
        return node;
    }

    Node new6()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PTypeId node1 = (PTypeId) pop();
        ATypeIdDefinition node = new ATypeIdDefinition(node1, node2);
        return node;
    }

    Node new7()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PConstDcl node1 = (PConstDcl) pop();
        AConstDclDefinition node = new AConstDclDefinition(node1, node2);
        return node;
    }

    Node new8()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PExceptDcl node1 = (PExceptDcl) pop();
        AExceptDclDefinition node = new AExceptDclDefinition(node1, node2);
        return node;
    }

    Node new9()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PIdlInterface node1 = (PIdlInterface) pop();
        AIdlInterfaceDefinition node = new AIdlInterfaceDefinition(node1, node2);
        return node;
    }

    Node new10()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PIdlModule node1 = (PIdlModule) pop();
        AIdlModuleDefinition node = new AIdlModuleDefinition(node1, node2);
        return node;
    }

    Node new11()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PValue node1 = (PValue) pop();
        AValueDefinition node = new AValueDefinition(node1, node2);
        return node;
    }

    Node new12()
    {
        PTypeDeclarator node1 = (PTypeDeclarator) pop();
        ATypeDeclaratorTypeDcl node = new ATypeDeclaratorTypeDcl(node1);
        return node;
    }

    Node new13()
    {
        PStructType node1 = (PStructType) pop();
        AStructTypeDcl node = new AStructTypeDcl(node1);
        return node;
    }

    Node new14()
    {
        PUnionType node1 = (PUnionType) pop();
        AUnionTypeDcl node = new AUnionTypeDcl(node1);
        return node;
    }

    Node new15()
    {
        PEnumType node1 = (PEnumType) pop();
        AEnumTypeDcl node = new AEnumTypeDcl(node1);
        return node;
    }

    Node new16()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TNative node1 = (TNative) pop();
        AIdentifierTypeDcl node = new AIdentifierTypeDcl(node1, node2);
        return node;
    }

    Node new17()
    {
        TStringLiteral node3 = (TStringLiteral) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TTypeprefix node1 = (TTypeprefix) pop();
        ATypePrefix node = new ATypePrefix(node1, node2, node3);
        return node;
    }

    Node new18()
    {
        TStringLiteral node3 = (TStringLiteral) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TTypeid node1 = (TTypeid) pop();
        ATypeId node = new ATypeId(node1, node2, node3);
        return node;
    }

    Node new19()
    {
        POrExpr node5 = (POrExpr) pop();
        TAssign node4 = (TAssign) pop();
        TIdentifier node3 = (TIdentifier) pop();
        PConstType node2 = (PConstType) pop();
        TConst node1 = (TConst) pop();
        AConstDcl node = new AConstDcl(node1, node2, node3, node4, node5);
        return node;
    }

    Node new20()
    {
        TRBrace node5 = (TRBrace) pop();
        XPMember node4 = null;
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TException node1 = (TException) pop();
        AExceptDcl node = new AExceptDcl(node1, node2, node3, node4, node5);
        return node;
    }

    Node new21()
    {
        TRBrace node5 = (TRBrace) pop();
        XPMember node4 = (XPMember) pop();
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TException node1 = (TException) pop();
        AExceptDcl node = new AExceptDcl(node1, node2, node3, node4, node5);
        return node;
    }

    Node new22()
    {
        PMember node2 = (PMember) pop();
        XPMember node1 = (XPMember) pop();
        X1PMember node = new X1PMember(node1, node2);
        return node;
    }

    Node new23()
    {
        PMember node1 = (PMember) pop();
        X2PMember node = new X2PMember(node1);
        return node;
    }

    Node new24()
    {
        PInterfaceDcl node1 = (PInterfaceDcl) pop();
        AInterfaceDclIdlInterface node = new AInterfaceDclIdlInterface(node1);
        return node;
    }

    Node new25()
    {
        PForwardDcl node1 = (PForwardDcl) pop();
        AForwardDclIdlInterface node = new AForwardDclIdlInterface(node1);
        return node;
    }

    Node new26()
    {
        TRBrace node5 = (TRBrace) pop();
        XPDefinition node4 = null;
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TModule node1 = (TModule) pop();
        AIdlModule node = new AIdlModule(node1, node2, node3, node4, node5);
        return node;
    }

    Node new27()
    {
        TRBrace node5 = (TRBrace) pop();
        XPDefinition node4 = (XPDefinition) pop();
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TModule node1 = (TModule) pop();
        AIdlModule node = new AIdlModule(node1, node2, node3, node4, node5);
        return node;
    }

    Node new28()
    {
        PValueDcl node1 = (PValueDcl) pop();
        AValueDclValue node = new AValueDclValue(node1);
        return node;
    }

    Node new29()
    {
        PValueAbsDcl node1 = (PValueAbsDcl) pop();
        AValueAbsDclValue node = new AValueAbsDclValue(node1);
        return node;
    }

    Node new30()
    {
        PValueBoxDcl node1 = (PValueBoxDcl) pop();
        AValueBoxDclValue node = new AValueBoxDclValue(node1);
        return node;
    }

    Node new31()
    {
        PValueForwardDcl node1 = (PValueForwardDcl) pop();
        AValueForwardDclValue node = new AValueForwardDclValue(node1);
        return node;
    }

    Node new32()
    {
        TRBrace node4 = (TRBrace) pop();
        XPExport node3 = null;
        TLBrace node2 = (TLBrace) pop();
        PInterfaceHeader node1 = (PInterfaceHeader) pop();
        AInterfaceDcl node = new AInterfaceDcl(node1, node2, node3, node4);
        return node;
    }

    Node new33()
    {
        TRBrace node4 = (TRBrace) pop();
        XPExport node3 = (XPExport) pop();
        TLBrace node2 = (TLBrace) pop();
        PInterfaceHeader node1 = (PInterfaceHeader) pop();
        AInterfaceDcl node = new AInterfaceDcl(node1, node2, node3, node4);
        return node;
    }

    Node new34()
    {
        PExport node2 = (PExport) pop();
        XPExport node1 = (XPExport) pop();
        X1PExport node = new X1PExport(node1, node2);
        return node;
    }

    Node new35()
    {
        PExport node1 = (PExport) pop();
        X2PExport node = new X2PExport(node1);
        return node;
    }

    Node new36()
    {
        TIdentifier node3 = (TIdentifier) pop();
        TInterface node2 = (TInterface) pop();
        PInterfaceModifier node1 = null;
        AForwardDcl node = new AForwardDcl(node1, node2, node3);
        return node;
    }

    Node new37()
    {
        TIdentifier node3 = (TIdentifier) pop();
        TInterface node2 = (TInterface) pop();
        PInterfaceModifier node1 = (PInterfaceModifier) pop();
        AForwardDcl node = new AForwardDcl(node1, node2, node3);
        return node;
    }

    Node new38()
    {
        TAbstract node1 = (TAbstract) pop();
        AAbstractInterfaceModifier node = new AAbstractInterfaceModifier(node1);
        return node;
    }

    Node new39()
    {
        TLocal node1 = (TLocal) pop();
        ALocalInterfaceModifier node = new ALocalInterfaceModifier(node1);
        return node;
    }

    Node new40()
    {
        PInterfaceInheritanceSpec node2 = null;
        PForwardDcl node1 = (PForwardDcl) pop();
        AInterfaceHeader node = new AInterfaceHeader(node1, node2);
        return node;
    }

    Node new41()
    {
        PInterfaceInheritanceSpec node2 = (PInterfaceInheritanceSpec) pop();
        PForwardDcl node1 = (PForwardDcl) pop();
        AInterfaceHeader node = new AInterfaceHeader(node1, node2);
        return node;
    }

    Node new42()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PTypeDcl node1 = (PTypeDcl) pop();
        ATypeDclExport node = new ATypeDclExport(node1, node2);
        return node;
    }

    Node new43()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PConstDcl node1 = (PConstDcl) pop();
        AConstDclExport node = new AConstDclExport(node1, node2);
        return node;
    }

    Node new44()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PExceptDcl node1 = (PExceptDcl) pop();
        AExceptDclExport node = new AExceptDclExport(node1, node2);
        return node;
    }

    Node new45()
    {
        TSemicolon node2 = (TSemicolon) pop();
        PAttrDcl node1 = (PAttrDcl) pop();
        AAttrDclExport node = new AAttrDclExport(node1, node2);
        return node;
    }

    Node new46()
    {
        TSemicolon node2 = (TSemicolon) pop();
        POpDcl node1 = (POpDcl) pop();
        AOpDclExport node = new AOpDclExport(node1, node2);
        return node;
    }

    Node new47()
    {
        XPCommaScopedName node3 = null;
        PScopedName node2 = (PScopedName) pop();
        TColon node1 = (TColon) pop();
        AInterfaceInheritanceSpec node = new AInterfaceInheritanceSpec(node1, node2, node3);
        return node;
    }

    Node new48()
    {
        XPCommaScopedName node3 = (XPCommaScopedName) pop();
        PScopedName node2 = (PScopedName) pop();
        TColon node1 = (TColon) pop();
        AInterfaceInheritanceSpec node = new AInterfaceInheritanceSpec(node1, node2, node3);
        return node;
    }

    Node new49()
    {
        PCommaScopedName node2 = (PCommaScopedName) pop();
        XPCommaScopedName node1 = (XPCommaScopedName) pop();
        X1PCommaScopedName node = new X1PCommaScopedName(node1, node2);
        return node;
    }

    Node new50()
    {
        PCommaScopedName node1 = (PCommaScopedName) pop();
        X2PCommaScopedName node = new X2PCommaScopedName(node1);
        return node;
    }

    Node new51()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TDoublecolon node1 = null;
        AIdentifierScopedName node = new AIdentifierScopedName(node1, node2);
        return node;
    }

    Node new52()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TDoublecolon node1 = (TDoublecolon) pop();
        AIdentifierScopedName node = new AIdentifierScopedName(node1, node2);
        return node;
    }

    Node new53()
    {
        TIdentifier node3 = (TIdentifier) pop();
        TDoublecolon node2 = (TDoublecolon) pop();
        PScopedName node1 = (PScopedName) pop();
        AScopedScopedName node = new AScopedScopedName(node1, node2, node3);
        return node;
    }

    Node new54()
    {
        TIdentifier node3 = (TIdentifier) pop();
        TValuetype node2 = (TValuetype) pop();
        TAbstract node1 = null;
        AValueForwardDcl node = new AValueForwardDcl(node1, node2, node3);
        return node;
    }

    Node new55()
    {
        TIdentifier node3 = (TIdentifier) pop();
        TValuetype node2 = (TValuetype) pop();
        TAbstract node1 = (TAbstract) pop();
        AValueForwardDcl node = new AValueForwardDcl(node1, node2, node3);
        return node;
    }

    Node new56()
    {
        PTypeSpec node3 = (PTypeSpec) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TValuetype node1 = (TValuetype) pop();
        AValueBoxDcl node = new AValueBoxDcl(node1, node2, node3);
        return node;
    }

    Node new57()
    {
        TRBrace node7 = (TRBrace) pop();
        XPExport node6 = null;
        TLBrace node5 = (TLBrace) pop();
        PValueInheritanceSpec node4 = null;
        TIdentifier node3 = (TIdentifier) pop();
        TValuetype node2 = (TValuetype) pop();
        TAbstract node1 = (TAbstract) pop();
        AValueAbsDcl node = new AValueAbsDcl(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new58()
    {
        TRBrace node7 = (TRBrace) pop();
        XPExport node6 = null;
        TLBrace node5 = (TLBrace) pop();
        PValueInheritanceSpec node4 = (PValueInheritanceSpec) pop();
        TIdentifier node3 = (TIdentifier) pop();
        TValuetype node2 = (TValuetype) pop();
        TAbstract node1 = (TAbstract) pop();
        AValueAbsDcl node = new AValueAbsDcl(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new59()
    {
        TRBrace node7 = (TRBrace) pop();
        XPExport node6 = (XPExport) pop();
        TLBrace node5 = (TLBrace) pop();
        PValueInheritanceSpec node4 = null;
        TIdentifier node3 = (TIdentifier) pop();
        TValuetype node2 = (TValuetype) pop();
        TAbstract node1 = (TAbstract) pop();
        AValueAbsDcl node = new AValueAbsDcl(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new60()
    {
        TRBrace node7 = (TRBrace) pop();
        XPExport node6 = (XPExport) pop();
        TLBrace node5 = (TLBrace) pop();
        PValueInheritanceSpec node4 = (PValueInheritanceSpec) pop();
        TIdentifier node3 = (TIdentifier) pop();
        TValuetype node2 = (TValuetype) pop();
        TAbstract node1 = (TAbstract) pop();
        AValueAbsDcl node = new AValueAbsDcl(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new61()
    {
        TRBrace node4 = (TRBrace) pop();
        XPValueElement node3 = null;
        TLBrace node2 = (TLBrace) pop();
        PValueHeader node1 = (PValueHeader) pop();
        AValueDcl node = new AValueDcl(node1, node2, node3, node4);
        return node;
    }

    Node new62()
    {
        TRBrace node4 = (TRBrace) pop();
        XPValueElement node3 = (XPValueElement) pop();
        TLBrace node2 = (TLBrace) pop();
        PValueHeader node1 = (PValueHeader) pop();
        AValueDcl node = new AValueDcl(node1, node2, node3, node4);
        return node;
    }

    Node new63()
    {
        PValueElement node2 = (PValueElement) pop();
        XPValueElement node1 = (XPValueElement) pop();
        X1PValueElement node = new X1PValueElement(node1, node2);
        return node;
    }

    Node new64()
    {
        PValueElement node1 = (PValueElement) pop();
        X2PValueElement node = new X2PValueElement(node1);
        return node;
    }

    Node new65()
    {
        PValueInheritanceSpec node4 = null;
        TIdentifier node3 = (TIdentifier) pop();
        TValuetype node2 = (TValuetype) pop();
        TCustom node1 = null;
        AValueHeader node = new AValueHeader(node1, node2, node3, node4);
        return node;
    }

    Node new66()
    {
        PValueInheritanceSpec node4 = null;
        TIdentifier node3 = (TIdentifier) pop();
        TValuetype node2 = (TValuetype) pop();
        TCustom node1 = (TCustom) pop();
        AValueHeader node = new AValueHeader(node1, node2, node3, node4);
        return node;
    }

    Node new67()
    {
        PValueInheritanceSpec node4 = (PValueInheritanceSpec) pop();
        TIdentifier node3 = (TIdentifier) pop();
        TValuetype node2 = (TValuetype) pop();
        TCustom node1 = null;
        AValueHeader node = new AValueHeader(node1, node2, node3, node4);
        return node;
    }

    Node new68()
    {
        PValueInheritanceSpec node4 = (PValueInheritanceSpec) pop();
        TIdentifier node3 = (TIdentifier) pop();
        TValuetype node2 = (TValuetype) pop();
        TCustom node1 = (TCustom) pop();
        AValueHeader node = new AValueHeader(node1, node2, node3, node4);
        return node;
    }

    Node new69()
    {
        XPCommaScopedName node4 = null;
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = null;
        TColon node1 = (TColon) pop();
        ANosuportValueInheritanceSpec node = new ANosuportValueInheritanceSpec(node1, node2, node3, node4);
        return node;
    }

    Node new70()
    {
        XPCommaScopedName node4 = null;
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = (TTruncatable) pop();
        TColon node1 = (TColon) pop();
        ANosuportValueInheritanceSpec node = new ANosuportValueInheritanceSpec(node1, node2, node3, node4);
        return node;
    }

    Node new71()
    {
        XPCommaScopedName node4 = (XPCommaScopedName) pop();
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = null;
        TColon node1 = (TColon) pop();
        ANosuportValueInheritanceSpec node = new ANosuportValueInheritanceSpec(node1, node2, node3, node4);
        return node;
    }

    Node new72()
    {
        XPCommaScopedName node4 = (XPCommaScopedName) pop();
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = (TTruncatable) pop();
        TColon node1 = (TColon) pop();
        ANosuportValueInheritanceSpec node = new ANosuportValueInheritanceSpec(node1, node2, node3, node4);
        return node;
    }

    Node new73()
    {
        XPCommaScopedName node3 = null;
        PScopedName node2 = (PScopedName) pop();
        TSupports node1 = (TSupports) pop();
        ASuportValueInheritanceSpec node = new ASuportValueInheritanceSpec(node1, node2, node3);
        return node;
    }

    Node new74()
    {
        XPCommaScopedName node3 = (XPCommaScopedName) pop();
        PScopedName node2 = (PScopedName) pop();
        TSupports node1 = (TSupports) pop();
        ASuportValueInheritanceSpec node = new ASuportValueInheritanceSpec(node1, node2, node3);
        return node;
    }

    Node new75()
    {
        XPCommaScopedName node7 = null;
        PScopedName node6 = (PScopedName) pop();
        TSupports node5 = (TSupports) pop();
        XPCommaScopedName node4 = null;
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = null;
        TColon node1 = (TColon) pop();
        AMsupportValueInheritanceSpec node = new AMsupportValueInheritanceSpec(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new76()
    {
        XPCommaScopedName node7 = null;
        PScopedName node6 = (PScopedName) pop();
        TSupports node5 = (TSupports) pop();
        XPCommaScopedName node4 = null;
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = (TTruncatable) pop();
        TColon node1 = (TColon) pop();
        AMsupportValueInheritanceSpec node = new AMsupportValueInheritanceSpec(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new77()
    {
        XPCommaScopedName node7 = null;
        PScopedName node6 = (PScopedName) pop();
        TSupports node5 = (TSupports) pop();
        XPCommaScopedName node4 = (XPCommaScopedName) pop();
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = null;
        TColon node1 = (TColon) pop();
        AMsupportValueInheritanceSpec node = new AMsupportValueInheritanceSpec(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new78()
    {
        XPCommaScopedName node7 = null;
        PScopedName node6 = (PScopedName) pop();
        TSupports node5 = (TSupports) pop();
        XPCommaScopedName node4 = (XPCommaScopedName) pop();
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = (TTruncatable) pop();
        TColon node1 = (TColon) pop();
        AMsupportValueInheritanceSpec node = new AMsupportValueInheritanceSpec(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new79()
    {
        XPCommaScopedName node7 = (XPCommaScopedName) pop();
        PScopedName node6 = (PScopedName) pop();
        TSupports node5 = (TSupports) pop();
        XPCommaScopedName node4 = null;
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = null;
        TColon node1 = (TColon) pop();
        AMsupportValueInheritanceSpec node = new AMsupportValueInheritanceSpec(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new80()
    {
        XPCommaScopedName node7 = (XPCommaScopedName) pop();
        PScopedName node6 = (PScopedName) pop();
        TSupports node5 = (TSupports) pop();
        XPCommaScopedName node4 = null;
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = (TTruncatable) pop();
        TColon node1 = (TColon) pop();
        AMsupportValueInheritanceSpec node = new AMsupportValueInheritanceSpec(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new81()
    {
        XPCommaScopedName node7 = (XPCommaScopedName) pop();
        PScopedName node6 = (PScopedName) pop();
        TSupports node5 = (TSupports) pop();
        XPCommaScopedName node4 = (XPCommaScopedName) pop();
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = null;
        TColon node1 = (TColon) pop();
        AMsupportValueInheritanceSpec node = new AMsupportValueInheritanceSpec(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new82()
    {
        XPCommaScopedName node7 = (XPCommaScopedName) pop();
        PScopedName node6 = (PScopedName) pop();
        TSupports node5 = (TSupports) pop();
        XPCommaScopedName node4 = (XPCommaScopedName) pop();
        PScopedName node3 = (PScopedName) pop();
        TTruncatable node2 = (TTruncatable) pop();
        TColon node1 = (TColon) pop();
        AMsupportValueInheritanceSpec node = new AMsupportValueInheritanceSpec(node1, node2, node3, node4, node5, node6, node7);
        return node;
    }

    Node new83()
    {
        PExport node1 = (PExport) pop();
        AExportValueElement node = new AExportValueElement(node1);
        return node;
    }

    Node new84()
    {
        PStateMember node1 = (PStateMember) pop();
        AStateMemberValueElement node = new AStateMemberValueElement(node1);
        return node;
    }

    Node new85()
    {
        PInitDcl node1 = (PInitDcl) pop();
        AInitDclValueElement node = new AInitDclValueElement(node1);
        return node;
    }

    Node new86()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PDeclarators node3 = (PDeclarators) pop();
        PTypeSpec node2 = (PTypeSpec) pop();
        TPublic node1 = (TPublic) pop();
        APublicStateMember node = new APublicStateMember(node1, node2, node3, node4);
        return node;
    }

    Node new87()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PDeclarators node3 = (PDeclarators) pop();
        PTypeSpec node2 = (PTypeSpec) pop();
        TPrivate node1 = (TPrivate) pop();
        APrivateStateMember node = new APrivateStateMember(node1, node2, node3, node4);
        return node;
    }

    Node new88()
    {
        TSemicolon node6 = (TSemicolon) pop();
        TRParenthese node5 = (TRParenthese) pop();
        PInitParamDecls node4 = null;
        TLParenthese node3 = (TLParenthese) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TFactory node1 = (TFactory) pop();
        AInitDcl node = new AInitDcl(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new89()
    {
        TSemicolon node6 = (TSemicolon) pop();
        TRParenthese node5 = (TRParenthese) pop();
        PInitParamDecls node4 = (PInitParamDecls) pop();
        TLParenthese node3 = (TLParenthese) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TFactory node1 = (TFactory) pop();
        AInitDcl node = new AInitDcl(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new90()
    {
        XPCommaInitParamDecl node2 = null;
        PInitParamDecl node1 = (PInitParamDecl) pop();
        AInitParamDecls node = new AInitParamDecls(node1, node2);
        return node;
    }

    Node new91()
    {
        XPCommaInitParamDecl node2 = (XPCommaInitParamDecl) pop();
        PInitParamDecl node1 = (PInitParamDecl) pop();
        AInitParamDecls node = new AInitParamDecls(node1, node2);
        return node;
    }

    Node new92()
    {
        PCommaInitParamDecl node2 = (PCommaInitParamDecl) pop();
        XPCommaInitParamDecl node1 = (XPCommaInitParamDecl) pop();
        X1PCommaInitParamDecl node = new X1PCommaInitParamDecl(node1, node2);
        return node;
    }

    Node new93()
    {
        PCommaInitParamDecl node1 = (PCommaInitParamDecl) pop();
        X2PCommaInitParamDecl node = new X2PCommaInitParamDecl(node1);
        return node;
    }

    Node new94()
    {
        TIdentifier node3 = (TIdentifier) pop();
        PParamTypeSpec node2 = (PParamTypeSpec) pop();
        TIn node1 = (TIn) pop();
        AInitParamDecl node = new AInitParamDecl(node1, node2, node3);
        return node;
    }

    Node new95()
    {
        TLong node1 = (TLong) pop();
        ALongConstType node = new ALongConstType(node1);
        return node;
    }

    Node new96()
    {
        TShort node1 = (TShort) pop();
        AShortConstType node = new AShortConstType(node1);
        return node;
    }

    Node new97()
    {
        PSignedLonglongInt node1 = (PSignedLonglongInt) pop();
        ALonglongConstType node = new ALonglongConstType(node1);
        return node;
    }

    Node new98()
    {
        PUnsignedLongInt node1 = (PUnsignedLongInt) pop();
        AUlongConstType node = new AUlongConstType(node1);
        return node;
    }

    Node new99()
    {
        PUnsignedShortInt node1 = (PUnsignedShortInt) pop();
        AUshortConstType node = new AUshortConstType(node1);
        return node;
    }

    Node new100()
    {
        PUnsignedLonglongInt node1 = (PUnsignedLonglongInt) pop();
        AUlonglongConstType node = new AUlonglongConstType(node1);
        return node;
    }

    Node new101()
    {
        TChar node1 = (TChar) pop();
        ACharConstType node = new ACharConstType(node1);
        return node;
    }

    Node new102()
    {
        TWchar node1 = (TWchar) pop();
        AWcharConstType node = new AWcharConstType(node1);
        return node;
    }

    Node new103()
    {
        TBoolean node1 = (TBoolean) pop();
        ABooleanConstType node = new ABooleanConstType(node1);
        return node;
    }

    Node new104()
    {
        PFloatingPtType node1 = (PFloatingPtType) pop();
        AFloatingPtTypeConstType node = new AFloatingPtTypeConstType(node1);
        return node;
    }

    Node new105()
    {
        PStringType node1 = (PStringType) pop();
        AStringTypeConstType node = new AStringTypeConstType(node1);
        return node;
    }

    Node new106()
    {
        PWideStringType node1 = (PWideStringType) pop();
        AWideStringTypeConstType node = new AWideStringTypeConstType(node1);
        return node;
    }

    Node new107()
    {
        TFixed node1 = (TFixed) pop();
        AFixedConstType node = new AFixedConstType(node1);
        return node;
    }

    Node new108()
    {
        PScopedName node1 = (PScopedName) pop();
        AScopedNameConstType node = new AScopedNameConstType(node1);
        return node;
    }

    Node new109()
    {
        TOctet node1 = (TOctet) pop();
        AOctetConstType node = new AOctetConstType(node1);
        return node;
    }

    Node new110()
    {
        PXorExpr node1 = (PXorExpr) pop();
        AXorExprOrExpr node = new AXorExprOrExpr(node1);
        return node;
    }

    Node new111()
    {
        PXorExpr node3 = (PXorExpr) pop();
        TBitOr node2 = (TBitOr) pop();
        POrExpr node1 = (POrExpr) pop();
        AOrOrExpr node = new AOrOrExpr(node1, node2, node3);
        return node;
    }

    Node new112()
    {
        PAndExpr node1 = (PAndExpr) pop();
        AAndExprXorExpr node = new AAndExprXorExpr(node1);
        return node;
    }

    Node new113()
    {
        PAndExpr node3 = (PAndExpr) pop();
        TBitXor node2 = (TBitXor) pop();
        PXorExpr node1 = (PXorExpr) pop();
        AXorXorExpr node = new AXorXorExpr(node1, node2, node3);
        return node;
    }

    Node new114()
    {
        PShiftExpr node1 = (PShiftExpr) pop();
        AShiftExprAndExpr node = new AShiftExprAndExpr(node1);
        return node;
    }

    Node new115()
    {
        PShiftExpr node3 = (PShiftExpr) pop();
        TBitAnd node2 = (TBitAnd) pop();
        PAndExpr node1 = (PAndExpr) pop();
        AAndAndExpr node = new AAndAndExpr(node1, node2, node3);
        return node;
    }

    Node new116()
    {
        PAddExpr node1 = (PAddExpr) pop();
        AAddExprShiftExpr node = new AAddExprShiftExpr(node1);
        return node;
    }

    Node new117()
    {
        PAddExpr node3 = (PAddExpr) pop();
        TShiftRight node2 = (TShiftRight) pop();
        PShiftExpr node1 = (PShiftExpr) pop();
        AShiftRightShiftExpr node = new AShiftRightShiftExpr(node1, node2, node3);
        return node;
    }

    Node new118()
    {
        PAddExpr node3 = (PAddExpr) pop();
        TShiftLeft node2 = (TShiftLeft) pop();
        PShiftExpr node1 = (PShiftExpr) pop();
        AShiftLeftShiftExpr node = new AShiftLeftShiftExpr(node1, node2, node3);
        return node;
    }

    Node new119()
    {
        PMultExpr node1 = (PMultExpr) pop();
        AMultExprAddExpr node = new AMultExprAddExpr(node1);
        return node;
    }

    Node new120()
    {
        PMultExpr node3 = (PMultExpr) pop();
        TPlus node2 = (TPlus) pop();
        PAddExpr node1 = (PAddExpr) pop();
        APlusAddExpr node = new APlusAddExpr(node1, node2, node3);
        return node;
    }

    Node new121()
    {
        PMultExpr node3 = (PMultExpr) pop();
        TMinus node2 = (TMinus) pop();
        PAddExpr node1 = (PAddExpr) pop();
        AMinusAddExpr node = new AMinusAddExpr(node1, node2, node3);
        return node;
    }

    Node new122()
    {
        PUnaryExpr node1 = (PUnaryExpr) pop();
        AUnaryExprMultExpr node = new AUnaryExprMultExpr(node1);
        return node;
    }

    Node new123()
    {
        PUnaryExpr node3 = (PUnaryExpr) pop();
        TStar node2 = (TStar) pop();
        PMultExpr node1 = (PMultExpr) pop();
        AMultiplyMultExpr node = new AMultiplyMultExpr(node1, node2, node3);
        return node;
    }

    Node new124()
    {
        PUnaryExpr node3 = (PUnaryExpr) pop();
        TDiv node2 = (TDiv) pop();
        PMultExpr node1 = (PMultExpr) pop();
        ADivideMultExpr node = new ADivideMultExpr(node1, node2, node3);
        return node;
    }

    Node new125()
    {
        PUnaryExpr node3 = (PUnaryExpr) pop();
        TMod node2 = (TMod) pop();
        PMultExpr node1 = (PMultExpr) pop();
        AModMultExpr node = new AModMultExpr(node1, node2, node3);
        return node;
    }

    Node new126()
    {
        PPrimaryExpr node2 = (PPrimaryExpr) pop();
        PUnaryOperator node1 = (PUnaryOperator) pop();
        AUnaryOperatorUnaryExpr node = new AUnaryOperatorUnaryExpr(node1, node2);
        return node;
    }

    Node new127()
    {
        PPrimaryExpr node1 = (PPrimaryExpr) pop();
        APrimaryExprUnaryExpr node = new APrimaryExprUnaryExpr(node1);
        return node;
    }

    Node new128()
    {
        PScopedName node1 = (PScopedName) pop();
        AScopedNamePrimaryExpr node = new AScopedNamePrimaryExpr(node1);
        return node;
    }

    Node new129()
    {
        PLiteral node1 = (PLiteral) pop();
        ALiteralPrimaryExpr node = new ALiteralPrimaryExpr(node1);
        return node;
    }

    Node new130()
    {
        TRParenthese node3 = (TRParenthese) pop();
        POrExpr node2 = (POrExpr) pop();
        TLParenthese node1 = (TLParenthese) pop();
        AOrExprPrimaryExpr node = new AOrExprPrimaryExpr(node1, node2, node3);
        return node;
    }

    Node new131()
    {
        TIntegerLiteral node1 = (TIntegerLiteral) pop();
        AIntegerLiteral node = new AIntegerLiteral(node1);
        return node;
    }

    Node new132()
    {
        TStringLiteral node1 = (TStringLiteral) pop();
        AStringLiteral node = new AStringLiteral(node1);
        return node;
    }

    Node new133()
    {
        TCharacterLiteral node1 = (TCharacterLiteral) pop();
        ACharLiteral node = new ACharLiteral(node1);
        return node;
    }

    Node new134()
    {
        TFloatingPtLiteral node1 = (TFloatingPtLiteral) pop();
        AFloatLiteral node = new AFloatLiteral(node1);
        return node;
    }

    Node new135()
    {
        PBooleanLiteral node1 = (PBooleanLiteral) pop();
        ABooleanLiteral node = new ABooleanLiteral(node1);
        return node;
    }

    Node new136()
    {
        TWideStringLiteral node1 = (TWideStringLiteral) pop();
        AWstringLiteral node = new AWstringLiteral(node1);
        return node;
    }

    Node new137()
    {
        TWideCharacterLiteral node1 = (TWideCharacterLiteral) pop();
        AWcharLiteral node = new AWcharLiteral(node1);
        return node;
    }

    Node new138()
    {
        TFixedPtLiteral node1 = (TFixedPtLiteral) pop();
        AFixedLiteral node = new AFixedLiteral(node1);
        return node;
    }

    Node new139()
    {
        PSimpleTypeSpec node1 = (PSimpleTypeSpec) pop();
        ASimpleTypeSpecTypeSpec node = new ASimpleTypeSpecTypeSpec(node1);
        return node;
    }

    Node new140()
    {
        PConstrTypeSpec node1 = (PConstrTypeSpec) pop();
        AConstrTypeSpecTypeSpec node = new AConstrTypeSpecTypeSpec(node1);
        return node;
    }

    Node new141()
    {
        PBaseTypeSpec node1 = (PBaseTypeSpec) pop();
        ABaseTypeSpecSimpleTypeSpec node = new ABaseTypeSpecSimpleTypeSpec(node1);
        return node;
    }

    Node new142()
    {
        PTemplateTypeSpec node1 = (PTemplateTypeSpec) pop();
        ATemplateTypeSpecSimpleTypeSpec node = new ATemplateTypeSpecSimpleTypeSpec(node1);
        return node;
    }

    Node new143()
    {
        PScopedName node1 = (PScopedName) pop();
        AScopedNameSimpleTypeSpec node = new AScopedNameSimpleTypeSpec(node1);
        return node;
    }

    Node new144()
    {
        PFloatingPtType node1 = (PFloatingPtType) pop();
        AFloatBaseTypeSpec node = new AFloatBaseTypeSpec(node1);
        return node;
    }

    Node new145()
    {
        TLong node1 = (TLong) pop();
        ALongBaseTypeSpec node = new ALongBaseTypeSpec(node1);
        return node;
    }

    Node new146()
    {
        TShort node1 = (TShort) pop();
        AShortBaseTypeSpec node = new AShortBaseTypeSpec(node1);
        return node;
    }

    Node new147()
    {
        PSignedLonglongInt node1 = (PSignedLonglongInt) pop();
        ALonglongBaseTypeSpec node = new ALonglongBaseTypeSpec(node1);
        return node;
    }

    Node new148()
    {
        PUnsignedLongInt node1 = (PUnsignedLongInt) pop();
        AUlongBaseTypeSpec node = new AUlongBaseTypeSpec(node1);
        return node;
    }

    Node new149()
    {
        PUnsignedShortInt node1 = (PUnsignedShortInt) pop();
        AUshortBaseTypeSpec node = new AUshortBaseTypeSpec(node1);
        return node;
    }

    Node new150()
    {
        PUnsignedLonglongInt node1 = (PUnsignedLonglongInt) pop();
        AUlonglongBaseTypeSpec node = new AUlonglongBaseTypeSpec(node1);
        return node;
    }

    Node new151()
    {
        TChar node1 = (TChar) pop();
        ACharBaseTypeSpec node = new ACharBaseTypeSpec(node1);
        return node;
    }

    Node new152()
    {
        TWchar node1 = (TWchar) pop();
        AWcharBaseTypeSpec node = new AWcharBaseTypeSpec(node1);
        return node;
    }

    Node new153()
    {
        TBoolean node1 = (TBoolean) pop();
        ABooleanBaseTypeSpec node = new ABooleanBaseTypeSpec(node1);
        return node;
    }

    Node new154()
    {
        TOctet node1 = (TOctet) pop();
        AOctetBaseTypeSpec node = new AOctetBaseTypeSpec(node1);
        return node;
    }

    Node new155()
    {
        TAny node1 = (TAny) pop();
        AAnyBaseTypeSpec node = new AAnyBaseTypeSpec(node1);
        return node;
    }

    Node new156()
    {
        TValuebase node1 = (TValuebase) pop();
        AValuebaseBaseTypeSpec node = new AValuebaseBaseTypeSpec(node1);
        return node;
    }

    Node new157()
    {
        PSequenceType node1 = (PSequenceType) pop();
        ASequenceTemplateTypeSpec node = new ASequenceTemplateTypeSpec(node1);
        return node;
    }

    Node new158()
    {
        PStringType node1 = (PStringType) pop();
        AStringTemplateTypeSpec node = new AStringTemplateTypeSpec(node1);
        return node;
    }

    Node new159()
    {
        PWideStringType node1 = (PWideStringType) pop();
        AWstringTemplateTypeSpec node = new AWstringTemplateTypeSpec(node1);
        return node;
    }

    Node new160()
    {
        PFixedPtType node1 = (PFixedPtType) pop();
        AFixedTemplateTypeSpec node = new AFixedTemplateTypeSpec(node1);
        return node;
    }

    Node new161()
    {
        PStructType node1 = (PStructType) pop();
        AStructConstrTypeSpec node = new AStructConstrTypeSpec(node1);
        return node;
    }

    Node new162()
    {
        PUnionType node1 = (PUnionType) pop();
        AUnionConstrTypeSpec node = new AUnionConstrTypeSpec(node1);
        return node;
    }

    Node new163()
    {
        PEnumType node1 = (PEnumType) pop();
        AEnumConstrTypeSpec node = new AEnumConstrTypeSpec(node1);
        return node;
    }

    Node new164()
    {
        XPCommaDeclarator node2 = null;
        PDeclarator node1 = (PDeclarator) pop();
        ADeclarators node = new ADeclarators(node1, node2);
        return node;
    }

    Node new165()
    {
        XPCommaDeclarator node2 = (XPCommaDeclarator) pop();
        PDeclarator node1 = (PDeclarator) pop();
        ADeclarators node = new ADeclarators(node1, node2);
        return node;
    }

    Node new166()
    {
        PCommaDeclarator node2 = (PCommaDeclarator) pop();
        XPCommaDeclarator node1 = (XPCommaDeclarator) pop();
        X1PCommaDeclarator node = new X1PCommaDeclarator(node1, node2);
        return node;
    }

    Node new167()
    {
        PCommaDeclarator node1 = (PCommaDeclarator) pop();
        X2PCommaDeclarator node = new X2PCommaDeclarator(node1);
        return node;
    }

    Node new168()
    {
        TIdentifier node1 = (TIdentifier) pop();
        AIdentifierDeclarator node = new AIdentifierDeclarator(node1);
        return node;
    }

    Node new169()
    {
        PArrayDeclarator node1 = (PArrayDeclarator) pop();
        AArrayDeclaratorDeclarator node = new AArrayDeclaratorDeclarator(node1);
        return node;
    }

    Node new170()
    {
        PStructForwardDcl node1 = (PStructForwardDcl) pop();
        AForwardDclStructType node = new AForwardDclStructType(node1);
        return node;
    }

    Node new171()
    {
        PStructDcl node1 = (PStructDcl) pop();
        AStructDclStructType node = new AStructDclStructType(node1);
        return node;
    }

    Node new172()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TStruct node1 = (TStruct) pop();
        AStructForwardDcl node = new AStructForwardDcl(node1, node2);
        return node;
    }

    Node new173()
    {
        TRBrace node5 = (TRBrace) pop();
        XPMember node4 = (XPMember) pop();
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TStruct node1 = (TStruct) pop();
        AStructDcl node = new AStructDcl(node1, node2, node3, node4, node5);
        return node;
    }

    Node new174()
    {
        TSemicolon node3 = (TSemicolon) pop();
        PDeclarators node2 = (PDeclarators) pop();
        PTypeSpec node1 = (PTypeSpec) pop();
        AMember node = new AMember(node1, node2, node3);
        return node;
    }

    Node new175()
    {
        PUnionForwardDcl node1 = (PUnionForwardDcl) pop();
        AForwardDclUnionType node = new AForwardDclUnionType(node1);
        return node;
    }

    Node new176()
    {
        PUnionDcl node1 = (PUnionDcl) pop();
        AUnionDclUnionType node = new AUnionDclUnionType(node1);
        return node;
    }

    Node new177()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TUnion node1 = (TUnion) pop();
        AUnionForwardDcl node = new AUnionForwardDcl(node1, node2);
        return node;
    }

    Node new178()
    {
        TRBrace node9 = (TRBrace) pop();
        XPCaseBody node8 = (XPCaseBody) pop();
        TLBrace node7 = (TLBrace) pop();
        TRParenthese node6 = (TRParenthese) pop();
        PSwitchTypeSpec node5 = (PSwitchTypeSpec) pop();
        TLParenthese node4 = (TLParenthese) pop();
        TSwitch node3 = (TSwitch) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TUnion node1 = (TUnion) pop();
        AUnionDcl node = new AUnionDcl(node1, node2, node3, node4, node5, node6, node7, node8, node9);
        return node;
    }

    Node new179()
    {
        PCaseBody node2 = (PCaseBody) pop();
        XPCaseBody node1 = (XPCaseBody) pop();
        X1PCaseBody node = new X1PCaseBody(node1, node2);
        return node;
    }

    Node new180()
    {
        PCaseBody node1 = (PCaseBody) pop();
        X2PCaseBody node = new X2PCaseBody(node1);
        return node;
    }

    Node new181()
    {
        TLong node1 = (TLong) pop();
        ALongSwitchTypeSpec node = new ALongSwitchTypeSpec(node1);
        return node;
    }

    Node new182()
    {
        TShort node1 = (TShort) pop();
        AShortSwitchTypeSpec node = new AShortSwitchTypeSpec(node1);
        return node;
    }

    Node new183()
    {
        PSignedLonglongInt node1 = (PSignedLonglongInt) pop();
        ALonglongSwitchTypeSpec node = new ALonglongSwitchTypeSpec(node1);
        return node;
    }

    Node new184()
    {
        PUnsignedLongInt node1 = (PUnsignedLongInt) pop();
        AUlongSwitchTypeSpec node = new AUlongSwitchTypeSpec(node1);
        return node;
    }

    Node new185()
    {
        PUnsignedShortInt node1 = (PUnsignedShortInt) pop();
        AUshortSwitchTypeSpec node = new AUshortSwitchTypeSpec(node1);
        return node;
    }

    Node new186()
    {
        PUnsignedLonglongInt node1 = (PUnsignedLonglongInt) pop();
        AUlonglongSwitchTypeSpec node = new AUlonglongSwitchTypeSpec(node1);
        return node;
    }

    Node new187()
    {
        TChar node1 = (TChar) pop();
        ACharSwitchTypeSpec node = new ACharSwitchTypeSpec(node1);
        return node;
    }

    Node new188()
    {
        TBoolean node1 = (TBoolean) pop();
        ABooleanSwitchTypeSpec node = new ABooleanSwitchTypeSpec(node1);
        return node;
    }

    Node new189()
    {
        PEnumType node1 = (PEnumType) pop();
        AEnumSwitchTypeSpec node = new AEnumSwitchTypeSpec(node1);
        return node;
    }

    Node new190()
    {
        PScopedName node1 = (PScopedName) pop();
        AScopedSwitchTypeSpec node = new AScopedSwitchTypeSpec(node1);
        return node;
    }

    Node new191()
    {
        TSemicolon node4 = (TSemicolon) pop();
        PDeclarator node3 = (PDeclarator) pop();
        PTypeSpec node2 = (PTypeSpec) pop();
        XPCaseLabel node1 = (XPCaseLabel) pop();
        ACaseBody node = new ACaseBody(node1, node2, node3, node4);
        return node;
    }

    Node new192()
    {
        PCaseLabel node2 = (PCaseLabel) pop();
        XPCaseLabel node1 = (XPCaseLabel) pop();
        X1PCaseLabel node = new X1PCaseLabel(node1, node2);
        return node;
    }

    Node new193()
    {
        PCaseLabel node1 = (PCaseLabel) pop();
        X2PCaseLabel node = new X2PCaseLabel(node1);
        return node;
    }

    Node new194()
    {
        TColon node3 = (TColon) pop();
        POrExpr node2 = (POrExpr) pop();
        TCase node1 = (TCase) pop();
        AOrExprCaseLabel node = new AOrExprCaseLabel(node1, node2, node3);
        return node;
    }

    Node new195()
    {
        TColon node2 = (TColon) pop();
        TDefault node1 = (TDefault) pop();
        ADefaultCaseLabel node = new ADefaultCaseLabel(node1, node2);
        return node;
    }

    Node new196()
    {
        TRBrace node6 = (TRBrace) pop();
        XPCommaIdentifier node5 = null;
        TIdentifier node4 = (TIdentifier) pop();
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TEnum node1 = (TEnum) pop();
        AEnumType node = new AEnumType(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new197()
    {
        TRBrace node6 = (TRBrace) pop();
        XPCommaIdentifier node5 = (XPCommaIdentifier) pop();
        TIdentifier node4 = (TIdentifier) pop();
        TLBrace node3 = (TLBrace) pop();
        TIdentifier node2 = (TIdentifier) pop();
        TEnum node1 = (TEnum) pop();
        AEnumType node = new AEnumType(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new198()
    {
        PCommaIdentifier node2 = (PCommaIdentifier) pop();
        XPCommaIdentifier node1 = (XPCommaIdentifier) pop();
        X1PCommaIdentifier node = new X1PCommaIdentifier(node1, node2);
        return node;
    }

    Node new199()
    {
        PCommaIdentifier node1 = (PCommaIdentifier) pop();
        X2PCommaIdentifier node = new X2PCommaIdentifier(node1);
        return node;
    }

    Node new200()
    {
        TGt node6 = (TGt) pop();
        POrExpr node5 = (POrExpr) pop();
        TComma node4 = (TComma) pop();
        PSimpleTypeSpec node3 = (PSimpleTypeSpec) pop();
        TLt node2 = (TLt) pop();
        TSequence node1 = (TSequence) pop();
        ASimplePositiveSequenceType node = new ASimplePositiveSequenceType(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new201()
    {
        TGt node4 = (TGt) pop();
        PSimpleTypeSpec node3 = (PSimpleTypeSpec) pop();
        TLt node2 = (TLt) pop();
        TSequence node1 = (TSequence) pop();
        ASimpleSequenceType node = new ASimpleSequenceType(node1, node2, node3, node4);
        return node;
    }

    Node new202()
    {
        TGt node4 = (TGt) pop();
        POrExpr node3 = (POrExpr) pop();
        TLt node2 = (TLt) pop();
        TString node1 = (TString) pop();
        APositiveStringType node = new APositiveStringType(node1, node2, node3, node4);
        return node;
    }

    Node new203()
    {
        TString node1 = (TString) pop();
        ASimpleStringType node = new ASimpleStringType(node1);
        return node;
    }

    Node new204()
    {
        TGt node4 = (TGt) pop();
        POrExpr node3 = (POrExpr) pop();
        TLt node2 = (TLt) pop();
        TWstring node1 = (TWstring) pop();
        APositiveWideStringType node = new APositiveWideStringType(node1, node2, node3, node4);
        return node;
    }

    Node new205()
    {
        TWstring node1 = (TWstring) pop();
        ASimpleWideStringType node = new ASimpleWideStringType(node1);
        return node;
    }

    Node new206()
    {
        XPFixedArraySize node2 = (XPFixedArraySize) pop();
        TIdentifier node1 = (TIdentifier) pop();
        AArrayDeclarator node = new AArrayDeclarator(node1, node2);
        return node;
    }

    Node new207()
    {
        PFixedArraySize node2 = (PFixedArraySize) pop();
        XPFixedArraySize node1 = (XPFixedArraySize) pop();
        X1PFixedArraySize node = new X1PFixedArraySize(node1, node2);
        return node;
    }

    Node new208()
    {
        PFixedArraySize node1 = (PFixedArraySize) pop();
        X2PFixedArraySize node = new X2PFixedArraySize(node1);
        return node;
    }

    Node new209()
    {
        TRBracket node3 = (TRBracket) pop();
        POrExpr node2 = (POrExpr) pop();
        TLBracket node1 = (TLBracket) pop();
        AFixedArraySize node = new AFixedArraySize(node1, node2, node3);
        return node;
    }

    Node new210()
    {
        XPCommaIdentifier node5 = null;
        TIdentifier node4 = (TIdentifier) pop();
        PParamTypeSpec node3 = (PParamTypeSpec) pop();
        TAttribute node2 = (TAttribute) pop();
        TReadonly node1 = null;
        AAttrDcl node = new AAttrDcl(node1, node2, node3, node4, node5);
        return node;
    }

    Node new211()
    {
        XPCommaIdentifier node5 = null;
        TIdentifier node4 = (TIdentifier) pop();
        PParamTypeSpec node3 = (PParamTypeSpec) pop();
        TAttribute node2 = (TAttribute) pop();
        TReadonly node1 = (TReadonly) pop();
        AAttrDcl node = new AAttrDcl(node1, node2, node3, node4, node5);
        return node;
    }

    Node new212()
    {
        XPCommaIdentifier node5 = (XPCommaIdentifier) pop();
        TIdentifier node4 = (TIdentifier) pop();
        PParamTypeSpec node3 = (PParamTypeSpec) pop();
        TAttribute node2 = (TAttribute) pop();
        TReadonly node1 = null;
        AAttrDcl node = new AAttrDcl(node1, node2, node3, node4, node5);
        return node;
    }

    Node new213()
    {
        XPCommaIdentifier node5 = (XPCommaIdentifier) pop();
        TIdentifier node4 = (TIdentifier) pop();
        PParamTypeSpec node3 = (PParamTypeSpec) pop();
        TAttribute node2 = (TAttribute) pop();
        TReadonly node1 = (TReadonly) pop();
        AAttrDcl node = new AAttrDcl(node1, node2, node3, node4, node5);
        return node;
    }

    Node new214()
    {
        PContextExpr node6 = null;
        PRaisesExpr node5 = null;
        PParameterDcls node4 = (PParameterDcls) pop();
        TIdentifier node3 = (TIdentifier) pop();
        POpTypeSpec node2 = (POpTypeSpec) pop();
        TOneway node1 = null;
        AOpDcl node = new AOpDcl(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new215()
    {
        PContextExpr node6 = null;
        PRaisesExpr node5 = null;
        PParameterDcls node4 = (PParameterDcls) pop();
        TIdentifier node3 = (TIdentifier) pop();
        POpTypeSpec node2 = (POpTypeSpec) pop();
        TOneway node1 = (TOneway) pop();
        AOpDcl node = new AOpDcl(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new216()
    {
        PContextExpr node6 = null;
        PRaisesExpr node5 = (PRaisesExpr) pop();
        PParameterDcls node4 = (PParameterDcls) pop();
        TIdentifier node3 = (TIdentifier) pop();
        POpTypeSpec node2 = (POpTypeSpec) pop();
        TOneway node1 = null;
        AOpDcl node = new AOpDcl(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new217()
    {
        PContextExpr node6 = null;
        PRaisesExpr node5 = (PRaisesExpr) pop();
        PParameterDcls node4 = (PParameterDcls) pop();
        TIdentifier node3 = (TIdentifier) pop();
        POpTypeSpec node2 = (POpTypeSpec) pop();
        TOneway node1 = (TOneway) pop();
        AOpDcl node = new AOpDcl(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new218()
    {
        PContextExpr node6 = (PContextExpr) pop();
        PRaisesExpr node5 = null;
        PParameterDcls node4 = (PParameterDcls) pop();
        TIdentifier node3 = (TIdentifier) pop();
        POpTypeSpec node2 = (POpTypeSpec) pop();
        TOneway node1 = null;
        AOpDcl node = new AOpDcl(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new219()
    {
        PContextExpr node6 = (PContextExpr) pop();
        PRaisesExpr node5 = null;
        PParameterDcls node4 = (PParameterDcls) pop();
        TIdentifier node3 = (TIdentifier) pop();
        POpTypeSpec node2 = (POpTypeSpec) pop();
        TOneway node1 = (TOneway) pop();
        AOpDcl node = new AOpDcl(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new220()
    {
        PContextExpr node6 = (PContextExpr) pop();
        PRaisesExpr node5 = (PRaisesExpr) pop();
        PParameterDcls node4 = (PParameterDcls) pop();
        TIdentifier node3 = (TIdentifier) pop();
        POpTypeSpec node2 = (POpTypeSpec) pop();
        TOneway node1 = null;
        AOpDcl node = new AOpDcl(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new221()
    {
        PContextExpr node6 = (PContextExpr) pop();
        PRaisesExpr node5 = (PRaisesExpr) pop();
        PParameterDcls node4 = (PParameterDcls) pop();
        TIdentifier node3 = (TIdentifier) pop();
        POpTypeSpec node2 = (POpTypeSpec) pop();
        TOneway node1 = (TOneway) pop();
        AOpDcl node = new AOpDcl(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new222()
    {
        PParamTypeSpec node1 = (PParamTypeSpec) pop();
        AParamTypeSpecOpTypeSpec node = new AParamTypeSpecOpTypeSpec(node1);
        return node;
    }

    Node new223()
    {
        TVoid node1 = (TVoid) pop();
        AVoidOpTypeSpec node = new AVoidOpTypeSpec(node1);
        return node;
    }

    Node new224()
    {
        TRParenthese node4 = (TRParenthese) pop();
        XPCommaParamDcl node3 = null;
        PParamDcl node2 = (PParamDcl) pop();
        TLParenthese node1 = (TLParenthese) pop();
        AParamDclParameterDcls node = new AParamDclParameterDcls(node1, node2, node3, node4);
        return node;
    }

    Node new225()
    {
        TRParenthese node4 = (TRParenthese) pop();
        XPCommaParamDcl node3 = (XPCommaParamDcl) pop();
        PParamDcl node2 = (PParamDcl) pop();
        TLParenthese node1 = (TLParenthese) pop();
        AParamDclParameterDcls node = new AParamDclParameterDcls(node1, node2, node3, node4);
        return node;
    }

    Node new226()
    {
        PCommaParamDcl node2 = (PCommaParamDcl) pop();
        XPCommaParamDcl node1 = (XPCommaParamDcl) pop();
        X1PCommaParamDcl node = new X1PCommaParamDcl(node1, node2);
        return node;
    }

    Node new227()
    {
        PCommaParamDcl node1 = (PCommaParamDcl) pop();
        X2PCommaParamDcl node = new X2PCommaParamDcl(node1);
        return node;
    }

    Node new228()
    {
        TRParenthese node2 = (TRParenthese) pop();
        TLParenthese node1 = (TLParenthese) pop();
        AEmptyParameterDcls node = new AEmptyParameterDcls(node1, node2);
        return node;
    }

    Node new229()
    {
        PDeclarator node3 = (PDeclarator) pop();
        PParamTypeSpec node2 = (PParamTypeSpec) pop();
        PParamAttribute node1 = (PParamAttribute) pop();
        AParamDcl node = new AParamDcl(node1, node2, node3);
        return node;
    }

    Node new230()
    {
        TRParenthese node5 = (TRParenthese) pop();
        XPCommaScopedName node4 = null;
        PScopedName node3 = (PScopedName) pop();
        TLParenthese node2 = (TLParenthese) pop();
        TRaises node1 = (TRaises) pop();
        ARaisesExpr node = new ARaisesExpr(node1, node2, node3, node4, node5);
        return node;
    }

    Node new231()
    {
        TRParenthese node5 = (TRParenthese) pop();
        XPCommaScopedName node4 = (XPCommaScopedName) pop();
        PScopedName node3 = (PScopedName) pop();
        TLParenthese node2 = (TLParenthese) pop();
        TRaises node1 = (TRaises) pop();
        ARaisesExpr node = new ARaisesExpr(node1, node2, node3, node4, node5);
        return node;
    }

    Node new232()
    {
        TRParenthese node5 = (TRParenthese) pop();
        XPCommaStringLiteral node4 = null;
        TStringLiteral node3 = (TStringLiteral) pop();
        TLParenthese node2 = (TLParenthese) pop();
        TContext node1 = (TContext) pop();
        AContextExpr node = new AContextExpr(node1, node2, node3, node4, node5);
        return node;
    }

    Node new233()
    {
        TRParenthese node5 = (TRParenthese) pop();
        XPCommaStringLiteral node4 = (XPCommaStringLiteral) pop();
        TStringLiteral node3 = (TStringLiteral) pop();
        TLParenthese node2 = (TLParenthese) pop();
        TContext node1 = (TContext) pop();
        AContextExpr node = new AContextExpr(node1, node2, node3, node4, node5);
        return node;
    }

    Node new234()
    {
        PCommaStringLiteral node2 = (PCommaStringLiteral) pop();
        XPCommaStringLiteral node1 = (XPCommaStringLiteral) pop();
        X1PCommaStringLiteral node = new X1PCommaStringLiteral(node1, node2);
        return node;
    }

    Node new235()
    {
        PCommaStringLiteral node1 = (PCommaStringLiteral) pop();
        X2PCommaStringLiteral node = new X2PCommaStringLiteral(node1);
        return node;
    }

    Node new236()
    {
        PBaseTypeSpec node1 = (PBaseTypeSpec) pop();
        ABaseParamTypeSpec node = new ABaseParamTypeSpec(node1);
        return node;
    }

    Node new237()
    {
        PStringType node1 = (PStringType) pop();
        AStringParamTypeSpec node = new AStringParamTypeSpec(node1);
        return node;
    }

    Node new238()
    {
        PWideStringType node1 = (PWideStringType) pop();
        AWideParamTypeSpec node = new AWideParamTypeSpec(node1);
        return node;
    }

    Node new239()
    {
        PScopedName node1 = (PScopedName) pop();
        AScopedParamTypeSpec node = new AScopedParamTypeSpec(node1);
        return node;
    }

    Node new240()
    {
        TGt node6 = (TGt) pop();
        POrExpr node5 = (POrExpr) pop();
        TComma node4 = (TComma) pop();
        POrExpr node3 = (POrExpr) pop();
        TLt node2 = (TLt) pop();
        TFixed node1 = (TFixed) pop();
        AFixedPtType node = new AFixedPtType(node1, node2, node3, node4, node5, node6);
        return node;
    }

    Node new241()
    {
        TMinus node1 = (TMinus) pop();
        AMinusUnaryOperator node = new AMinusUnaryOperator(node1);
        return node;
    }

    Node new242()
    {
        TPlus node1 = (TPlus) pop();
        APlusUnaryOperator node = new APlusUnaryOperator(node1);
        return node;
    }

    Node new243()
    {
        TTilde node1 = (TTilde) pop();
        ATildeUnaryOperator node = new ATildeUnaryOperator(node1);
        return node;
    }

    Node new244()
    {
        TTrue node1 = (TTrue) pop();
        ATrueBooleanLiteral node = new ATrueBooleanLiteral(node1);
        return node;
    }

    Node new245()
    {
        TFalse node1 = (TFalse) pop();
        AFalseBooleanLiteral node = new AFalseBooleanLiteral(node1);
        return node;
    }

    Node new246()
    {
        TIn node1 = (TIn) pop();
        AInParamAttribute node = new AInParamAttribute(node1);
        return node;
    }

    Node new247()
    {
        TOut node1 = (TOut) pop();
        AOutParamAttribute node = new AOutParamAttribute(node1);
        return node;
    }

    Node new248()
    {
        TInout node1 = (TInout) pop();
        AInoutParamAttribute node = new AInoutParamAttribute(node1);
        return node;
    }

    Node new249()
    {
        TFloat node1 = (TFloat) pop();
        AFloatFloatingPtType node = new AFloatFloatingPtType(node1);
        return node;
    }

    Node new250()
    {
        TDouble node1 = (TDouble) pop();
        ADoubleFloatingPtType node = new ADoubleFloatingPtType(node1);
        return node;
    }

    Node new251()
    {
        TDouble node2 = (TDouble) pop();
        TLong node1 = (TLong) pop();
        ALondDoubleFloatingPtType node = new ALondDoubleFloatingPtType(node1, node2);
        return node;
    }

    Node new252()
    {
        TShort node2 = (TShort) pop();
        TUnsigned node1 = (TUnsigned) pop();
        AUnsignedShortInt node = new AUnsignedShortInt(node1, node2);
        return node;
    }

    Node new253()
    {
        TLong node2 = (TLong) pop();
        TUnsigned node1 = (TUnsigned) pop();
        AUnsignedLongInt node = new AUnsignedLongInt(node1, node2);
        return node;
    }

    Node new254()
    {
        TLong node3 = (TLong) pop();
        TLong node2 = (TLong) pop();
        TUnsigned node1 = (TUnsigned) pop();
        AUnsignedLonglongInt node = new AUnsignedLonglongInt(node1, node2, node3);
        return node;
    }

    Node new255()
    {
        TLong node2 = (TLong) pop();
        TLong node1 = (TLong) pop();
        ASignedLonglongInt node = new ASignedLonglongInt(node1, node2);
        return node;
    }

    Node new256()
    {
        PScopedName node2 = (PScopedName) pop();
        TComma node1 = (TComma) pop();
        ACommaScopedName node = new ACommaScopedName(node1, node2);
        return node;
    }

    Node new257()
    {
        TIdentifier node2 = (TIdentifier) pop();
        TComma node1 = (TComma) pop();
        ACommaIdentifier node = new ACommaIdentifier(node1, node2);
        return node;
    }

    Node new258()
    {
        PParamDcl node2 = (PParamDcl) pop();
        TComma node1 = (TComma) pop();
        ACommaParamDcl node = new ACommaParamDcl(node1, node2);
        return node;
    }

    Node new259()
    {
        PDeclarator node2 = (PDeclarator) pop();
        TComma node1 = (TComma) pop();
        ACommaDeclarator node = new ACommaDeclarator(node1, node2);
        return node;
    }

    Node new260()
    {
        PInitParamDecl node2 = (PInitParamDecl) pop();
        TComma node1 = (TComma) pop();
        ACommaInitParamDecl node = new ACommaInitParamDecl(node1, node2);
        return node;
    }

    Node new261()
    {
        TStringLiteral node2 = (TStringLiteral) pop();
        TComma node1 = (TComma) pop();
        ACommaStringLiteral node = new ACommaStringLiteral(node1, node2);
        return node;
    }

    Node new262()
    {
        PDeclarators node3 = (PDeclarators) pop();
        PTypeSpec node2 = (PTypeSpec) pop();
        TTypedef node1 = (TTypedef) pop();
        ATypeDeclarator node = new ATypeDeclarator(node1, node2, node3);
        return node;
    }

    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {19, SHIFT, 6}, {20, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {43, SHIFT, 13}, {47, SHIFT, 14}, {48, SHIFT, 15}, },
			{{-1, REDUCE, 38}, {43, SHIFT, 44}, },
			{{-1, ERROR, 2}, {3, SHIFT, 45}, {5, SHIFT, 46}, {10, SHIFT, 47}, {15, SHIFT, 48}, {16, SHIFT, 49}, {21, SHIFT, 50}, {24, SHIFT, 51}, {32, SHIFT, 52}, {33, SHIFT, 53}, {41, SHIFT, 54}, {45, SHIFT, 55}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 3}, {43, SHIFT, 68}, },
			{{-1, ERROR, 4}, {81, SHIFT, 69}, },
			{{-1, ERROR, 5}, {81, SHIFT, 70}, },
			{{-1, ERROR, 6}, {81, SHIFT, 71}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 8}, {81, SHIFT, 72}, },
			{{-1, ERROR, 9}, {81, SHIFT, 73}, },
			{{-1, ERROR, 10}, {81, SHIFT, 74}, },
			{{-1, ERROR, 11}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {11, SHIFT, 4}, {15, SHIFT, 78}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {31, SHIFT, 81}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 12}, {81, SHIFT, 103}, },
			{{-1, ERROR, 13}, {81, SHIFT, 104}, },
			{{-1, ERROR, 14}, {81, SHIFT, 105}, },
			{{-1, ERROR, 15}, {81, SHIFT, 106}, },
			{{-1, ERROR, 16}, {83, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 18}, {55, SHIFT, 107}, },
			{{-1, ERROR, 19}, {55, SHIFT, 108}, },
			{{-1, ERROR, 20}, {55, SHIFT, 109}, },
			{{-1, ERROR, 21}, {55, SHIFT, 110}, },
			{{-1, ERROR, 22}, {55, SHIFT, 111}, },
			{{-1, ERROR, 23}, {55, SHIFT, 112}, },
			{{-1, ERROR, 24}, {55, SHIFT, 113}, },
			{{-1, ERROR, 25}, {55, SHIFT, 114}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 40}, {55, REDUCE, 25}, {57, SHIFT, 115}, },
			{{-1, ERROR, 28}, {19, SHIFT, 117}, },
			{{-1, ERROR, 29}, {51, SHIFT, 118}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 34}, {51, SHIFT, 119}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 170}, },
			{{-1, REDUCE, 171}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 175}, },
			{{-1, REDUCE, 176}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {19, SHIFT, 6}, {20, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {43, SHIFT, 13}, {47, SHIFT, 14}, {48, SHIFT, 15}, },
			{{-1, ERROR, 44}, {81, SHIFT, 121}, },
			{{-1, REDUCE, 103}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 250}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 249}, },
			{{-1, REDUCE, 95}, {10, SHIFT, 122}, {21, SHIFT, 123}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 203}, {60, SHIFT, 124}, },
			{{-1, ERROR, 54}, {21, SHIFT, 125}, {32, SHIFT, 126}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 205}, {60, SHIFT, 127}, },
			{{-1, ERROR, 57}, {81, SHIFT, 128}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 108}, {58, SHIFT, 129}, },
			{{-1, ERROR, 60}, {81, SHIFT, 130}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 104}, },
			{{-1, REDUCE, 99}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 97}, },
			{{-1, ERROR, 68}, {81, SHIFT, 131}, },
			{{-1, ERROR, 69}, {51, SHIFT, 132}, },
			{{-1, ERROR, 70}, {51, SHIFT, 133}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 72}, {51, SHIFT, 134}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 172}, {51, SHIFT, 135}, },
			{{-1, REDUCE, 155}, },
			{{-1, REDUCE, 153}, },
			{{-1, REDUCE, 151}, },
			{{-1, ERROR, 78}, {60, SHIFT, 136}, },
			{{-1, REDUCE, 145}, {10, SHIFT, 122}, {21, SHIFT, 123}, },
			{{-1, REDUCE, 154}, },
			{{-1, ERROR, 81}, {60, SHIFT, 137}, },
			{{-1, REDUCE, 146}, },
			{{-1, REDUCE, 156}, },
			{{-1, REDUCE, 152}, },
			{{-1, REDUCE, 143}, {58, SHIFT, 129}, },
			{{-1, ERROR, 86}, {81, SHIFT, 138}, },
			{{-1, REDUCE, 139}, },
			{{-1, REDUCE, 141}, },
			{{-1, REDUCE, 142}, },
			{{-1, REDUCE, 140}, },
			{{-1, REDUCE, 161}, },
			{{-1, REDUCE, 162}, },
			{{-1, REDUCE, 163}, },
			{{-1, REDUCE, 157}, },
			{{-1, REDUCE, 158}, },
			{{-1, REDUCE, 159}, },
			{{-1, REDUCE, 160}, },
			{{-1, REDUCE, 144}, },
			{{-1, REDUCE, 149}, },
			{{-1, REDUCE, 148}, },
			{{-1, REDUCE, 150}, },
			{{-1, REDUCE, 147}, },
			{{-1, REDUCE, 177}, {36, SHIFT, 142}, },
			{{-1, REDUCE, 65}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {11, SHIFT, 4}, {15, SHIFT, 78}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {31, SHIFT, 81}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {35, SHIFT, 143}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {55, REDUCE, 54}, {57, SHIFT, 144}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 105}, {79, SHIFT, 147}, },
			{{-1, ERROR, 106}, {79, SHIFT, 148}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 115}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 117}, {81, SHIFT, 150}, },
			{{-1, ERROR, 118}, {1, SHIFT, 75}, {2, SHIFT, 151}, {3, SHIFT, 76}, {5, SHIFT, 77}, {6, SHIFT, 2}, {10, SHIFT, 47}, {11, SHIFT, 4}, {12, SHIFT, 5}, {16, SHIFT, 49}, {21, SHIFT, 79}, {23, SHIFT, 9}, {24, SHIFT, 80}, {25, SHIFT, 152}, {30, SHIFT, 153}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {44, SHIFT, 154}, {45, SHIFT, 84}, {46, SHIFT, 56}, {52, SHIFT, 155}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 119}, {1, SHIFT, 75}, {2, SHIFT, 151}, {3, SHIFT, 76}, {5, SHIFT, 77}, {6, SHIFT, 2}, {10, SHIFT, 47}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 169}, {16, SHIFT, 49}, {21, SHIFT, 79}, {23, SHIFT, 9}, {24, SHIFT, 80}, {25, SHIFT, 152}, {27, SHIFT, 170}, {28, SHIFT, 171}, {30, SHIFT, 153}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {44, SHIFT, 154}, {45, SHIFT, 84}, {46, SHIFT, 56}, {52, SHIFT, 172}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 55}, {35, SHIFT, 143}, {51, SHIFT, 178}, {57, SHIFT, 144}, },
			{{-1, REDUCE, 251}, },
			{{-1, REDUCE, 255}, },
			{{-1, ERROR, 124}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 253}, {21, SHIFT, 205}, },
			{{-1, REDUCE, 252}, },
			{{-1, ERROR, 127}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 129}, {81, SHIFT, 207}, },
			{{-1, ERROR, 130}, {59, SHIFT, 208}, },
			{{-1, REDUCE, 66}, {35, SHIFT, 143}, {57, SHIFT, 144}, },
			{{-1, ERROR, 132}, {81, SHIFT, 210}, },
			{{-1, ERROR, 133}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {11, SHIFT, 4}, {15, SHIFT, 78}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {31, SHIFT, 81}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {52, SHIFT, 211}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 134}, {0, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {19, SHIFT, 6}, {20, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {43, SHIFT, 13}, {47, SHIFT, 14}, {48, SHIFT, 15}, {52, SHIFT, 215}, },
			{{-1, ERROR, 135}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {11, SHIFT, 4}, {15, SHIFT, 78}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {31, SHIFT, 81}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 136}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 137}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {15, SHIFT, 78}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {31, SHIFT, 81}, {32, SHIFT, 82}, {33, SHIFT, 53}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 168}, {53, SHIFT, 220}, },
			{{-1, REDUCE, 262}, },
			{{-1, REDUCE, 164}, {56, SHIFT, 223}, },
			{{-1, REDUCE, 169}, },
			{{-1, ERROR, 142}, {49, SHIFT, 226}, },
			{{-1, ERROR, 143}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 144}, {38, SHIFT, 228}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 47}, {56, SHIFT, 230}, {58, SHIFT, 129}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 151}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {32, SHIFT, 82}, {33, SHIFT, 53}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 152}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {32, SHIFT, 82}, {33, SHIFT, 53}, {41, SHIFT, 54}, {42, SHIFT, 83}, {44, SHIFT, 154}, {45, SHIFT, 84}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 153}, {2, SHIFT, 235}, },
			{{-1, REDUCE, 223}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 156}, {55, SHIFT, 236}, },
			{{-1, ERROR, 157}, {55, SHIFT, 237}, },
			{{-1, ERROR, 158}, {55, SHIFT, 238}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 239}, {58, SHIFT, 129}, },
			{{-1, REDUCE, 236}, },
			{{-1, REDUCE, 237}, },
			{{-1, REDUCE, 238}, },
			{{-1, ERROR, 164}, {55, SHIFT, 239}, },
			{{-1, ERROR, 165}, {55, SHIFT, 240}, },
			{{-1, ERROR, 166}, {81, SHIFT, 241}, },
			{{-1, REDUCE, 222}, },
			{{-1, ERROR, 168}, {1, SHIFT, 75}, {2, SHIFT, 151}, {3, SHIFT, 76}, {5, SHIFT, 77}, {6, SHIFT, 2}, {10, SHIFT, 47}, {11, SHIFT, 4}, {12, SHIFT, 5}, {16, SHIFT, 49}, {21, SHIFT, 79}, {23, SHIFT, 9}, {24, SHIFT, 80}, {25, SHIFT, 152}, {30, SHIFT, 153}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {44, SHIFT, 154}, {45, SHIFT, 84}, {46, SHIFT, 56}, {52, SHIFT, 242}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 169}, {81, SHIFT, 244}, },
			{{-1, ERROR, 170}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {11, SHIFT, 4}, {15, SHIFT, 78}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {31, SHIFT, 81}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 171}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {11, SHIFT, 4}, {15, SHIFT, 78}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {31, SHIFT, 81}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 177}, {1, SHIFT, 75}, {2, SHIFT, 151}, {3, SHIFT, 76}, {5, SHIFT, 77}, {6, SHIFT, 2}, {10, SHIFT, 47}, {11, SHIFT, 4}, {12, SHIFT, 5}, {13, SHIFT, 169}, {16, SHIFT, 49}, {21, SHIFT, 79}, {23, SHIFT, 9}, {24, SHIFT, 80}, {25, SHIFT, 152}, {27, SHIFT, 170}, {28, SHIFT, 171}, {30, SHIFT, 153}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {44, SHIFT, 154}, {45, SHIFT, 84}, {46, SHIFT, 56}, {52, SHIFT, 247}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 178}, {1, SHIFT, 75}, {2, SHIFT, 151}, {3, SHIFT, 76}, {5, SHIFT, 77}, {6, SHIFT, 2}, {10, SHIFT, 47}, {11, SHIFT, 4}, {12, SHIFT, 5}, {16, SHIFT, 49}, {21, SHIFT, 79}, {23, SHIFT, 9}, {24, SHIFT, 80}, {25, SHIFT, 152}, {30, SHIFT, 153}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {44, SHIFT, 154}, {45, SHIFT, 84}, {46, SHIFT, 56}, {52, SHIFT, 249}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 179}, {51, SHIFT, 251}, },
			{{-1, REDUCE, 245}, },
			{{-1, REDUCE, 244}, },
			{{-1, ERROR, 182}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 243}, },
			{{-1, REDUCE, 242}, },
			{{-1, REDUCE, 241}, },
			{{-1, REDUCE, 131}, },
			{{-1, REDUCE, 138}, },
			{{-1, REDUCE, 134}, },
			{{-1, REDUCE, 133}, },
			{{-1, REDUCE, 137}, },
			{{-1, REDUCE, 132}, },
			{{-1, REDUCE, 136}, },
			{{-1, REDUCE, 128}, {58, SHIFT, 129}, },
			{{-1, ERROR, 194}, {61, SHIFT, 253}, {68, SHIFT, 254}, },
			{{-1, REDUCE, 110}, {69, SHIFT, 255}, },
			{{-1, REDUCE, 112}, {67, SHIFT, 256}, },
			{{-1, REDUCE, 114}, {71, SHIFT, 257}, {72, SHIFT, 258}, },
			{{-1, REDUCE, 116}, {63, SHIFT, 259}, {64, SHIFT, 260}, },
			{{-1, REDUCE, 119}, {65, SHIFT, 261}, {66, SHIFT, 262}, {70, SHIFT, 263}, },
			{{-1, REDUCE, 122}, },
			{{-1, REDUCE, 127}, },
			{{-1, REDUCE, 129}, },
			{{-1, ERROR, 203}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 135}, },
			{{-1, REDUCE, 254}, },
			{{-1, ERROR, 206}, {61, SHIFT, 265}, {68, SHIFT, 254}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 208}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 210}, {52, SHIFT, 267}, {56, SHIFT, 268}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 212}, {81, SHIFT, 138}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 214}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {11, SHIFT, 4}, {15, SHIFT, 78}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {31, SHIFT, 81}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {52, SHIFT, 272}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 216}, {0, SHIFT, 1}, {6, SHIFT, 2}, {8, SHIFT, 3}, {11, SHIFT, 4}, {12, SHIFT, 5}, {19, SHIFT, 6}, {20, SHIFT, 7}, {22, SHIFT, 8}, {23, SHIFT, 9}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {43, SHIFT, 13}, {47, SHIFT, 14}, {48, SHIFT, 15}, {52, SHIFT, 274}, },
			{{-1, ERROR, 217}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {11, SHIFT, 4}, {15, SHIFT, 78}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {31, SHIFT, 81}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {52, SHIFT, 275}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 218}, {56, SHIFT, 276}, {68, SHIFT, 254}, },
			{{-1, ERROR, 219}, {56, SHIFT, 277}, {61, SHIFT, 278}, },
			{{-1, ERROR, 220}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 208}, },
			{{-1, REDUCE, 206}, {53, SHIFT, 220}, },
			{{-1, ERROR, 223}, {81, SHIFT, 138}, },
			{{-1, REDUCE, 167}, },
			{{-1, REDUCE, 165}, {56, SHIFT, 223}, },
			{{-1, ERROR, 226}, {3, SHIFT, 283}, {5, SHIFT, 284}, {11, SHIFT, 4}, {21, SHIFT, 285}, {32, SHIFT, 286}, {41, SHIFT, 54}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 73}, {56, SHIFT, 230}, {58, SHIFT, 129}, },
			{{-1, ERROR, 228}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 69}, {35, SHIFT, 296}, {56, SHIFT, 230}, {58, SHIFT, 129}, },
			{{-1, ERROR, 230}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 48}, {56, SHIFT, 230}, },
			{{-1, ERROR, 233}, {81, SHIFT, 300}, },
			{{-1, ERROR, 234}, {81, SHIFT, 301}, },
			{{-1, ERROR, 235}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {32, SHIFT, 82}, {33, SHIFT, 53}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 241}, {49, SHIFT, 303}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 244}, {49, SHIFT, 305}, },
			{{-1, ERROR, 245}, {81, SHIFT, 138}, },
			{{-1, ERROR, 246}, {81, SHIFT, 138}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 250}, {1, SHIFT, 75}, {2, SHIFT, 151}, {3, SHIFT, 76}, {5, SHIFT, 77}, {6, SHIFT, 2}, {10, SHIFT, 47}, {11, SHIFT, 4}, {12, SHIFT, 5}, {16, SHIFT, 49}, {21, SHIFT, 79}, {23, SHIFT, 9}, {24, SHIFT, 80}, {25, SHIFT, 152}, {30, SHIFT, 153}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {44, SHIFT, 154}, {45, SHIFT, 84}, {46, SHIFT, 56}, {52, SHIFT, 308}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 251}, {1, SHIFT, 75}, {2, SHIFT, 151}, {3, SHIFT, 76}, {5, SHIFT, 77}, {6, SHIFT, 2}, {10, SHIFT, 47}, {11, SHIFT, 4}, {12, SHIFT, 5}, {16, SHIFT, 49}, {21, SHIFT, 79}, {23, SHIFT, 9}, {24, SHIFT, 80}, {25, SHIFT, 152}, {30, SHIFT, 153}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {44, SHIFT, 154}, {45, SHIFT, 84}, {46, SHIFT, 56}, {52, SHIFT, 309}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 252}, {50, SHIFT, 311}, {68, SHIFT, 254}, },
			{{-1, REDUCE, 202}, },
			{{-1, ERROR, 254}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 255}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 256}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 257}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 258}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 259}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 260}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 261}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 262}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 263}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 126}, },
			{{-1, REDUCE, 204}, },
			{{-1, REDUCE, 19}, {68, SHIFT, 254}, },
			{{-1, REDUCE, 196}, },
			{{-1, ERROR, 268}, {81, SHIFT, 322}, },
			{{-1, REDUCE, 199}, },
			{{-1, ERROR, 270}, {52, SHIFT, 323}, {56, SHIFT, 268}, },
			{{-1, ERROR, 271}, {55, SHIFT, 325}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 173}, },
			{{-1, ERROR, 276}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 277}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 201}, },
			{{-1, ERROR, 279}, {54, SHIFT, 328}, {68, SHIFT, 254}, },
			{{-1, REDUCE, 207}, },
			{{-1, REDUCE, 259}, },
			{{-1, REDUCE, 166}, },
			{{-1, REDUCE, 188}, },
			{{-1, REDUCE, 187}, },
			{{-1, REDUCE, 181}, {21, SHIFT, 123}, },
			{{-1, REDUCE, 182}, },
			{{-1, REDUCE, 190}, {58, SHIFT, 129}, },
			{{-1, ERROR, 288}, {50, SHIFT, 329}, },
			{{-1, REDUCE, 189}, },
			{{-1, REDUCE, 185}, },
			{{-1, REDUCE, 184}, },
			{{-1, REDUCE, 186}, },
			{{-1, REDUCE, 183}, },
			{{-1, REDUCE, 74}, {56, SHIFT, 230}, },
			{{-1, REDUCE, 70}, {35, SHIFT, 330}, {56, SHIFT, 230}, {58, SHIFT, 129}, },
			{{-1, ERROR, 296}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 71}, {35, SHIFT, 333}, {56, SHIFT, 230}, },
			{{-1, REDUCE, 256}, {58, SHIFT, 129}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 210}, {56, SHIFT, 268}, },
			{{-1, ERROR, 301}, {49, SHIFT, 303}, },
			{{-1, ERROR, 302}, {81, SHIFT, 336}, },
			{{-1, ERROR, 303}, {17, SHIFT, 337}, {18, SHIFT, 338}, {26, SHIFT, 339}, {50, SHIFT, 340}, },
			{{-1, REDUCE, 214}, {7, SHIFT, 343}, {29, SHIFT, 344}, },
			{{-1, ERROR, 305}, {17, SHIFT, 347}, {50, SHIFT, 348}, },
			{{-1, ERROR, 306}, {55, SHIFT, 351}, },
			{{-1, ERROR, 307}, {55, SHIFT, 352}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 310}, {1, SHIFT, 75}, {2, SHIFT, 151}, {3, SHIFT, 76}, {5, SHIFT, 77}, {6, SHIFT, 2}, {10, SHIFT, 47}, {11, SHIFT, 4}, {12, SHIFT, 5}, {16, SHIFT, 49}, {21, SHIFT, 79}, {23, SHIFT, 9}, {24, SHIFT, 80}, {25, SHIFT, 152}, {30, SHIFT, 153}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {39, SHIFT, 11}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {44, SHIFT, 154}, {45, SHIFT, 84}, {46, SHIFT, 56}, {52, SHIFT, 353}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 130}, },
			{{-1, REDUCE, 111}, {69, SHIFT, 255}, },
			{{-1, REDUCE, 113}, {67, SHIFT, 256}, },
			{{-1, REDUCE, 115}, {71, SHIFT, 257}, {72, SHIFT, 258}, },
			{{-1, REDUCE, 118}, {63, SHIFT, 259}, {64, SHIFT, 260}, },
			{{-1, REDUCE, 117}, {63, SHIFT, 259}, {64, SHIFT, 260}, },
			{{-1, REDUCE, 120}, {65, SHIFT, 261}, {66, SHIFT, 262}, {70, SHIFT, 263}, },
			{{-1, REDUCE, 121}, {65, SHIFT, 261}, {66, SHIFT, 262}, {70, SHIFT, 263}, },
			{{-1, REDUCE, 123}, },
			{{-1, REDUCE, 124}, },
			{{-1, REDUCE, 125}, },
			{{-1, REDUCE, 257}, },
			{{-1, REDUCE, 197}, },
			{{-1, REDUCE, 198}, },
			{{-1, REDUCE, 174}, },
			{{-1, ERROR, 326}, {61, SHIFT, 354}, {68, SHIFT, 254}, },
			{{-1, ERROR, 327}, {61, SHIFT, 355}, {68, SHIFT, 254}, },
			{{-1, REDUCE, 209}, },
			{{-1, ERROR, 329}, {51, SHIFT, 356}, },
			{{-1, ERROR, 330}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 72}, {35, SHIFT, 358}, {56, SHIFT, 230}, },
			{{-1, REDUCE, 75}, {56, SHIFT, 230}, {58, SHIFT, 129}, },
			{{-1, ERROR, 333}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 212}, {56, SHIFT, 268}, },
			{{-1, REDUCE, 215}, {7, SHIFT, 343}, {29, SHIFT, 344}, },
			{{-1, REDUCE, 211}, {56, SHIFT, 268}, },
			{{-1, REDUCE, 246}, },
			{{-1, REDUCE, 248}, },
			{{-1, REDUCE, 247}, },
			{{-1, REDUCE, 228}, },
			{{-1, ERROR, 341}, {50, SHIFT, 364}, {56, SHIFT, 365}, },
			{{-1, ERROR, 342}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {32, SHIFT, 82}, {33, SHIFT, 53}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 343}, {49, SHIFT, 369}, },
			{{-1, ERROR, 344}, {49, SHIFT, 370}, },
			{{-1, REDUCE, 216}, {7, SHIFT, 343}, },
			{{-1, REDUCE, 218}, },
			{{-1, ERROR, 347}, {1, SHIFT, 75}, {3, SHIFT, 76}, {5, SHIFT, 77}, {10, SHIFT, 47}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {32, SHIFT, 82}, {33, SHIFT, 53}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, ERROR, 348}, {55, SHIFT, 373}, },
			{{-1, ERROR, 349}, {50, SHIFT, 374}, },
			{{-1, REDUCE, 90}, {56, SHIFT, 375}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 240}, },
			{{-1, REDUCE, 200}, },
			{{-1, ERROR, 356}, {4, SHIFT, 378}, {9, SHIFT, 379}, },
			{{-1, REDUCE, 76}, {56, SHIFT, 230}, {58, SHIFT, 129}, },
			{{-1, ERROR, 358}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 79}, {56, SHIFT, 230}, },
			{{-1, REDUCE, 77}, {56, SHIFT, 230}, {58, SHIFT, 129}, },
			{{-1, REDUCE, 217}, {7, SHIFT, 343}, },
			{{-1, REDUCE, 219}, },
			{{-1, REDUCE, 213}, {56, SHIFT, 268}, },
			{{-1, REDUCE, 224}, },
			{{-1, ERROR, 365}, {17, SHIFT, 337}, {18, SHIFT, 338}, {26, SHIFT, 339}, },
			{{-1, REDUCE, 227}, },
			{{-1, ERROR, 367}, {50, SHIFT, 389}, {56, SHIFT, 365}, },
			{{-1, ERROR, 368}, {81, SHIFT, 138}, },
			{{-1, ERROR, 369}, {79, SHIFT, 392}, },
			{{-1, ERROR, 370}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 220}, },
			{{-1, ERROR, 372}, {81, SHIFT, 394}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 374}, {55, SHIFT, 395}, },
			{{-1, ERROR, 375}, {17, SHIFT, 347}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 91}, {56, SHIFT, 375}, },
			{{-1, ERROR, 378}, {14, SHIFT, 180}, {37, SHIFT, 181}, {49, SHIFT, 182}, {58, SHIFT, 57}, {62, SHIFT, 183}, {63, SHIFT, 184}, {64, SHIFT, 185}, {74, SHIFT, 186}, {75, SHIFT, 187}, {76, SHIFT, 188}, {77, SHIFT, 189}, {78, SHIFT, 190}, {79, SHIFT, 191}, {80, SHIFT, 192}, {81, SHIFT, 58}, },
			{{-1, ERROR, 379}, {57, SHIFT, 399}, },
			{{-1, REDUCE, 180}, },
			{{-1, REDUCE, 193}, },
			{{-1, ERROR, 382}, {4, SHIFT, 378}, {9, SHIFT, 379}, {52, SHIFT, 400}, },
			{{-1, ERROR, 383}, {1, SHIFT, 75}, {3, SHIFT, 76}, {4, SHIFT, 378}, {5, SHIFT, 77}, {9, SHIFT, 379}, {10, SHIFT, 47}, {11, SHIFT, 4}, {15, SHIFT, 78}, {16, SHIFT, 49}, {21, SHIFT, 79}, {24, SHIFT, 80}, {31, SHIFT, 81}, {32, SHIFT, 82}, {33, SHIFT, 53}, {34, SHIFT, 10}, {40, SHIFT, 12}, {41, SHIFT, 54}, {42, SHIFT, 83}, {45, SHIFT, 84}, {46, SHIFT, 56}, {58, SHIFT, 57}, {81, SHIFT, 58}, },
			{{-1, REDUCE, 80}, {56, SHIFT, 230}, },
			{{-1, REDUCE, 78}, {56, SHIFT, 230}, {58, SHIFT, 129}, },
			{{-1, REDUCE, 81}, {56, SHIFT, 230}, },
			{{-1, REDUCE, 221}, },
			{{-1, REDUCE, 258}, },
			{{-1, REDUCE, 225}, },
			{{-1, REDUCE, 226}, },
			{{-1, REDUCE, 229}, },
			{{-1, ERROR, 392}, {50, SHIFT, 405}, {56, SHIFT, 406}, },
			{{-1, ERROR, 393}, {50, SHIFT, 409}, {56, SHIFT, 230}, {58, SHIFT, 129}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 260}, },
			{{-1, REDUCE, 92}, },
			{{-1, ERROR, 398}, {57, SHIFT, 411}, {68, SHIFT, 254}, },
			{{-1, REDUCE, 195}, },
			{{-1, REDUCE, 178}, },
			{{-1, REDUCE, 179}, },
			{{-1, ERROR, 402}, {81, SHIFT, 138}, },
			{{-1, REDUCE, 192}, },
			{{-1, REDUCE, 82}, {56, SHIFT, 230}, },
			{{-1, REDUCE, 232}, },
			{{-1, ERROR, 406}, {79, SHIFT, 413}, },
			{{-1, REDUCE, 235}, },
			{{-1, ERROR, 408}, {50, SHIFT, 414}, {56, SHIFT, 406}, },
			{{-1, REDUCE, 230}, },
			{{-1, ERROR, 410}, {50, SHIFT, 416}, {56, SHIFT, 230}, },
			{{-1, REDUCE, 194}, },
			{{-1, ERROR, 412}, {55, SHIFT, 417}, },
			{{-1, REDUCE, 261}, },
			{{-1, REDUCE, 233}, },
			{{-1, REDUCE, 234}, },
			{{-1, REDUCE, 231}, },
			{{-1, REDUCE, 191}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 16}, },
			{{-1, 17}, {43, 120}, {216, 120}, },
			{{-1, 156}, {0, 18}, {43, 18}, {134, 18}, {216, 18}, },
			{{-1, 19}, },
			{{-1, 20}, },
			{{-1, 157}, {0, 21}, {43, 21}, {134, 21}, {216, 21}, },
			{{-1, 158}, {0, 22}, {43, 22}, {134, 22}, {216, 22}, },
			{{-1, 23}, },
			{{-1, 24}, },
			{{-1, 25}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, 29}, },
			{{-1, 159}, {119, 173}, {168, 243}, {177, 173}, {250, 243}, {310, 243}, },
			{{-1, 116}, },
			{{-1, 193}, {2, 59}, {11, 85}, {104, 85}, {115, 149}, {118, 160}, {119, 160}, {133, 85}, {135, 85}, {137, 85}, {143, 227}, {144, 229}, {151, 160}, {152, 160}, {168, 160}, {170, 85}, {171, 85}, {177, 160}, {178, 160}, {214, 85}, {217, 85}, {226, 287}, {228, 295}, {230, 298}, {235, 160}, {250, 160}, {251, 160}, {296, 332}, {310, 160}, {330, 357}, {333, 360}, {342, 160}, {347, 160}, {358, 385}, {370, 393}, {383, 85}, },
			{{-1, 30}, },
			{{-1, 31}, },
			{{-1, 32}, },
			{{-1, 33}, },
			{{-1, 34}, },
			{{-1, 145}, {121, 179}, {131, 209}, },
			{{-1, 174}, {177, 248}, },
			{{-1, 175}, },
			{{-1, 176}, },
			{{-1, 349}, },
			{{-1, 350}, {375, 396}, },
			{{-1, 60}, },
			{{-1, 194}, {127, 206}, {136, 218}, {182, 252}, {208, 266}, {220, 279}, {276, 326}, {277, 327}, {378, 398}, },
			{{-1, 195}, {254, 312}, },
			{{-1, 196}, {255, 313}, },
			{{-1, 197}, {256, 314}, },
			{{-1, 198}, {257, 315}, {258, 316}, },
			{{-1, 199}, {259, 317}, {260, 318}, },
			{{-1, 200}, {261, 319}, {262, 320}, {263, 321}, },
			{{-1, 201}, {203, 264}, },
			{{-1, 202}, },
			{{-1, 212}, {11, 86}, {104, 146}, {170, 245}, {171, 246}, {383, 402}, },
			{{-1, 87}, {137, 219}, },
			{{-1, 161}, {11, 88}, {104, 88}, {133, 88}, {135, 88}, {137, 88}, {170, 88}, {171, 88}, {214, 88}, {217, 88}, {383, 88}, },
			{{-1, 89}, },
			{{-1, 90}, },
			{{-1, 139}, {212, 271}, {245, 306}, {246, 307}, },
			{{-1, 140}, {223, 281}, {368, 391}, {402, 412}, },
			{{-1, 35}, {11, 91}, {104, 91}, {133, 91}, {135, 91}, {170, 91}, {171, 91}, {214, 91}, {217, 91}, {383, 91}, },
			{{-1, 36}, },
			{{-1, 37}, },
			{{-1, 213}, {214, 273}, {217, 273}, },
			{{-1, 38}, {11, 92}, {104, 92}, {133, 92}, {135, 92}, {170, 92}, {171, 92}, {214, 92}, {217, 92}, {383, 92}, },
			{{-1, 39}, },
			{{-1, 40}, },
			{{-1, 288}, },
			{{-1, 380}, {382, 401}, },
			{{-1, 381}, {383, 403}, },
			{{-1, 41}, {11, 93}, {104, 93}, {133, 93}, {135, 93}, {170, 93}, {171, 93}, {214, 93}, {217, 93}, {226, 289}, {383, 93}, },
			{{-1, 94}, },
			{{-1, 162}, {2, 61}, {11, 95}, {104, 95}, {133, 95}, {135, 95}, {137, 95}, {170, 95}, {171, 95}, {214, 95}, {217, 95}, {383, 95}, },
			{{-1, 163}, {2, 62}, {11, 96}, {104, 96}, {133, 96}, {135, 96}, {137, 96}, {170, 96}, {171, 96}, {214, 96}, {217, 96}, {383, 96}, },
			{{-1, 141}, },
			{{-1, 221}, {222, 280}, },
			{{-1, 164}, },
			{{-1, 165}, },
			{{-1, 166}, {152, 234}, },
			{{-1, 304}, {301, 335}, },
			{{-1, 341}, {365, 388}, },
			{{-1, 345}, {335, 361}, },
			{{-1, 346}, {335, 362}, {345, 371}, {361, 387}, },
			{{-1, 167}, {151, 233}, {235, 302}, {342, 368}, {347, 372}, },
			{{-1, 97}, },
			{{-1, 203}, },
			{{-1, 204}, },
			{{-1, 342}, },
			{{-1, 98}, {2, 63}, },
			{{-1, 99}, {2, 64}, {226, 290}, },
			{{-1, 100}, {2, 65}, {226, 291}, },
			{{-1, 101}, {2, 66}, {226, 292}, },
			{{-1, 102}, {2, 67}, {226, 293}, },
			{{-1, 231}, {232, 299}, {294, 299}, {297, 299}, {331, 299}, {359, 299}, {384, 299}, {386, 299}, {404, 299}, {410, 299}, },
			{{-1, 269}, {270, 324}, {334, 324}, {363, 324}, },
			{{-1, 366}, {367, 390}, },
			{{-1, 224}, {225, 282}, },
			{{-1, 376}, {377, 397}, },
			{{-1, 407}, {408, 415}, },
			{{-1, 42}, },
			{{-1, 43}, {134, 216}, },
			{{-1, 214}, {135, 217}, },
			{{-1, 168}, {178, 250}, {251, 310}, },
			{{-1, 232}, {227, 294}, {229, 297}, {295, 331}, {332, 359}, {357, 384}, {360, 386}, {385, 404}, {393, 410}, },
			{{-1, 177}, },
			{{-1, 377}, },
			{{-1, 225}, },
			{{-1, 382}, },
			{{-1, 383}, },
			{{-1, 270}, {300, 334}, {336, 363}, },
			{{-1, 222}, },
			{{-1, 367}, },
			{{-1, 408}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: abstract, const, custom, enum, exception, interface, local, module, native, struct, typedef, union, valuetype, typeprefix, typeid, EOF",
			"expecting: interface, valuetype",
			"expecting: boolean, char, double, fixed, float, long, octet, short, string, unsigned, wchar, wstring, '::', identifier",
			"expecting: valuetype",
			"expecting: identifier",
			"expecting: interface",
			"expecting: any, boolean, char, double, enum, fixed, float, long, octet, sequence, short, string, struct, union, unsigned, valuebase, wchar, wstring, '::', identifier",
			"expecting: EOF",
			"expecting: abstract, const, custom, enum, exception, interface, local, module, native, struct, typedef, union, valuetype, typeprefix, typeid, '}', EOF",
			"expecting: ';'",
			"expecting: '{', ';', ':'",
			"expecting: '{'",
			"expecting: ';', identifier",
			"expecting: ';', ',', '>', identifier",
			"expecting: double, long, identifier",
			"expecting: ';', ',', '<', '>', identifier",
			"expecting: long, short",
			"expecting: supports, ')', '{', ']', ';', ',', ':', '::', '>', '+', '-', '*', '/', '&', '|', '^', '%', '<<', '>>', identifier",
			"expecting: '::', identifier",
			"expecting: '{', ';', identifier",
			"expecting: '<'",
			"expecting: double, long, ';', ',', '>', identifier",
			"expecting: ';', ',', '::', '>', identifier",
			"expecting: switch, ';', identifier",
			"expecting: any, boolean, char, double, enum, fixed, float, long, octet, sequence, short, string, struct, supports, union, unsigned, valuebase, wchar, wstring, '{', ';', ':', '::', identifier",
			"expecting: string literal",
			"expecting: any, attribute, boolean, char, const, double, enum, exception, float, long, native, octet, oneway, readonly, short, string, struct, typedef, union, unsigned, valuebase, void, wchar, wstring, '}', '::', identifier",
			"expecting: any, attribute, boolean, char, const, double, enum, exception, factory, float, long, native, octet, oneway, private, public, readonly, short, string, struct, typedef, union, unsigned, valuebase, void, wchar, wstring, '}', '::', identifier",
			"expecting: supports, '{', ';', ':'",
			"expecting: ')', ';', ',', '>', identifier",
			"expecting: false, true, '(', '::', '~', '+', '-', integer literal, fixed pt literal, floating pt literal, character literal, wide character literal, string literal, wide string literal, identifier",
			"expecting: long, ')', ';', ',', '>', identifier",
			"expecting: '='",
			"expecting: supports, '{', ':'",
			"expecting: any, boolean, char, double, enum, fixed, float, long, octet, sequence, short, string, struct, union, unsigned, valuebase, wchar, wstring, '}', '::', identifier",
			"expecting: abstract, const, custom, enum, exception, interface, local, module, native, struct, typedef, union, valuetype, typeprefix, typeid, '}'",
			"expecting: any, boolean, char, double, fixed, float, long, octet, sequence, short, string, unsigned, valuebase, wchar, wstring, '::', identifier",
			"expecting: ')', '[', ';', ','",
			"expecting: ';', ','",
			"expecting: ')', ';', ','",
			"expecting: '('",
			"expecting: truncatable, '::', identifier",
			"expecting: '{', ',', '::'",
			"expecting: any, boolean, char, double, float, long, octet, short, string, unsigned, valuebase, wchar, wstring, '::', identifier",
			"expecting: any, boolean, char, double, float, long, octet, short, string, unsigned, valuebase, void, wchar, wstring, '::', identifier",
			"expecting: attribute",
			"expecting: ')', ']', ';', ',', ':', '>', '+', '-', '*', '/', '&', '|', '^', '%', '<<', '>>'",
			"expecting: false, true, '(', '::', integer literal, fixed pt literal, floating pt literal, character literal, wide character literal, string literal, wide string literal, identifier",
			"expecting: ')', ']', ';', ',', ':', '::', '>', '+', '-', '*', '/', '&', '|', '^', '%', '<<', '>>'",
			"expecting: '>', '|'",
			"expecting: ')', ']', ';', ',', ':', '>', '|', '^'",
			"expecting: ')', ']', ';', ',', ':', '>', '&', '|', '^'",
			"expecting: ')', ']', ';', ',', ':', '>', '&', '|', '^', '<<', '>>'",
			"expecting: ')', ']', ';', ',', ':', '>', '+', '-', '&', '|', '^', '<<', '>>'",
			"expecting: '}', ','",
			"expecting: ',', '|'",
			"expecting: ',', '>'",
			"expecting: boolean, char, enum, long, short, unsigned, '::', identifier",
			"expecting: supports, '{', ',', '::'",
			"expecting: supports, ')', '{', ','",
			"expecting: '{', ','",
			"expecting: ')', '|'",
			"expecting: ';', '|'",
			"expecting: ')', ';', identifier",
			"expecting: '}', ';', ','",
			"expecting: ']', '|'",
			"expecting: ')'",
			"expecting: long, ')'",
			"expecting: ')', '::'",
			"expecting: supports, '{', ','",
			"expecting: supports, ')', '{', ',', '::'",
			"expecting: in, inout, out, ')'",
			"expecting: context, raises, ';'",
			"expecting: in, ')'",
			"expecting: ')', ','",
			"expecting: context, ';'",
			"expecting: case, default",
			"expecting: in, inout, out",
			"expecting: in",
			"expecting: ':'",
			"expecting: case, default, '}'",
			"expecting: any, boolean, case, char, default, double, enum, fixed, float, long, octet, sequence, short, string, struct, union, unsigned, valuebase, wchar, wstring, '::', identifier",
			"expecting: ')', ',', '::'",
			"expecting: ':', '|'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 4, 5, 4, 4, 4, 6, 4, 4, 4, 4, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 5, 11, 9, 9, 9, 9, 11, 9, 12, 12, 9, 12, 12, 9, 9, 0, 4, 4, 4, 13, 4, 13, 14, 4, 4, 15, 16, 4, 15, 4, 17, 18, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 11, 10, 11, 9, 19, 13, 13, 13, 20, 21, 13, 20, 13, 13, 13, 22, 4, 12, 13, 13, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 23, 24, 25, 25, 8, 8, 8, 8, 8, 8, 8, 8, 18, 11, 4, 26, 27, 8, 28, 13, 29, 30, 31, 29, 30, 17, 4, 32, 33, 4, 34, 35, 6, 30, 36, 37, 9, 38, 39, 40, 18, 41, 11, 9, 9, 9, 42, 10, 43, 44, 45, 4, 9, 9, 9, 9, 26, 18, 4, 4, 4, 9, 9, 4, 4, 26, 4, 6, 6, 9, 27, 27, 27, 27, 27, 26, 11, 46, 46, 30, 47, 47, 47, 46, 46, 46, 46, 46, 46, 46, 48, 49, 50, 51, 52, 53, 46, 46, 46, 46, 47, 46, 29, 49, 17, 30, 11, 54, 9, 4, 34, 34, 9, 35, 34, 55, 56, 30, 37, 37, 4, 38, 38, 57, 42, 18, 58, 18, 59, 60, 4, 4, 43, 27, 27, 27, 27, 27, 40, 9, 26, 40, 4, 4, 9, 27, 9, 26, 26, 61, 13, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 46, 13, 62, 63, 4, 64, 54, 9, 9, 34, 9, 12, 30, 30, 13, 65, 37, 38, 38, 66, 66, 67, 66, 68, 66, 66, 66, 66, 66, 66, 60, 58, 18, 69, 70, 59, 38, 40, 4, 71, 72, 73, 9, 9, 9, 9, 26, 46, 50, 51, 52, 53, 53, 46, 46, 46, 46, 46, 64, 63, 64, 34, 49, 49, 37, 11, 18, 69, 42, 18, 38, 72, 38, 43, 43, 43, 72, 74, 43, 40, 40, 75, 9, 43, 9, 66, 74, 27, 27, 9, 13, 13, 76, 42, 18, 60, 42, 75, 9, 38, 72, 77, 74, 74, 4, 25, 18, 9, 4, 27, 9, 78, 74, 74, 30, 79, 80, 81, 80, 81, 60, 42, 60, 9, 74, 72, 74, 74, 74, 82, 74, 27, 74, 74, 83, 81, 12, 80, 4, 81, 60, 9, 25, 74, 74, 75, 74, 81, 9, 74, 9, 74, 75, 80, 
        };*/
}
